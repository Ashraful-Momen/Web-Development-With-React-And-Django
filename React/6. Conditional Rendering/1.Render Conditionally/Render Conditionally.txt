****we can toggle for state variable books show in browser by toggle:
toggle is like a button => value => True/False . if true then show state , for false can't show state . (conditional-render).

1. render(){showBook = call Book functional component by arrow function } 

     const showBooks = this.state.books.map((book,index) => {  ....

2. add a toggle button where App render(){ returen }  and add onClick event function

3. add a varibale in state : showBooks: true

4. write a method for toggle () => { if toggle clicked then showBook state varibale will be false/true }
     //show books by toggle :
    toggleBooks = () =>{
        this.setState({ showBooks: !this.state.showBooks})
    }

5. now render() { {this.state.showBooks ? showBooks : null}}

-------------------------------------------------------------------------
goto file src >>> App.js
-------------------------------------------------------------------------
import React, { Component } from 'react';
import './App.css';
import Book from './Component/Book'


class App extends Component {

  state = {
    books: [
      { id:1, bookName: "1980", writer: "I don't know" , age: 1},
      { id:2, bookName: "Algorithm", writer: "ALkhirmi", age :2 },
      { id:3, bookName: "DSA", writer: "don't Know", age: 3 },
    ],
    showBooks: true // 1.toggle variable add as showBook.
  }


  //Crud: Update=> event function , change state with input:------------------------------ 
  //chatGPT:------------------------
  changeStatewithInput = (event, index) => {
    const updatedBooks = [...this.state.books];
    updatedBooks[index].bookName = event.target.value;
  
    this.setState({
      books: updatedBooks
    });
  };

  // changeStatewithInput = (event,index) => {
  //  const book = {
  //   ...this.state.books[index]
  //  }
  //   book.bookName = event.target.value; 

  //   const books = [...this.state.books];
  //   books[index]= book;

  //   this.setState({
  //     books: books
  //   })

  // }
  // ------------------------------------

    //CRUD=> Delete = > -------------------------------------------------
     deleteIndexBook = (index) => {
      //copy Array : 
      //  const book = this.state.books.map((item)=> item)
      //  const book = this.state.books.slice();
       const books = [...this.state.books]; // this is the best way

      // const books = this.state.books;
      books.splice(index,1);
      this.setState({
        books:books
      })
    };

    //2.show books by toggle :
    toggleBooks = () =>{
        this.setState({ showBooks: !this.state.showBooks})
    }


  render() {

    // console.log(this.state);
    //add internal CSS in React App:
    const style = {
      width: "80%",
      color: "white",
      background: "black",
      padding: "5px",
      margin: "5px auto",
      border: "1px solid red",
      borderRadius: "10px",

    }


    //CRUD=> Read=> Dynamically show state data by array.map() => iterations:-----------------------


    // console.log(this.state.books);
    
    const showBooks = this.state.books.map((book,index) => {  

      return (<Book
                bookName={book.bookName}
                writer={book.writer}
                key={book.id} // react internal property , which is not accessble...
                delete={()=>this.deleteIndexBook(index)} //this index pass into the deleteBook function() // don't use bind() method if deleteBooks use Arrow function 
                inputName = {(event)=> this.changeStatewithInput(event,index)}
                />);
    });

   
    return (

      <div className="App">
        <h2 style={style}>Book List</h2>
        <hr />

        <button onClick={this.toggleBooks}>Toggle Books</button>
        {/* the "showBooks" variable is const variable : which call Book component function =  const showBooks =           
          this.state.books.map((book,index) =>  */}

        //3. JS Trinary operator=> showBook(true/false):stateShow(true),notShowState(False).
        {this.state.showBooks ? showBooks : null}  

        {/* here pass the showBook variable  */}
        {/* {showBooks} */}
        


      </div>

    );
  };
}



export default App;

-------------------------------------------------------------------------

goto file >>> src >>> Component >>> Book.js
-------------------------------------------------------------------------
import React from 'react';
import '../StyleSheet/Book.css';

const Book = (props) => {

    console.log(props);

    return (
        <div className="Books">
            
            <h3 onClick={props.delete}>BookName: {props.bookName}</h3>
            <b>Writer: {props.writer}</b>
            <input type="text" onChange={props.inputName} value={props.bookName}></input>
           
        </div>
    );

}


export default Book;



-------------------------------------------------------------------------

For better rendering in App.js with toggle => change code =>
-------------------------------------------------------------------------
 let showBookToogle = null 
    if(this.state.showBooks){

      showBookToogle = this.state.books.map((book,index) => {  

      return (<Book
                bookName={book.bookName}
                writer={book.writer}
                key={book.id} // react internal property , which is not accessble...
                delete={()=>this.deleteIndexBook(index)} //this index pass into the deleteBook function() // don't use bind() method if deleteBooks use Arrow function 
                inputName = {(event)=> this.changeStatewithInput(event,index)}
                />);
    });

    };
---------------------------------------------------------------------------
 return (

      <div className="App">
        <h2 style={style}>Book List</h2>
        <hr />

        <button onClick={this.toggleBooks}>Toggle Books</button>
        {/* the "showBooks" variable is const variable : which call Book component function =  const showBooks = this.state.books.map((book,index) =>  */}
        
        {/* {this.state.showBooks ? showBooks : null}   */}

        {/* here pass the showBook variable  */}
        {showBookToogle}
        


      </div>

    );
-----------------------------------------------------------------------------
Last update with toggle efficient coding in App.js full code -> 
-----------------------------------------------------------------------------
import React, { Component } from 'react';
import './App.css';
import Book from './Component/Book'


class App extends Component {

  state = {
    books: [
      { id:1, bookName: "1980", writer: "I don't know" , age: 1},
      { id:2, bookName: "Algorithm", writer: "ALkhirmi", age :2 },
      { id:3, bookName: "DSA", writer: "don't Know", age: 3 },
    ],
    showBooks: true
  }


  //Crud: Update=> event function , change state with input:------------------------------ 
  //chatGPT:------------------------
  changeStatewithInput = (event, index) => {
    const updatedBooks = [...this.state.books];
    updatedBooks[index].bookName = event.target.value;
  
    this.setState({
      books: updatedBooks
    });
  };

  // changeStatewithInput = (event,index) => {
  //  const book = {
  //   ...this.state.books[index]
  //  }
  //   book.bookName = event.target.value; 

  //   const books = [...this.state.books];
  //   books[index]= book;

  //   this.setState({
  //     books: books
  //   })

  // }
  // ------------------------------------

    //CRUD=> Delete = > -------------------------------------------------
     deleteIndexBook = (index) => {
      //copy Array : 
      //  const book = this.state.books.map((item)=> item)
      //  const book = this.state.books.slice();
       const books = [...this.state.books]; // this is the best way

      // const books = this.state.books;
      books.splice(index,1);
      this.setState({
        books:books
      })
    };

    //show books by toggle :
    toggleBooks = () =>{
        this.setState({ showBooks: !this.state.showBooks})
    }


  render() {

    // console.log(this.state);
    //add internal CSS in React App:
    const style = {
      width: "80%",
      color: "white",
      background: "black",
      padding: "5px",
      margin: "5px auto",
      border: "1px solid red",
      borderRadius: "10px",

    }


    //CRUD=> Read=> Dynamically show state data by array.map() => iterations:-----------------------


    // console.log(this.state.books);

    let showBookToogle = null 
    if(this.state.showBooks){

      showBookToogle = this.state.books.map((book,index) => {  

      return (<Book
                bookName={book.bookName}
                writer={book.writer}
                key={book.id} // react internal property , which is not accessble...
                delete={()=>this.deleteIndexBook(index)} //this index pass into the deleteBook function() // don't use bind() method if deleteBooks use Arrow function 
                inputName = {(event)=> this.changeStatewithInput(event,index)}
                />);
    });

    };
    
    // const showBooks = this.state.books.map((book,index) => {  

    //   return (<Book
    //             bookName={book.bookName}
    //             writer={book.writer}
    //             key={book.id} // react internal property , which is not accessble...
    //             delete={()=>this.deleteIndexBook(index)} //this index pass into the deleteBook function() // don't use bind() method if deleteBooks use Arrow function 
    //             inputName = {(event)=> this.changeStatewithInput(event,index)}
    //             />);
    // });

   
    return (

      <div className="App">
        <h2 style={style}>Book List</h2>
        <hr />

        <button onClick={this.toggleBooks}>Toggle Books</button>
        {/* the "showBooks" variable is const variable : which call Book component function =  const showBooks = this.state.books.map((book,index) =>  */}
        
        {/* {this.state.showBooks ? showBooks : null}   */}

        {/* here pass the showBook variable  */}
        {showBookToogle}
        


      </div>

    );
  };
}



export default App;

