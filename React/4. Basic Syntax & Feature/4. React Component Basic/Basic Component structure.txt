Every Js function/class is a react component.
App.js goesto (src folder) > index.js(src folder) > index.html(public-folder)

-------------------------------------------------------
1.import React from 'react' => help to wirte html type code inside JavaScript funciton.
2.import ReactDom from 'react-dom' => Help to render component into index.html (in public folder).

 #need import => import React from 'rect-dom'.

=> ReactDom.render(component/html_code,document.getElementById('root')) | this function render jsx code to html file :  public >  public.html 
=> if public.html > <div id="root2"></div> | any where of react project we can render with this root2 id . ReactDom.render(<h1>hello</h1>,getElementById("root2"));


3. ReactDOM.render(<App/>, document.querySelector('#root')); // <App/> is a component 


or 


#need -> import ReactDOM, { createRoot } from 'react-dom/client';
3. const root = ReactDom.createRoot(document.querySelector('#root')) 
    root.render( <App/>)
------------------------------------------------------------------
folder => src => index.js =>
---------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <App />
);

reportWebVitals();
-----------------------------------------------------------------
-----------------------------------------------------------------
folder => src => App.js =>
---------------------------
import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <h1>
        Hello World
      </h1>
      {/* call the function person / component of person | this function must be in Capital Latter */}
      <Person />
    </div>
  );
}

function Person () {
  return (
    <div>
      <h1>
        function Person is a basically a component in React 
      </h1>
    </div>
  )
}

export default App;



-----------------------------------JSX : syntex-------------------------------------




folder => src => App.js =>
---------------------------
import React from 'react';
import './App.css';

function App() {
  // return (
  //   <div className="App">
  //     <h1>React Basic Component</h1>
  //     <Person />
  //   </div>

  // );
  return React.createElement('div',{className: "App"},React.createElement('h1',null, "React Baqsic Component"),<Person/>);
}

function Person() {
  // return (
  //   <div>
  //     <h4>I am person component</h4>
  //   </div>
  // );
  return React.createElement('div',null,React.createElement('h4',null,'I am person component'));
}

export default App;

-----------------------------------------------------------------------------------------------------------------------
Reac.createElement('htmlTag','Attribute','text/add inside other Html element') ; it's working like dom.appendChild()

return React.createElement('tagName', 'null/Attribute','textContent' or 'Add inside component/ add function like React.createElement());
or=>
return React.createElement('jsx tag name => div / h1 /etc', null/{className/id/Attribute/ or here we can also add => React.createElement('tagName','Attribute','textContent/React.createElement(...))},'textContent', Anothercomponent);


return React.createElement('div',{className: "App"},React.createElement('h1',null, "React Baqsic Component"),<Person/>);
--------------------------------------------------------------------------------------------------------------------------
*** But good practise is : JSX  => 
 // return (
  //   <div>
  //     <h4>I am person component</h4>
  //   </div>
  // );

*** Bad practise is :  return React.createElement('div',null,React.createElement('h4',null,'I am person component'));

*** in Component: use jsut 1 root Element => <div> add other component here (make a tree : like nested component)</div>
