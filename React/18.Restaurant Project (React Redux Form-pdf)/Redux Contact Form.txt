>>> npm install react-redux-form --save

-----------------------installation error fix with this command : npm config set legacy-peer-deps true---------------------------------------------------------------------------------------------
fix the error >>> npm config set legacy-peer-deps true
again run this command >>> npm install react-redux-form --save
---------------------------------------------------------------------------------------------------------------------------
after installation then fontawesome incon not working to fix this run those command : 
=> npm install @fortawesome/react-fontawesome@latest
=> npm install @fortawesome/fontawesome-svg-core

react-redux-form Documentation=> https://davidkpiano.github.io/react-redux-form/docs.html

---------------------------------------------className="form-control"------------------------------------------------------------------------------
contact.jsx=> replace => <Form></Form> to <LocalForm></LocalForm>
                      => <Input > to <Control model={}></Control>
---------------------------------------------------------------------------------------------------------------------------
import React, { Component } from "react";
import { Form, FormGroup, Button, Col, Input, Label } from "reactstrap";
import { LocalForm, Control, Errors } from "react-redux-form";

class Contact extends Component {

	handleSubmit = (value) => {
		console.log(value);
	};

	render() {
		document.title = "Contact";
		return (
			<div className="Container">
				<div
					className="row row-content"
					style={{ paddingLeft: "20px", textAlign: "left" }}
				>
					<div className="col-12">
						<h3>Send US your FeedBack!</h3>
					</div>
					<div className="col-12 col-md-7">
						<LocalForm onSubmit={(value) => this.handleSubmit(value)}>
							<FormGroup row>
								<Label htmlFor="firstname" md={2}>
									First Name
								</Label>
								<Col md={10}>
									<Control.text
										model=".firstname"
										name="firstname"
										placeholder="First Name"
										className="form-control"
									/>
								</Col>
							</FormGroup>
							<FormGroup row>
								<Label htmlFor="lastname" md={2}>
									Last Name
								</Label>
								<Col md={10}>
									<Control.text
										model=".lastname"
										name="lastname"
										placeholder="Last Name"
										className="form-control"
									/>
								</Col>
							</FormGroup>
							<FormGroup row>
								<Label htmlFor="telnum" md={2}>
									Contact Tel.
								</Label>
								<Col md={10}>
									<Control.text
										model=".telnum"
										name="telnum"
										placeholder="Telephone Number"
										className="form-control"
									/>
								</Col>
							</FormGroup>
							<FormGroup row>
								<Label htmlFor="email" md={2}>
									Email
								</Label>
								<Col md={10}>
									<Control.text
										model=".email"
										name="email"
										placeholder="Email"
										className="form-control"
									/>
								</Col>
							</FormGroup>
							<FormGroup row>
								<Col md={{ size: 6, offset: 2 }}>
									<FormGroup check>
										<Label check>
											<Control.checkbox
												model=".agree"
												type="checkbox"
												name="agree"
												className="form-control-input"
											/>
											May We Contact You?
										</Label>
									</FormGroup>
								</Col>
								<Col md={{ size: 3, offset: 1 }}>
									<Control.select
										model="contactType"
										name="contactType"
										className="form-control"
									>
										<option>Tel.</option>
										<option>Email</option>
									</Control.select>
								</Col>
							</FormGroup>
							<FormGroup row>
								<Label htmlFor="message" md={2}>
									Your Feedback
								</Label>
								<Col md={10}>
									<Control.textarea
										model="message"
										name="message"
										rows="12"
										className="form-control"
									/>
								</Col>
							</FormGroup>
							<FormGroup row>
								<Col md={{ size: 10, offset: 2 }}>
									<Button type="submit" color="primary">
										Send
									</Button>
								</Col>
							</FormGroup>
						</LocalForm>
					</div>
				</div>
			</div>
		);
	}
}

export default Contact;

---------------------------------------------------------------------------------------------------------------------------
------------------------------------------------3. Placing Form data in Redux Store-----------------------------------------------------------------------
src >>> redux >>> form.js => create redux state for form. 
---------------------------------------------------------------------------------------------------------------------------
export const InitialContactForm = {
    firtname: "",
    lastname: "",
    telnum: "",
    email: "",
    agree:false,
    contactType:"Tel.",
    message:"",

}

---------------------------------------------------------------------------------------------------------------------------
src >>> redux >>> reducer=> add reducer for contant form=> import {createForms} from 'react-redux-form' and import {InitialContactForm }
---------------------------------------------------------------------------------------------------------------------------
export const Reducer = combineReducers ({
		dishes:dishReducer,
		comments:commentReducer,
		...createForms ({
			feedback: InitialContactForm, // pass the contact state value in here and make the state to contact form...
		})
	});
    -----------------------------------reducer full => ------------------------------------------
    

import COMMENTS from "../data/COMMENTS";
import { combineReducers } from "redux";
import * as actionType from '../redux/actionType';
import { InitialContactForm } from "./form";
import { createForms } from "react-redux-form";

//thunk function logic is here below=>

const dishReducer= (dishState={isLoading:false,dishes:[]}, action) =>{
	switch(action.type){
		case actionType.DISHES_LOADING:
			return{
				...dishState,
				isLoading:true,
				dishesh:[]
			}
		case actionType.LOAD_DISHES:
			return{
				...dishState,
				isLoading:false,
				dishes:action.payload , // this value pass all dishes form fetchDishes(loadDishes(action.value pass the dishes))
			}


		default:
			return dishState;

	}
	
}


const commentReducer = (commentState = COMMENTS, action) => {
	switch(action.type){
		case actionType.ADD_COMMENTS:
			let comment = action.payload;
			comment.id = commentState.length;
			comment.date = new Date().toDateString();
			console.log(comment);
			return commentState.concat(comment);
		
		default:
			return commentState;

	}
  };


export const Reducer = combineReducers ({
		dishes:dishReducer,
		comments:commentReducer,
		...createForms ({
			feedback: InitialContactForm, // pass the contact state value in here and make it state to contact form...
		})
	});

---------------------------------------------------------------------------------------------------------------------------
goto the contact.jsx => change <LocalForm> </LocalForm> to <Form></Form>, and import {actions } from "react-redux-form"
---------------------------------------------------------------------------------------------------------------------------
create a mapDispatchToProps() , then we can get those props inside in Contact Class. 
------------------------------------------------------------------------------------
const mapDispatchToProps = dispatch =>{
	return {
		resetFeedbackForm: () =>{
			dispatch(action.reset('feedback')); // here we know , dispatch pass action with payload , but in contact form action.(reset(reducer object: feedback));
		}
	}
}
----------------------------------------------------------------------------------------
Now {connect} from 'react-redux';

export default Connect(null,mapDispatchToProps) (Contact);
-----------------------------------------------------------
add <Form model="feedback" /> // here 'feedback come from reducer .
and add resetFeedbackForm to the handleSubmit()=>
-------------------------------------------------

import React, { Component } from "react";
import { FormGroup, Button, Col, Label } from "reactstrap";
import { Form, Control, Errors, actions } from "react-redux-form";
import { connect } from "react-redux";

const required = (value) => value && value.length;
const inNumber = (value) => !isNaN(Number(value));
const validEmail = (value) =>
  /^([a-zA-Z0-9_.+-])+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/i.test(value);

const mapDispatchToProps = (dispatch) => {
  return {
    resetFeedbackForm: () => {
      dispatch(actions.reset("feedback")); // this reducer "feedback" pass inside the action.reset('feedback') ; either getting error.
    },
  };
};

class Contact extends Component {
  handleSubmit = (values) => {
    console.log(values);
    this.props.resetFeedbackForm();
  };

  render() {
    document.title = "Contact";

    return (
      <div className="Container">
        <div className="row row-content" style={{ paddingLeft: "20px", textAlign: "left" }}>
          <div className="col-12">
            <h3>Send US your FeedBack!</h3>
          </div>
          <div className="col-12 col-md-7">
            <Form model="feedback" onSubmit={(values) => this.handleSubmit(values)}>
              <FormGroup row>
                <Label htmlFor="firstname" md={2}>
                  First Name
                </Label>
                <Col md={10}>
                  <Control.text
                    model=".firstname"
                    id="firstname"
                    name="firstname"
                    placeholder="First Name"
                    className="form-control"
                    validators={{
                      required,
                    }}
                  />
                  <Errors
                    className="text-danger"
                    model=".firstname"
                    show="touched"
                    messages={{ required: "Required" }}
                  />
                </Col>
              </FormGroup>
              <FormGroup row>
                <Label htmlFor="lastname" md={2}>
                  Last Name
                </Label>
                <Col md={10}>
                  <Control.text
                    model=".lastname"
                    id="lastname"
                    name="lastname"
                    placeholder="Last Name"
                    className="form-control"
                    validators={{
                      required,
                    }}
                  />
                  <Errors
                    className="text-danger"
                    model=".lastname"
                    show="touched"
                    messages={{ required: "Required" }}
                  />
                </Col>
              </FormGroup>
              <FormGroup row>
                <Label htmlFor="telnum" md={2}>
                  Contact Tel.
                </Label>
                <Col md={10}>
                  <Control.text
                    model=".telnum"
                    id="telnum"
                    name="telnum"
                    placeholder="Telephone Number"
                    className="form-control"
                    validators={{
                      required,
                      inNumber,
                    }}
                  />
                  <Errors
                    className="text-danger"
                    model=".telnum"
                    show="touched"
                    messages={{
                      required: "Required",
                      inNumber: "Invalid Number",
                    }}
                  />
                </Col>
              </FormGroup>
              <FormGroup row>
                <Label htmlFor="email" md={2}>
                  Email
                </Label>
                <Col md={10}>
                  <Control.text
                    model=".email"
                    id="email"
                    name="email"
                    placeholder="Email"
                    className="form-control"
                    validators={{
                      required,
                      validEmail,
                    }}
                  />
                  <Errors
                    className="text-danger"
                    model=".email"
                    show="touched"
                    messages={{
                      required: "Required",
                      validEmail: "Invalid Email",
                    }}
                  />
                </Col>
              </FormGroup>
              <FormGroup row>
                <Col md={{ size: 6, offset: 2 }}>
                  <FormGroup check>
                    <Label check>
                      <Control.checkbox
                        model=".agree"
                        id="agree"
                        name="agree"
                        className="form-control-input"
                      />{" "}
                      May We Contact You?
                    </Label>
                  </FormGroup>
                </Col>
                <Col md={{ size: 3, offset: 1 }}>
                  <Control.select
                    model=".contactType"
                    id="contactType"
                    name="contactType"
                    className="form-control"
                  >
                    <option>Tel.</option>
                    <option>Email</option>
                  </Control.select>
                </Col>
              </FormGroup>
              <FormGroup row>
                <Label htmlFor="message" md={2}>
                  Your Feedback
                </Label>
                <Col md={10}>
                  <Control.textarea
                    model=".message"
                    id="message"
                    name="message"
                    rows="12"
                    className="form-control"
                    validators={{
                      required,
                    }}
                  />
                  <Errors
                    className="text-danger"
                    model=".message"
                    show="touched"
                    messages={{
                      required: "Required",
                    }}
                  />
                </Col>
              </FormGroup>
              <FormGroup row>
                <Col md={{ size: 10, offset: 2 }}>
                  <Button type="submit" color="primary">
                    Send
                  </Button>
                </Col>
              </FormGroup>
            </Form>
          </div>
        </div>
      </div>
    );
  }
}

export default connect(null, mapDispatchToProps)(Contact);

-------------------------------------------------------------------------------------------------------------------------
feedback error explination: 
I apologize for the confusion. It seems that the feedback variable is not defined in the scope of the mapDispatchToProps function. To fix this issue, you need to provide the name of the form/model that you want to reset.

If you are using createForms from react-redux-form to create the form model, you can pass the name of the model as a string. In your case, the model name is "feedback". Here's the corrected code:

jsx
Copy code
const mapDispatchToProps = (dispatch) => {
	return {
		resetFeedbackForm: () => {
			dispatch(actions.reset("feedback"));
		},
	};
};
By passing the string "feedback" as the argument to actions.reset(), you are specifying the form/model that you want to reset.

I apologize for the confusion caused earlier. Let me know if you have any further questions!
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------