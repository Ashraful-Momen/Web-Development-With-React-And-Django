developer.mozilla.org => for cheak , how the browser work with server .... response cycle.

practical Lab use => websniffer.cc
---------------------------------------------------------------------------------------------------
Rest Api -> 
--------------
#Resource (Nouns)-> Any Information Provided by RestAPi.  which data get from server as json method. URI -> Uniform Resorce Indicator.

#Method(Verbs-get,post,put,patch,delete...): Action to be perform on Resource. CRUD Operation.
---------------
Post-Create Operation.
get->Read.
put->Update.
delete->Delete.
------------------------------------------------------------------------------------------------
#How data Represented on Client side : 1.Json, 2.XML

REST API != HTTP -> RestApi use (follow) the cycle of HTTP.

------------------------------------------------------------
#Github APi -> https://docs.github.com/en/rest?apiVersion=2022-11-28 ->Selete The "Root Endpoint" Api -> https://api.github.com/-> get Lot's of resource Link .

->https://api.github.com/users/{user}
->https://api.github.com/users/Ashraful-Momen -> I will get all info about my git profile.
----------------------------------------------------------------
#https://jsonplaceholder.typicode.com/ -> Selete Resource -> post/commnets/photos/todos/users. 
-----------------------------------------------------------------------------------------------------------------------


---------------------------------------4. Setting up your own REST API--------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
>>>npm install json-server -g 
-----------------------------------------------------------------------------------------------------------------------
#to run our own file in json-server => 

>>> json-server fileNameForHost --watch (see the response of the file) -p 3001

>>> json-server db.json --watch  -p 3001
------------------------------------Solve Error for :json-server command----------------------------------------------------------------------
Run PowerShell as Administrator.....
---------------------------------------
PS C:\WINDOWS\system32> Get-ExecutionPolicy
Restricted
PS C:\WINDOWS\system32> Set-ExecutionPolicy RemoteSigned

Execution Policy Change
The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose
you to the security risks described in the about_Execution_Policies help topic at
https:/go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy?
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "N"): Y
PS C:\WINDOWS\system32> Get-ExecutionPolicy
RemoteSigned
PS C:\WINDOWS\system32> json-server db.json --watch -p 3001

  \{^_^}/ hi!

  Loading db.json
  Oops, db.json doesn't seem to exist
  Creating db.json with some default data

  Done

  Resources
  http://localhost:3001/posts
  http://localhost:3001/comments
  http://localhost:3001/profile

  Home
  http://localhost:3001

  Type s + enter at any time to create a snapshot of the database
  Watching...
-----------------------------------------------------------------------------------------------------------------------
 npm list -g json-server - show the path of json-server....
-----------------------------------------------------------------------------------------------------------------------



---------------------------------------------5. Using REST API from React App--------------------------------------------------------------------------
>>> npx create-react-app my-app
>>> npm install cross-fetch axios --save
-----------------------------------------------------------------------------------------------------------------------
src>>> App.js =>
---------------
import react , {Component} from 'react';
import fetch from 'cross-fetch'; 
import axios from 'axios';

class App extends Component {

  componentDidMount(){
    //  fetch('https://jsonplaceholder.typicode.com/posts')
    //  .then(resposne => resposne.json())
    //  .then(data=> console.log(data) );

    axios.get('https://jsonplaceholder.typicode.com/posts')
    // .then(response => console.log(response.data))
    .then(response => response.data)
    .then(data=> console.log(data));

   
  }

  render()
  {
    return (
      <div >
       
      </div>
    );
  }
 
}

export default App;
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------6. Error Handling, POST, PUT, DELETE------------------------------------------------------------------------
>>> src >>> App.js=> 
-----------------------
import react , {Component} from 'react';
import fetch from 'cross-fetch'; 
import axios from 'axios';

class App extends Component {

  componentDidMount(){
    //  fetch('https://jsonplaceholder.typicode.com/posts')
    //  .then(resposne => resposne.json())
    //  .then(data=> console.log(data) );

    // axios.get('https://jsonplaceholder.typicode.com/posts')
    // // .then(response => console.log(response.data))
    // .then(response => response.data)
    // .then(data=> console.log(data));

    //get____________________________________________
    axios.get('http://localhost:3001/dishes')
    .then(response=>response.data)
    .then(data=> console.log(data));
    //create____________________________________________
    // axios.post('http://localhost:3001/dishes',   {
    //   "name": "chips",
    //   "price": "$20"
    // } )
    // .then(response=>response.data)
    // .then(data=> console.log(data));

    //Updtae____________________________________________

    // axios.put('http://localhost:3001/dishes/8',   {
    //   "name": "burger",
    //   "price": "$30"
    // } )
    // .then(response=>response.data)
    // .then(data=> console.log(data));

    //Delete______________________________________

    axios.delete('http://localhost:3001/dishes/8',   {
      "name": "burger",
      "price": "$30"
    } )



   
  }

  render()
  {
    return (
      <div >
       
      </div>
    );
  }
 
}

export default App;

-----------------------------------------------------------------------------------------------------------------------

----------------------------------------------7. Handling Responses using State-------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
src>>> App.js=>
---------------
import react , {Component} from 'react';
import fetch from 'cross-fetch'; 
import axios from 'axios';

class App extends Component {
  set = {
    dishes:null,
    errorMsg: null,
  }

  componentDidMount(){

    console.log("ComponentDidMount",this.state);
    
    //get____________________________________________
    axios.get('http://localhost:3001/dishes',   {
      "name": "chips",
      "price": "$20"
    } )
    .then(response=>response.data)
    .then(data=> {
      this.setState({
        dishes:data,
      })
    })
    .catch(error=>{
      this.setState({
        errorMsg:error.message,
      })
    });
    //create____________________________________________
    // axios.post('http://localhost:3001/dishes',   {
    //   "name": "chips",
    //   "price": "$20"
    // } )
    // .then(response=>response.data)
    // .then(data=> console.log(data));

    //Updtae____________________________________________

    // axios.put('http://localhost:3001/dishes/8',   {
    //   "name": "burger",
    //   "price": "$30"
    // } )
    // .then(response=>response.data)
    // .then(data=> console.log(data));

    //Delete______________________________________

    // axios.delete('http://localhost:3001/dishes/8',   {
    //   "name": "burger",
    //   "price": "$30"
    // } )



   
  }

  componentDidUpdate(){
    console.log("Updated",this.state);
  }

  render()
  {
    return (
      <div >
       
      </div>
    );
  }
 
}

export default App;

-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
