# For Web App's Virsion control we use git ... In linux we use snpashot for goto many stage after change in our sytem


>>> commit => after change code  we use commit (with command -whatever change) for save. 1 commit 1 stage will be created as snapshot ...

>>> checkpoint => after change code inside our apps we can go/back => previous/next virsion ... after commit create a new check point


-------------------------install the Git-----------------------

>>> download and install with default settings

------------------------initialize with folder---------------
>>> git init 
------------------------git status---------------------------

>>> git status [check all info about the git folder - status, commit, branch, stage...etc]

------------------------git add file/folder-----------------------

>>> git add fileName/FolderName
>>> git add . [all file/folder in current folder will be add in git add(tracked)]

*** after git add we can commit 

-----------------------git remove/untracked file/folder---------------------

>>> git rm --cached gitText.txt [file/folder Name]

------------------------git commit (create snapshot/stage)------------------------------------------
# for commit firt -> 
----------------------------
>>>git config --global user.email "you@example.com"
>>>git config --global user.name "Your Name"
----------------------------
//single line commit=> 
-----------------------
>>> git commit -m 'first commit '  [-m means (msg)]

multi line commit  => 
-----------------------
>>> git commit 

----------------------git log : show the commit--------------------------------
>>> git log [see all commit ]

----------------------
see the commit in one line (shortly)
-----------------------
>>> git log --oneline
-----------------------
commit HEAD -> master( here commit Head is a pointer last position of commit)
-----------------------
*** before commit -m , must be use >>> git add . >>> then commit >>> git commit -m 
-----------------------

------------------------Git graph package install in VS CODE extension-------------------------
>>> clt+shift+p [show the git graph] 
>>> then search =>> git graph views + click 
>>> click on the commit | then we can able to see commit detials .... (usefull for bugs findings in app)
-------------------------------------------------------------------------------------------

---------------------------.gitignor : for untracked file/folder ------------------------------- 

inside .gitignore file write fileName.txt or folderName /     <- then those file or folder ignore for->  git add . 

>>> fileName.txt 
>>> folderName / 
--------------------------------
>>> https://www.toptal.com/developers/gitignore/
>>> in search box -> django / react / node / .... for ignore those file and small size <- provide all .gitignore files...
---------------------------------



---------------------------------------------------------------------------------------------------------


-------------------------------------git branch::--------------------------------------------------------------------

branch working as like tree ... from master branch (main ) to create sub branch ....
>>> some of programmer working  together with branch to develop different portions of Apps [1 person develop hompage, 1 person develop contact page , 1 person deveop differents apps etc]

show the branch:
-----------------
>>> git branch

1. first commit
2. second commit
3. third commit 

>>> second commit parent is first commit (hash_id)
>>> third commit parent is second commit (hash_id)

----------------------------------
***create branch=> 
-----------------------------------
>>> git checkout -b branchAnyName  | when create new branch , previous branch will be parent branch for new branch , and new branch inherit all propertys from parent branch... after merging
-------------------------------------


-------------------------------------
***switch 1 branch to another branch ->
-------------------------------------
>>> git checkout branchName 
-------------------------------------
if we switch child (feature) branch to parent(master) branch then child(feature) previous task will remove ... 
again if we switch 
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
--------------------------------------------Visualizing Merge-------------------------------------------------------------
Fast-Forwading- Merging.=> [after master branch work , switch new featuer branch ... then complete task / commit , then switch master branch and marge with feature branch, ***in that time master branch has no more commit change . then we success fully to do merging]

>>> git branch (check the branch)
>>> git checkout master (switch)
>>> git merge feature(child branch name)

***delete branch >>> git branch -d branchName 
>>> git branch -d feature 


suppose we want develop App portions like login system in another branch . After complete the Login System we can add/merge/copy with main/master branch
. after merge with main/master branch the child branch  not effect on main/master branch ... it's call => Fast-Forwading- Merging.
after completing Login system (another Branch) , Just we merge with master/main branch , then we can delete the (Log in system develop branch -child branch)

-------------------------------------
Merging with commit => 
------------------------
master branch commit => 1 , 2, 3, 
then create new branch feature branch and comit => 1, 2 . after that we again switch master branch , then commit => 4,5, ... 
[but this master branch change of commit can't merge/add with feature branch -> that's why we can't merging feature branch with master branch ]

*** to solve this issue , use Merging with commit (last commit of master branch)=> then all commit will be add together (feature+master branch commit) as last commit.


------------------------------------
-------------------------------------
--------------------------------------------Delete Branch-------------------------------------------------------------
>>> git branch -d branchName 

---------------------------------------------------------------------------------------------------------
-------------------------------------------Resolve Merge Conflicts--------------------------------------------------------------
-------------------------------------
if can't merge / switch branch , then use those stratigy
1. git add . 
2. git commit -m "commit"
then swith branch and merge.... 

-------------------------------------
---------------------------------------------------------------------------------------------------------
--------------------------------------Creating Repo in Github -------------------------------------------------------------------
git offline file upload to git
---------------------------------------------------------------------------------------------------------
…or create a new repository on the command line
echo "# TestGit" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Ashraful-Momen/TestGit.git
git push -u origin main
---------------------------------------
…or push an existing repository from the command line
git remote add origin https://github.com/Ashraful-Momen/TestGit.git    | [link off line folder to online folder]
git branch -M main   [change/migrate the branch name 'master' to 'main']
git push -u origin main [upload to file]


if want to push another branch => 
---------------------------------
>>> git push -u origin branch_name

-----------------------------------
download any file from github.com-> >>> git clone http:link...
-----------------------------------

-----------------------------------
---------------------------------------------------------------------------------------------------------
--------------------------------------git pull-------------------------------------------------------------------
if other person chagne code and commit in colleborate branch to get this update commit in our desktop git 
>>> git pull 
***online commit bring to offline git .....
------------------------------------------------------------------------------------------------------------------------
''' this commit create from gitHub''' for testing >>> git pull 
-------------------------------------------------------------------------------------------------------------
-------------------------------------git pull request(github)------------------------------------------------------------------------

basically pull reqeust merge with other branch in github ... and spach commit (more commit make 1 commit ...)
>>> if someone commit in github update branch with commit 
>>> then pull request merge one to other branch 
>>> for update github commit after pull reqeust(merge with other branch )
>>> git pull (update offline git )

-----------------------------------------git Forking-----------------------------------
#git forking => clone a repository from other github profile into my github profile . 

> then git clone to my dektop 
> then commit afeter completing task 
> then push to my github repo 

now want to contribute my task to other repo > then create a pull requst > select the repository other where I contribute my task
>>> when create pull requst for contribute to others then >>> select the repo and branch , then select my repo (where I complete task for contribut ) and select my branch , then commit to create a pull requst .
>>> when owner of the repo accept my request commit will create auto ....
------------------------------------------git Read.md(mark down)-------------------------------------
this is a github template ... write down about github repo in read.me... and there are some of rulse 
to write the details in readme.md ....
-------------------------------------------Error fixing for pushing --------------------------------
if can't push to github repo => git pull origin main --allow-unrelated-histories

------------------------------------------download with branch repo------------------------------
>>> git pull remote_repo Branch
------------------------------------------goto back commit 1 step--------------------------------
>>> git reset --hard HEAD~1
