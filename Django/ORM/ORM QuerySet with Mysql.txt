-------------------------------------------------------------------------------------------------------------------
---------------------------------------------Mysql----------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
install mysqlclient packages and setup the settings
----------------------------------------------------
setting.py=> 
--------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'storefront',
        'HOST':'localhost',
        'PORT':'3306',
        'USER': 'root',
        'PASSWORD': '',
         'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",  #using this line -> avoiding the db error waring...
        },
        
    }
}

------------------------------------------------
------------------------------------------------
for running the Raw sql Query > need to empty migrations 

>>> python manage.py makemigrations store --empty 

then open the migrations file from >>> store >> migrations>> open the last migrations files.
------------------------------------------------
---------------------------------------------------
write Raw Sql query => inside the migratins array => 
--------------------------------------------------
class Migration(migrations.Migration):

    dependencies = [
        ('store', '0004_customer_store_custo_first_n_a7e990_idx_and_more'),
    ]

    operations = [
        migrations.RunSQL("""
            INSERT INTO store_collections (title) VALUES ('collectins1')
        """,
        """
            DELETE FROM store_collections WHERE title='collections1'
        """)
    ]

>>> python manage.py migrate 
------------------------------------------------
------------------------------------------------
if we want to unchange the migrations then we can back => 
----------------------------------------------------
>>> python mangae.py migrate tableName lastPreviousMigrationsFileNumbers.
>>> python manage.py migrate store 0004 
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
----------------------------------------Dummy Data Generate in MySql---------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
goto website for generation the dummy data => https://mockaroo.com/
------------------------------------------------------------------------------------------
count how much data in sql table , raw sql command 
=> SELECT COUNT(*) FROM store_customers
run the command on db directly
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
#to store seed.sql data into DB ...
-----------------------------------

change the root db password from db first. 
then > create storefront database 

>>> first close all session form DB . 


>>> drag and drop seed.sql into Sql query command and select go 
>>> then >>> python manage.py migrate 
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
----------------------------------------------ORM command Django---------------------------------------------------
-------------------------------------------------------------------------------------------------------------------


Every Model in Django attributes is called Objects.=> 
-------------------------------------------------------
get all data ->  Model.objects.all()
get single data ->  Model.objects.get(pk = 1) #django autometically get primary key.
get filter data ->  Model.objects.filter()
-------------------------------------------
if product not in DB -> Model.obejects.get(1) | this command generate a error , To handle the error 
>>> in views import >>> from django.core.exceptions import ObjectDoesNotExist . and use (try+catch -> method in views)

either use to sole-> Model.objects.filter(1).first()
or use-> Model.Objects.filter(1).exits() 
-----------------------------------------



--------------------------------------------Math expressions: -----------------------------------------------------------------------
not use=> Model.objects.filter(unit_price > or < 1),Error,so use alternative
------------
 Model.objects.filter(unit_price__gt=1) |
  [keyward__args] __gt = greater than ; __gte = greater than equels.
  similarly __lt = less than , __lte = less than equal

for range filter use=> 
-------------------------
Model.objects.filter(coloumnName__use->column/gt/range/id/startwith/etc/year/month/day__moreLookupConditions__range=(1,20))

Model.objects.filter(title__startswith='hello')
--------------------------------------------------------------------------------------------------
aplly filter conditions => Model.objects.filter(price__id__gt=10)

aplly filter conditions => Model.objects.filter(price__sku__range=(1,10))
--------------------------------------------------------------------------------------------------
aplly filter conditions => Model.objects.filter(range=(1,10))
--------------------------------------------------------------------------------------------------
find a title which contains coffe => Model.objects.filter(title__contains='coffe')
--------------------------------------------------------------------------------------------------
last_update with 2020 => Model.objects.filter(last_update__year/date/month=2021)
--------------------------------------------------------------------------------------------------
describtion => Model.objects.filter(describtion__null=True)
--------------------------------------------------------------------------------------------------
all the product inventory<10 and prince < 100 => Model.objects.filter(inventory__lt=10, prince__lt=1000)
or
all the product inventory<10 and prince < 100 => Model.objects.filter(inventory__lt=10).filter(prince__lt=1000)
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
# django.db.models import Q | here 'Q' means queryset and use use bitway oparetors (&,|,~ -> and, or, not)

all the product inventory<10 and prince < 100 => Model.objects.filter(Q(inventory__lt=10) & Q(prince__lt=1000))


-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
# django.db.models import Q ,F| here 'F' means queryset referance others

all the product store.inventory == price . In compaier we get error , if we varibale type (int/str)change
that's why use => Model.objects.filter(Q(inventory=F('price')))
that's why use => Model.objects.filter(Q(inventory=F('collections__id')))
-------------------------------------------------------------------------------------------------------------------
------------------------------------------------Sorting-------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
sorting_Order=> Models.objects.orderBy('column_name') | accending order . 
sorting_Order=> Models.objects.orderBy('-column_name') | deccending order . use('-')
sorting_Order=> Models.objects.filter('collections__id=1').orderBy('unit_Price')


sorting_Order=> Models.objects.filter('collections__id=1').orderBy('unit_Price') | or use 

sorting_Order as first product => Models.objects.filter('collections__id=1')[0] |
sorting_Order as first product => Models.objects.earliest('collections__id=1')[0] | return an object 
sorting_Order as first product => Models.objects.latest('collections__id=1')[0] | deccending product get update price

-------------------------------------------------------------------------------------------------------------------
-----------------------------------------------Limited Result--------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
get 5 data ->  Model.objects.all()[:5] | reutrn 0 to 4 , total 5. slicing ....
-------------------------------------------------------------------------------------------------------------------
-----------------------------------------------get object from 2 tables--------------------------------------------
get  data 2 tables ->  Product.objects.values('id','title','collections__id') | Product table .join(Collections_table),then return dictionery.
get  data 2 tables ->  Product.objects.values_list('id','title','collections__id') | Product table .join(Collections_table),then return tuple.

get  data  ->  Product.objects.values('id','title').distinc() | .distinc() -> return no duplicate items.


--------------------------------------------------------------------------------------------------------------


 -> OrderItems.objects.values(id__in=Product.objects.values('id','title').distinc() ) #return as object
# Filter OrderItems based on product IDs=> ----------------
    It looks like you're trying to retrieve a list of Product IDs and titles and then use that list to filter OrderItems
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
***cautions if use => Product.objecetes.Only('column1','column2') <- query then use only those 2 column . if use others collsom of 
the Product then generate extra sql query for every single products.


Product.objecetes.difer('column1') -> get all products with out 'column1' if write {{product.column1}} in templates
then extra query will be generated as well as only also do .

-------------------------------------------------------------------------------------------------------------------
-----------------------------------------Product.obejects.tableTotableTraversal()--------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
.select_related() -> access 1 to other 1 table data easyly , when 1 to N(multiple) table data need 
use .prefetch_related().all()

if we use => products = Product.obejects.all() -> 
and use in templates=> {{products.title}} and {{products.collections.title}} <- Product has a relation with 
collections table , then django create thousand of SQLquery for every obejects. cause we want to access 
collections_table data By product_table .

#to solve this issu we have to use =>  Product.obejects.select_related('collections_table').all()
------------------------------------------------------------------------------------------------
we know Products table have relations with multiple table , if we want to access multiple tables data with product 
table then we have to use => Product.obejects.prefetch_related('discount_table').select_related('collections_table').all()
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
get last 5 order form with customer data => querySet = Order.objects.select_related('customers_table').orderBy('-placed_at')[:5]
get last 5 order form with customer data + OrderItems + Products=> querySet = Order.objects.prefetch_related(orderItem_table__Product)select_related('customers_table').orderBy('-placed_at')[:5]
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------aggregates=> Models------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
import in views => 
-------------------

from django.db.models.aggregates import Count,Max,Min,Avg,Sum


find collectins_id_1_product with min price =>
------------------------------------------
 product = Product.obejcts.filter('collections_id=1').aggregates(
    count=Count('id'), min_price=Min('unit_Price')
)




-------------------------------------------------------------------------------------------------------------------
--------------annotate(ReceiveAsExpression=>Value/F('column')): Insert_table_column/Triggering------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------


from django.db.models import Value,F 
querySet = Customer.objects.annotate(new_id=Value(default='True')) # if directly use True then getting error .

tha't why convert True as expression 

in customer table add new column = new_id wich start with 2=> 
---------------------------------------------

from django.db.models import Value,F 

querySet = Customer.objects.annotate(new_id=F('id')+1)
---------------------------------------------

if we want to concate Customers FullName = 'first_name'+'last_name' . 


from django.db.models import Value,F ,Func | here Func means DataBase function & F means REFERENCES column of tables.
from django.db.models.functions import Concate | here Func means DataBase function & F means REFERENCES column of tables.
--------------------------------------------
querySet = Customer.objects.annotate(full_name = Func(F('first_name') + Value(' ')+ F('last_name'),Func='Concate'))

if we want to use spaec between FirstName + space + LastName => use Value(" ")
---------------------anohterMehtods-------------------------------------------

querySet = Customers.objects.annotate(full_name=Concate('first_name',Value(' '), 'last_name'))
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
#find the orders of each custers

querySet = Customer.objects.annotate(Count('order_set')) # Error , Customer & Order has reverse relations between them.
so use alternative 'order_set' to order => querySet = Customer.objects.annotate(Count('order'))
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------#discount price: ------------------------------------------------------------------------

discount = product_price * .08(discount_value) ; get Error => decimal * Floating value 
=> to solve import ExpressionWrapper & use out_set (constructor)

---------------------------------------------
from django.db.models import ExpressionWrapper , F , Value , Func , DecimalField


# Create your views here.
def productAll(request):
    discounted_price = ExpressionWrapper(F('unit_price')*.08, output_field=DecimalField())
    products = Product.objects.annotate(
        discounted_price = discounted_price
    )
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------Annotate(()------------------------------------------------------------------------
In Django, the annotate() method is used to perform an aggregate operation (like counting, summing, averaging, etc.) on a set of records within a queryset.

It allows you to include aggregated values based on related models or computed expressions as part of the query result. The aggregated values are added to each object in the queryset, making them accessible just like any other field.

For example, let's say you have a queryset of Products and you want to know how many products are in each collection. You can use annotate() along with the Count() function to achieve this:

python
Copy code
from django.db.models import Count

products = Products.objects.annotate(num_products_in_collection=Count('collections'))
In this example, num_products_in_collection is a virtual field that is added to each Product object in the queryset. It will contain the count of how many times each product appears in a collection.

Here's a brief breakdown:

Products.objects: This gets a queryset of all products.
.annotate(num_products_in_collection=Count('collections')): This adds a virtual field named num_products_in_collection to each Product object. The value of this field will be the count of how many times the product appears in a collection. Count('collections') is an aggregation function that counts the related collections.
You can use annotate() with various other aggregation functions like Sum, Avg, Max, Min, etc., depending on what kind of information you want to retrieve from your queryset.



Sum:
Let's say you have a model called OrderItem with a field quantity representing the quantity of items in each order. You want to calculate the total quantity for all orders.

python
Copy code
from django.db.models import Sum

total_quantity = OrderItem.objects.aggregate(total_quantity=Sum('quantity'))
In this example, total_quantity will be a dictionary containing the total quantity as the value for the key 'total_quantity'.

Avg:
If you want to calculate the average of a field, you can use the Avg function. For example, let's say you want to find the average price of products:

python
Copy code
from django.db.models import Avg

average_price = Product.objects.aggregate(average_price=Avg('unit_price'))
In this case, average_price will be a dictionary with the average price as the value for the key 'average_price'.

Keep in mind that these examples assume you have models named OrderItem and Product, and they have fields named quantity and unit_price, respectively. You would need to replace these with the actual field names from your models.




