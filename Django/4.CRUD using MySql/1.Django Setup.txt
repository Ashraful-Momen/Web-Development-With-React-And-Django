1. install python in PC and setup environment variable.... >>> python --verison
2. install pip >> pip --version . >>> pip --list

-------------------------install Django Project--------------------------------------
3.>>> pip install django

------------------------------fix pip package install error------------------------
1.>>> goto cmd with admin >>> run command >>> pip install package name...
2.>>> pip install django --user.
3.>>> goto user>>>admin>>>pyvenv >>> false convert to 'True'. and save the file . then run the command again ...

4. >>> django-admin  . if getting error then uninstall the python version and install new version then run agan command.
---------------------------------install django project----------------------------------------------------------------------------

>>> django-admin stratproject My-First-Project [create new Project]

>>> cd My-First-Project. 

>>>python manage.py runserver [run project on server...]

----------------------------------run the project in different port ---------------------------
>>>python manage.py runserver 7000<-- 'port number'

-----------------------------------install django package extension for vs-code: or install according to need----------------------

django extension for VS-Code ....

1. Django
2. Django-inteligence
3. Copy-Django-model field
4. Django-Snippet
5. Sourcy
6. and Python also....

---------------------------------------------------------------------------------------------
Django Project => is a combination of multiple application=> registration, comments, login, blog, .... every task done by
                different application. 

--------------------------------------Create Apps inside Django Project-------------------------------------------------------
*** there are lot's off app in one Django project....

>>> python manage.py startapp First_App [Create Apps inside the project.]

*** connect App to the Django project ... 
>>> goto main project file >>> setting.py => Install_App=['write_down_appName'].


---------------------------------------Laravel vs Djanog-------------------------------------------------------------------------------
MVT vs MVC.

browser search bar => www.abc.com/abc => urls.py[route file] -> views.py[ controller] -> template ->[views]

model [model -> table (Laravel and Django Same here...)]


------------------------------------------view module import----------------------------------------------------------------------
=> IN Django, every App has view.py files . we have to import a module. and that is 


=> from django.http import HttpResposne

=> goto ->first_app => views.py =>

            def index(request):{
                return HttpResposne("Hello Wold!")
            }

=> then goto main project file => urls.py => from first_app import views.py 

=> urlspattern=[
   example=> path('urlpatter/route',views.index => fileName.functionName,name='index' <- route name)

   path('index/',views.index, name='index'),
   path('home/',views.index,name='home'), # =>website.com/index or website.com/home =>then also run index() form views.
   path('', views.index, name='index') , #=> by default it run the index() form views.py
]
----------------------------------------------------------------------------------------------------------------------
---------------------------------------------------views.py----------------------------------------------------------------------------
from django.shortcuts import render
from django.http import HttpResponse


def home(requst):
    return HttpResponse('<h1>Home Page</h1> <a href="/contact">Contact Page</a> <a href="/about">About Page</a>')

def about(requst):
    return HttpResponse('<h1>About Page</h1> <a href="/contact">Contact Page</a> <a href="/">Home Page</a>')

def contact(requst):
    return HttpResponse('<h1>Contact Page</h1> <a href="/">Home Page</a> <a href="/about">About Page</a>')
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------urls.py------------------------------------------------------------------------

from django.contrib import admin
from django.urls import path
from first_app import views

urlpatterns = [
    path('admin/', admin.site.urls),
    
    #custom routes:------------------------------
   
    path('home/',views.home,name='home'),
    path('',views.home,name='home'),
    path('contact/',views.contact,name='contact'),
    path('about/',views.about,name='about'),
]

----------------------------------------------------------------------------------------------------------------------


---------------------------------------for url mapping from indivisual App(no need to use extra import : django.conf.urls import url)-------------------------------------------------------------------------------
=> URL Mapping : mainWebsite.com/App_name/views_urlName


create a urls.py file in Apps  folder then => from django.conf.urls import url(***error don't use it)
                                           => from django.urls import path 
                                           => from first_app import views 
=>goto app folder => create urls.py =>

urls.py=> 
        {write controller/views functions }

        --------------------------------------------------------------------------------------

goto => Main Project Folder => urls.py
------------------------------
urls.py => from django.conf.urls import include (*** no need to use it)
        => from django.urls import path , include

        urlspattern=[
            path('app_name/', include('app_name.fileName')),
            path('first_app/',include('first_app.urls')),
        ]
 
----------------------------------------------------------------------------------------------------------------------
------------------------------------------MainProject : urls.py----------------------------------------------------------------------------
from django.contrib import admin
from django.urls import path, include
from first_app import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index,name='index'),
    path('first_app/', include('first_app.urls')),
]

----------------------------------------------------------------------------------------------------------------------
-------------------------------------------first_app: urls.py---------------------------------------------------------------------------
from django.urls import path
from first_app import views 

urlpatterns = [
    path('', views.index, name='index'),
    path('home/', views.home, name='home'),
    path('contact/', views.contact, name='contact'),
]

----------------------------------------------------------------------------------------------------------------------
-------------------------------------------first_app: views.py---------------------------------------------------------------------------
from django.shortcuts import render
from django.http import HttpResponse


def index(requst):
    return HttpResponse('<h1>Home with Index function Page</h1> ')

def home(requst):
    return HttpResponse('<h1>Home with HOme function Page</h1> ')

def contact(requst):
    return HttpResponse('<h1>Home with contact function Page</h1> ')

--------------------------------------------end urls mapping...--------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
-------------------------------------------Template---------------------------------------------------------------------------
**** firstly include the template folder path to the main project setting TEMPLATES=[add the path].
--------------------------------------------

import os

print(__file__) # print the file name. with full path ....  alternative => os.path.abspath(__file__)
print(Path(__file__)) # print the fileName with full path... 

print(Path(__file__).resolve().parent.parent) # return full path but .resolve().parent = cd ../ 
alternative => os.path.dir(os.path.dir()) = cd../../

print(os.path.join(BASE_DIR,'template')) # full path + /template
template_path = BASE_DIR / 'template'

print(template_path) #full path + /template


****------------------------get the full path of template folder then add , Template={'DIRS': [TEMPLATES_DIR,],}--------------------

-----------------------------goto the view file => first_app=> views.py-------------------------------------


from django.shortcuts import render
from django.http import HttpResponse



def index(request):
    dictionary ={"name":"shuvo",}
    return render(request,'first_app/index.html',context=dictionary) 

          explanations => render(request,'apname/index.html,context=dictionary) => here index.html comes from => template/first_app/index.html , and dictionary{value } print in the index.html file with {{dictionary_varibale}}

=> goto the index.html file =>   <p>this varable value comes from dictionary first_app/views.py => {{name}}</p>
------------------------------------------MainProject:: setting.py----------------------------------------------------------------------------

"""
Django settings for My_First_Project project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# print(Path(__file__).resolve().parent.parent)
# print(os.path.join(BASE_DIR,'template'))

#Custom file path add for template: 

TEMPLATES_DIR = BASE_DIR / 'template'

# print(TEMPLATES_DIR)



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ay7mc7hfvw1w6nq8q^ybksuf#m&j80jvj=pxfuz*%d)0^i3xju'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'first_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'My_First_Project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'My_First_Project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

----------------------------------------------------------------------------------------------------------------------
---------------------------------------------------MainProject:: urls.py-------------------------------------------------------------------
from django.contrib import admin
from django.urls import path, include
from first_app import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index,name='index'),
    path('first_app/', include('first_app.urls')),
]

--------------------------------------------------first_app:: urls.py--------------------------------------------------------------------
from django.urls import path
from first_app import views 

urlpatterns = [
    path('', views.index, name='index'),
   
]
--------------------------------------------------first_app:: views.py--------------------------------------------------------------------
from django.shortcuts import render
from django.http import HttpResponse



def index(request):
    dictionary ={"name":"shuvo",}
    return render(request,'first_app/index.html',context=dictionary)
--------------------------------------------------end Template--------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
--------------------------------------static file(adding): img, css, js--------------------------------------------------------------------------------
create a static folder in MainProject=>
---------------------------------------

=>MainProject::setting.py =>
-----------------------------

STATICS_DIR = BASE_DIR / 'static'


STATIC_URL = 'static/'

STATICFILES_DIRS=[
    STATICS_DIR,
]

-----------------------goto index.html : where add the img---------------------------

<!DOCTYPE html>
{% load static %}  <--for adding img or static file-->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>This is the Home Page</title>
</head>
<body>
    <h1>I'am form home page index.html</h1>
    <p>this varable value comes from dictionary first_app/views.py => {{name}}</p>
    <img src="{% static 'img/Logo.png' %}" >
    <br>
    <!-- <img src="static/img/Logo.png" > -->
    <br/>
    
</body>
</html>


check that img is loading or not=> http://127.0.0.1:8000/static/img/Logo.png

---------------------------------end static file-------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
-------------------------------------------****Django Model****---------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
every indivisual apps have model.py for database => first_app::model.py => 
------------------------------------first_app::model.py---------------------------------------
from django.db import models

# Create your models here.

class Musician(models.Model):
    # id=models.AutoField(primary_key=True) #this line django take autometically
    first_name = models.CharField(max_length=50) #(max_length=50,null=Ture or blank=True) # this field can blank/null :True ...
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=50)

     #show the variable :
    def __str__(self):
        return self.first_name+" "+self.last_name

class Album(models.Model):
    # id=models.AutoField(primary_key=True) #this line django take autometically
    artist = models.ForeignKey('Musician',  on_delete=models.CASCADE) #ForeignKey add
    name = models.CharField(max_length=50)
    release_date = models.DateField()
    num_star = models.IntegerField()

-----------------------------------------command for model: after change model then run command--------------------------------
>>> python manage.py migrate
>>> python manage.py makemigrations first_app <-( App Name)
>>> python manage.py migrate
----------------------------------------------------------------------------------------------------------------------
----------------------------------------model object access:------------------------------------------------------------------------------
>>>python manage.py shell

then shell will be executed

>>>from appName.models import tableName [example]
>>> from first_app.models import Musician
>>> print(Musician.object.all()) .<-[print/show Musician table data]

send data to table 
>>> obj = tableName(filedName='value',filedName='value',...) [example]
>>> obj = Musician(first_name='Md.Ashraful', last_name='shuvo')
>>> obj.save()

show data from table 

>>>print(Musician.objects.all())

-----------------------------
>>> python manage.py migrate
>>> python manage.py makemigrations first_app <-( App Name)
>>> python manage.py migrate
--------------------------
>>> from first_app.models import Musician
>>> print(Musician.objects.all())
<QuerySet [<Musician: Ashraful Momen>, <Musician: shuvo Momen>]>
>>> 


----------------------------------------------------------------------------------------------------------------------
------------------------------------------------model:Admin site----------------------------------------------------------------------
-----------------------------------------------admin superuser command-----------------------------------------------------------------------
firstly register those table /model in =>first_app::admin.py . then =>
---------------------------------=>first_app::admin.py---------------
from django.contrib import admin
from first_app.models import Musician,Album

# Register your models here.

admin.site.register(Musician)
admin.site.register(Album)
------------------------------------------------

>>> python manage.py createsuperuser [complete ->userName, passWord]

>>>then goto 127.0.0.1:8000/admin . LogIN with userName and passWord 


----------------------------------------------------------------------------------------------------------------------
--------------------------------------------Models (More Examples: rating optoins)--------------------------------------------------------------------------
-------------------------------------------first_app::models.py---------------------------------------------------------------------------
from django.db import models

# Create your models here.

class Musician(models.Model):
    # id=models.AutoField(primary_key=True) #this line django take autometically
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=50)

    #show the variable :
    def __str__(self):
        return self.first_name+" "+self.last_name

class Album(models.Model):
    # id=models.AutoField(primary_key=True) #this line django take autometically
    artist = models.ForeignKey('Musician',on_delete=models.CASCADE) #ForeignKey add
    name = models.CharField(max_length=50)
    release_date = models.DateField()

    #rating opetions:
    rating=(
        (1,"Bad"),
        (2,"Not Bad"),
        (3,"Good"),
        (4,"Very Good"),
        (5,"Awesome"),
    )
    num_star = models.IntegerField(choices=rating) #add rating option here

     #show the variable :
    def __str__(self):
        return self.name+" ,Rating:  "+str(self.num_star)
-----------------------------
>>> python manage.py makemigrations first_app 
>>> python manage.py migrate
--------------------------
----------------------------------------------------------------------------------------------------------------------
---------------------------------------Model data to show template(MVT)-------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
{{use print variable }}
{% use->if/else,forLoop,or coditionals %} 

----------------------------------------first_app::views.py------------------------------------------------------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album



def index(request):
    # SELECT * FROM Musician ORDER BY first_name #raw MySQL query

    musician_list = Musician.objects.order_by('first_name') #ORM
    dictionary ={"Musician_List":"All Musician's","musician":musician_list}
    return render(request,'first_app/index.html',context=dictionary)


----------------------------------------------------------------------------------------------------------------------
-----------------------------------------template>>first_app::index.html-----------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{Musician_List}}</title>
    <link rel="stylesheet" href="{% static 'css/color.css' %}" >
</head>
<body>
    <h1 align="center">{{Musician_List}}</h1>
        <table align="center" style="border:1px solid black; border-radius:10px;">
            <thead>
                <tr>
                    <th scope="col">First Name</th>
                    <th scope="col">Last Name</th>
                    <th scope="col">Instrument</th>
                </tr>
            </thead>
            <tbody>
                {% for row in musician %}

                <tr >
                    <td>{{row.first_name}}</td>
                    <td>{{row.last_name}}</td>
                    <td>{{row.instrument}}</td>
                </tr>
                {% endfor %}
                {% comment %} <tr class="">
                    <td scope="row">R1C1</td>
                    <td>R1C2</td>
                    <td>R1C3</td>
                </tr> {% endcomment %}
               
            </tbody>
        </table>
    
    
    
</body>
</html>
------------------------------------------End Model----------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
------------------------------------------Start=> Django: Form------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
>>> goto folder >> template >>> first_app ::: create file => form.html 
----------------------------------------------------------------------
<!doctype html>
<html lang="en">
{% load static %}
<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
   <div class="container">
   <div class="row">
    <div class="col-md-12">
        <h1 class="text-center">Form</h1>
        <hr>
        <form action="" method="" enctype="multipart/form-data">
            
            <div class="m-2 p-2">
                <label for="">Name:</label>
                <input type="text" name="" value="" placeholder="Type Your Name" class="form-control btn btn-outline-warning" >
            </div>
            
            <input type="submit" class="form-control btn btn-success">
    
        </form>
    </div>
   </div>

   </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
----------------------------------------------------------------------

>>>first_app::views.py =>
-----------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album



def index(request):
    # SELECT * FROM Musician ORDER BY first_name #raw MySQL query
    musician_list = Musician.objects.order_by('first_name') #ORM
    dictionary ={"Musician_List":"All Musician's","musician":musician_list}
    return render(request,'first_app/index.html',context=dictionary)

def form(request):
    dictionary={}
    return render(request, 'first_app/form.html',context=dictionary)
-----------------------------

>>>first_app::urls.py =>
-----------------------------
from django.urls import path
from first_app import views 

urlpatterns = [
    path('', views.index, name='index'),
    path('form/',views.form,name='form'),
   
]
-----------------------------

-------------------------------------------Model:part2 => django default form features---------------------------------------------------------------------------

------------------------------------------create file-> first_app::form.py----------------------------------------------------------------------------
first_app::form.py =>
--------------------
from django import forms

class user_form(forms.Form):

    # <div class="m-2 p-2">
    #             <label for="">Name:</label>
    #             <input type="text" name="" value="" placeholder="Type Your Name" class="form-control btn btn-outline-warning" >
    # </div>
    user_name = forms.CharField()



    # <div class="m-2 p-2">
    #             <label for="">Email:</label>
    #             <input type="email" name="" value="" placeholder="Type Your Email" class="form-control btn btn-outline-warning" >
    # </div>
    user_email = forms.EmailField()
-------------------------------------
first_app::views.py =>
-------------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms

def index(request):
    # SELECT * FROM Musician ORDER BY first_name #raw MySQL query
    musician_list = Musician.objects.order_by('first_name') #ORM
    dictionary ={"Musician_List":"All Musician's","musician":musician_list}
    return render(request,'first_app/index.html',context=dictionary)

def form(request):
    new_form = forms.user_form()
    dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}
    return render(request, 'first_app/form.html',context=dictionary)
-------------------------------------
first_app::urls.py =>
-------------------------------------
from django.urls import path
from first_app import views 

urlpatterns = [
    path('', views.index, name='index'),
    path('form/',views.form,name='form'),
   
]
-------------------------------------
template>>>first_app:::form.html=>
-------------------------------------
<!doctype html>
<html lang="en">
{% load static %}
<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
   <div class="container">
   <div class="row">
    <div class="col-md-12">
        <h1 class="text-center">Form</h1>
        <hr>
        <form action="" method="" enctype="multipart/form-data " class="bg-danger" >
            
            <div class="m-2 p-2">
                <label for="">Name:</label>
                <input type="text" name="" value="" placeholder="Type Your Name" class="form-control btn btn-outline-warning" >
            </div>
            <div class="m-2 p-2">
                <label for="">Email:</label>
                <input type="email" name="" value="" placeholder="Type Your Email" class="form-control btn btn-outline-warning" >
            </div>
            
            <div class="d-flex justify-content-center">
                <input type="submit" class=" btn btn-dark " >
            </div>
                
            
    
        </form>
        <br>
        <hr>
        
        <h1>{{heading1}}</h1>
        <form action="" method="">
            {{test_form}}

        </form>
    </div>
   </div>

   </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>

---------------------------------------------------------------------------------------------------------------------
-------------------------------------------Django: form part2---------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
Django official link form details=> https://docs.djangoproject.com/en/4.2/ref/forms/fields/
----------------------------------------------------------------------------------------------------------------------
first_app:: forms.py=>  user_name = forms.CharField(required=True, label="User Name:" , initial="Ashraful" )
----------------------------
from django import forms

class user_form(forms.Form):

    # <div class="m-2 p-2">
    #             <label for="">Name:</label>
    #             <input type="text" name="" value="" placeholder="Type Your Name" class="form-control btn btn-outline-warning" >
    # </div>
    user_name = forms.CharField(required=True, label="User Name:" , initial="Ashraful" )



    # <div class="m-2 p-2">
    #             <label for="">Email:</label>
    #             <input type="email" name="" value="" placeholder="Type Your Email" class="form-control btn btn-outline-warning" >
    # </div>
    user_email = forms.EmailField()
----------------------------------------------------------------------------------------------------------------------
---------------------------------------Django: form part3-------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
=> How to write html form attributes with django form class =>  user_name = forms.CharField(required=True, label="User Name:"  ,widget=forms.TextInput(attrs={'placeholder':"Enter Your Name:"}))
------------------------------------------------------------------
first_app::forms.py=>
-------------------------
from django import forms

class user_form(forms.Form):

    # <div class="m-2 p-2">
    #             <label for="">Name:</label>
    #             <input type="text" name="" value="" placeholder="Type Your Name" class="form-control btn btn-outline-warning" >
    # </div>
    user_name = forms.CharField(required=True, label="User Name:", widget=forms.TextInput(attrs={'placeholder':"Enter Your Name:",'style':'color:red'}))



    # <div class="m-2 p-2">
    #             <label for="">Email:</label>
    #             <input type="email" name="" value="" placeholder="Type Your Email" class="form-control btn btn-outline-warning" >
    # </div>
    user_email = forms.EmailField(label="User Email:", widget=forms.TextInput(attrs={'placeholder':"Enter Your Email:",'style':'color:green'}))

    user_dob = forms.DateField(label='Select Your BirthDate:', widget=forms.TextInput(attrs={'type':'date'}))
------------------------------------------
template::first_app::forms.py=>
------------------------------------------
<!doctype html>
<html lang="en">
{% load static %}
<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
   <div class="container">
   <div class="row">
    <div class="col-md-12">
        <h1 class="text-center">Form</h1>
        <hr>
        <form action="" method="" enctype="multipart/form-data " class="bg-danger" >
            
            <div class="m-2 p-2">
                <label for="">Name:</label>
                <input type="text" name="" value="" placeholder="Type Your Name" class="form-control btn btn-outline-warning" >
            </div>
            <div class="m-2 p-2">
                <label for="">Email:</label>
                <input type="email" name="" value="" placeholder="Type Your Email" class="form-control btn btn-outline-warning" >
            </div>
            
            <div class="d-flex justify-content-center">
                <input type="submit" class=" btn btn-dark " >
            </div>
                
            
    
        </form>
        <br>
        <hr>

        <h1>{{heading1}}</h1>
        <form action="" method="">
            {{test_form.as_p}} <!-- .as_p show all form field as paragraph -->

        </form>
    </div>
   </div>

   </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
------------------------------------------
----------------------------------------------------------------------------------------------------------------------
--------------------------------------------Form Submission--------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
first_app:: forms.py=>
----------------------
from django import forms

class user_form(forms.Form):

    user_name = forms.CharField(required=True, label="User Name:", widget=forms.TextInput(attrs={'placeholder':"Enter Your Name:",'style':'color:red'}))

    user_email = forms.EmailField(label="User Email:", widget=forms.TextInput(attrs={'placeholder':"Enter Your Email:",'style':'color:green'}))

    user_dob = forms.DateField(label='Select Your BirthDate:', widget=forms.TextInput(attrs={'type':'date'}))
----------------------

first_app::views.py=>
----------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms

def index(request):
    # SELECT * FROM Musician ORDER BY first_name #raw MySQL query
    musician_list = Musician.objects.order_by('first_name') #ORM
    dictionary ={"Musician_List":"All Musician's","musician":musician_list}
    return render(request,'first_app/index.html',context=dictionary)

def form(request):
    new_form = forms.user_form() #new_form is a object of user_form(class). and pass all class property(input field) into html template.
    dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

    #if form submitted then update the dictionary value :

    if request.method == 'POST':
        new_form = forms.user_form(request.POST)

        if new_form.is_valid():
            user_name = new_form.cleaned_data['user_name'] #user_name,user_email,user_dob => is the variable from user_form() in forms.py file.
            user_email = new_form.cleaned_data['user_email']
            user_dob = new_form.cleaned_data['user_dob']

            dictionary.update({'user_name':user_name})
            dictionary.update({'user_email':user_email})
            dictionary.update({'user_dob':user_dob})
            dictionary.update({'form_submit':"Yes"})



    return render(request, 'first_app/form.html',context=dictionary)
------------------------------------
template::first_app::form.html=>
----------------------------------
<!doctype html>
<html lang="en">
{% load static %}
<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
   <div class="container">
   <div class="row">
    <div class="col-md-12">
        <h1>{{heading1}}</h1>
        <form action="" method="POST">
            {{test_form.as_p}} <!-- .as_p show all form field as paragraph -->
            {% csrf_token %}
            <div class="d-flex justify-content-center">
                <input type="submit" class=" btn btn-dark " >
            </div>
        </form>
        <hr>
        {% if form_submit %}
            <p>{{user_name}}</p>
            <p>{{user_email}}</p>
            <p>{{user_dob}}</p>
        {% endif %}

    </div>
   </div>

   </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
---------------------------------------------End Form Submission-------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
---------------------------------------------Some input field -------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
first_app:: forms.py=>
-----------------------------
from django import forms

class user_form(forms.Form):

    # field = forms.BooleanField(required=False) #CheckBox : return value as true / false
    # field = forms.CharField(min_length=1,max_length=10) #String Limit : string size 1-10
    #  
    # rating=(
    #     ("Bad",1),
    #     ("Not Bad",2),
    #     ("Good",3),
    #     ("Very Good",4),
    #     ("Awesome",5),
    # )
    # field = forms.ChoiceField(choices=rating) # select - option , as like html.
    # choice = (('A','A'),('B','B'),('C','C'))
    # field= forms.ChoiceField(choices=choice, widget=forms.RadioSelect) #can select 1 item at a time.
    choice = (('A','A'),('B','B'),('C','C'))
    field= forms.MultipleChoiceField(choices=choice, widget=forms.CheckboxSelectMultiple) #can select Multiple item and return list[items].
    

-----------------------------
first_app:: views.py=>
-----------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms

def index(request):
    # SELECT * FROM Musician ORDER BY first_name #raw MySQL query
    musician_list = Musician.objects.order_by('first_name') #ORM
    dictionary ={"Musician_List":"All Musician's","musician":musician_list}
    return render(request,'first_app/index.html',context=dictionary)

def form(request):
    new_form = forms.user_form()
    dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

    #if form submitted then update the dictionary value :

    if request.method == 'POST':
        new_form = forms.user_form(request.POST)

        if new_form.is_valid():
            field = new_form.cleaned_data['field'] #field => is the variable from user_form() in forms.py file.
         

            dictionary.update({'field': field})
            
            dictionary.update({'form_submit':"Yes"})



    return render(request, 'first_app/form.html',context=dictionary)
-----------------------------
template::first_app:: form.html=>
-----------------------------
<!doctype html>
<html lang="en">
{% load static %}
<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
   <div class="container">
   <div class="row">
    <div class="col-md-12">
        <h1>{{heading1}}</h1>
        <form action="" method="POST">
            {{test_form.as_p}} <!-- .as_p show all form field as paragraph -->
            {% csrf_token %}
            <div class="d-flex justify-content-center">
                <input type="submit" class=" btn btn-dark " >
            </div>
        </form>
        <hr>
        {% if form_submit %}
            <p>{{field}}</p>
           
        {% endif %}

    </div>
   </div>

   </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
-----------------------------
----------------------------------------------------------------------------------------------------------------------
------------------------------------------------Form Validation----------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
first_app::forms.py=>
----------------------------------------
from django import forms
from django.core import validators

#functino for custom validators:
def even_number(value):
   if value%2==1:
      raise forms.ValidationError("Number should be Even!")
class user_form(forms.Form):

   #django default validations:
   name = forms.CharField(validators=[validators.MaxLengthValidator(10),validators.MinLengthValidator(3)])
   number = forms.IntegerField(validators=[validators.MaxValueValidator(10),validators.MinValueValidator(1)])

   #custom validations:

   even_number= forms.IntegerField(validators=[even_number])

   #email validators:

   user_email = forms.EmailField()
   user_vmail = forms.EmailField()

   def clean(self):
      all_cleaned_data = super().clean() #this super ().clean() -> store user_email, user_vmail , other class variable...

      user_email=all_cleaned_data['user_email']
      user_vmail=all_cleaned_data['user_vmail']

      if user_email != user_vmail :
         raise forms.ValidationError("Email don't match!")
----------------------------------------
first_app::views.py=>
----------------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms

def index(request):
    # SELECT * FROM Musician ORDER BY first_name #raw MySQL query
    musician_list = Musician.objects.order_by('first_name') #ORM
    dictionary ={"Musician_List":"All Musician's","musician":musician_list}
    return render(request,'first_app/index.html',context=dictionary)

def form(request):
    new_form = forms.user_form()
    dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

    #if form submitted then update the dictionary value :

    if request.method == 'POST':
        new_form = forms.user_form(request.POST)
        dictionary.update({'test_form':new_form,})

        if new_form.is_valid():
            
            # field = new_form.cleaned_data['field'] #field => is the variable from user_form() in forms.py file.
            field = new_form.cleaned_data['name'] 
            number = new_form.cleaned_data['number'] 
            even_number = new_form.cleaned_data['even_number']


            user_email = new_form.cleaned_data['user_email']
            user_vmail = new_form.cleaned_data['user_vmail']
         

            dictionary.update({'field': field})
            dictionary.update({'number': number})
            dictionary.update({'even_number': even_number})
            dictionary.update({'user_email': user_email})
            dictionary.update({'user_vmail': user_vmail})
            dictionary.update({'email': "Email Match!"})
            
            
            
            dictionary.update({'form_submit':"Yes"})



    return render(request, 'first_app/form.html',context=dictionary)
----------------------------------------
template:::first_app:::form.html=>
----------------------------------------
<!doctype html>
<html lang="en">
{% load static %}
<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
   <div class="container">
   <div class="row">
    <div class="col-md-12">
        <h1>{{heading1}}</h1>
        <form action="" method="POST">
            {{test_form.as_p}} <!-- .as_p show all form field as paragraph -->
            {% csrf_token %}
            <div class="d-flex justify-content-center">
                <input type="submit" class=" btn btn-dark " >
            </div>
        </form>
        <hr>
        {% if form_submit %}
            <p>{{field}}</p>
            <p>{{number}}</p>
            <p>{{even_number}}</p>
            <p>{{email}}</p>
           
        {% endif %}

    </div>
   </div>

   </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
----------------------------------------

----------------------------------------------------------------------------------------------------------------------
------------------------------------------------End Form Validation----------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------Django Model Forms-----------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
first_app:: models.py=>
---------------------------
from django.db import models

# Create your models here.

class Musician(models.Model):
    # id=models.AutoField(primary_key=True) #this line django take autometically
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=50)

    #show the variable :
    def __str__(self):
        return self.first_name+" "+self.last_name

class Album(models.Model):
    # id=models.AutoField(primary_key=True) #this line django take autometically
    artist = models.ForeignKey('Musician',on_delete=models.CASCADE) #ForeignKey add
    name = models.CharField(max_length=50)
    release_date = models.DateField()

    #rating opetions:
    rating=(
        (1,"Bad"),
        (2,"Not Bad"),
        (3,"Good"),
        (4,"Very Good"),
        (5,"Awesome"),
    )
    num_star = models.IntegerField(choices=rating) #add rating option here

     #show the variable :
    def __str__(self):
        return self.name+" ,Rating:  "+str(self.num_star)



---------------------------
first_app::forms.py=>
---------------------------

from django import forms
from first_app import models

class MusicianForm(forms.ModelForm):
    class Meta:
        model = models.Musician
        fields = "__all__"  # Corrected attribute name
      #   fields = ('first_name','last_name') # if we need some field then use this line.
      #   exclude = ['first_name','last_name'] # if we need without this two fields then use this line.




-----------------------------------
first_app:: views.py=>
-----------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms

def index(request):
    # SELECT * FROM Musician ORDER BY first_name #raw MySQL query
    musician_list = Musician.objects.order_by('first_name') #ORM
    dictionary ={"Musician_List":"All Musician's","musician":musician_list}
    return render(request,'first_app/index.html',context=dictionary)

def form(request):
    new_form = forms.MusicianForm()
    dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

    if request.method == 'POST':
        new_form = forms.MusicianForm(request.POST)
       

        if new_form.is_valid():
            new_form.save(commit=True) # form field save to the DataBase.
            return index(request) #redirect to index(request) <-views.


    return render(request, 'first_app/form.html',context=dictionary)
-----------------------------------
My_First_Project:: template:: form.html=>
-----------------------------------
<!doctype html>
<html lang="en">
{% load static %}
<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
   <div class="container">
   <div class="row">
    <div class="col-md-12">
        <h1>{{heading1}}</h1>
        <form action="" method="POST">
            {{test_form.as_p}} <!-- .as_p show all form field as paragraph -->
            {% csrf_token %}
            <div class="d-flex justify-content-center">
                <input type="submit" class=" btn btn-dark " >
            </div>
        </form>
        <hr>
        

    </div>
   </div>

   </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
-----------------------------------
My_First_Project:: template:: index.html=>
------------------------------------------
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{Musician_List}}</title>
    <link rel="stylesheet" href="{% static 'css/color.css' %}" >
</head>
<body>
    <a href="/first_app/form/">Add Musician</a>



    <h1 align="center">{{Musician_List}}</h1>
        <table align="center" style="border:1px solid black; border-radius:10px;">
            <thead>
                <tr>
                    <th scope="col">First Name</th>
                    <th scope="col">Last Name</th>
                    <th scope="col">Instrument</th>
                </tr>
            </thead>
            <tbody>
                {% for row in musician %}

                <tr >
                    <td>{{row.first_name}}</td>
                    <td>{{row.last_name}}</td>
                    <td>{{row.instrument}}</td>
                </tr>
                {% endfor %}
               
            </tbody>
            
        </table>
    
    
    
</body>
</html>
-----------------------------------



-----------------------------------------------End Django Model Forms-----------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------Dynamic: Header,Footer,Body,title: template inheritence------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
My_First_Project:: urls.py=>
----------------------------------
from django.contrib import admin
from django.urls import path, include
from first_app import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index, name='index'),
    path('first_app/', include(('first_app.urls', 'first_app'), namespace='first_app')), #user namespace for menu navigations.
]

----------------------------------
first_app:: views.py=>
----------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms
from django.utils.formats import date_format
from datetime import datetime

def index(request):
    album = Album.objects.get(pk=2)
    formatted_date = date_format(album.release_date, 'SHORT_DATE_FORMAT')
     # Convert the formatted date string to a datetime object
    formatted_date_datetime = datetime.strptime(formatted_date, '%m/%d/%Y')
    dictionary={'sample_text':'I\'m a sample text.', 'additions':'8','formatted_date': formatted_date_datetime} #Album.objects.get(pk=1)=> in Album models have some data with date and primarykey=pk
    
    return render(request,'first_app/index.html',context=dictionary)

def form(request):
    new_form = forms.MusicianForm()
    dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

    if request.method == 'POST':
        new_form = forms.MusicianForm(request.POST)
       

        if new_form.is_valid():
            new_form.save(commit=True) # form field save to the DataBase.
            return index(request) #redirect to index(request) <-views.


    return render(request, 'first_app/form.html',context=dictionary)

----------------------------------
template::first_app::base.html=>
----------------------------------
<!doctype html>
<html lang="en">

<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
    <div class="container">
        <div class="row">
            <div class="col-12">
                <section> 
                    {% include 'first_app/header.html' %}
                    
                </section>
                <section>
                    {% block body_block %}

                    {% endblock  %}
                
                </section>
                <section> 

                </section>
            </div>
        </div>
    </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
----------------------------------
template:::first_app::headr.html=>
----------------------------------
<nav class="navbar navbar-expand-sm navbar-light bg-light">
    <div class="container">
      <a class="navbar-brand" href="{% url 'first_app:index' %}">Navbar</a>
      <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId"
          aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="collapsibleNavId">
          <ul class="navbar-nav me-auto mt-2 mt-lg-0">
              <li class="nav-item">
                  <a class="nav-link active" href="{% url 'first_app:index' %}">Home </a>
                  <!--  -->
              </li>
              <li class="nav-item">
                  <a class="nav-link" href="{% url 'first_app:form' %}">Form</a>
                  <!--  -->
              </li>
          </ul>
      </div>
</div>
</nav>
----------------------------------
template::first_app::index.html=>
----------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}

{% block body_block%}
<p>I am from Index page!</p>
{% endblock %}
----------------------------------
template::first_app::form.html=>
----------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}

{% block body_block%}
<p>I am from Form page!</p>
{% endblock %}
----------------------------------
----------------------------------------------------------------------------------------------------------------------
------------------------------------------Built In Template Filters: html attributes,date_format----------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
My_First_Project::urls.py=>
---------------------------
from django.contrib import admin
from django.urls import path, include
from first_app import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index, name='index'),
    path('first_app/', include(('first_app.urls', 'first_app'), namespace='first_app')), #user namespace for menu navigations(name of route.).
]
----------------------------------------
first_app::views.py=>
----------------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms
from django.utils.formats import date_format
from datetime import datetime

def index(request):
    album = Album.objects.get(pk=2)
    formatted_date = date_format(album.release_date, 'SHORT_DATE_FORMAT')
     # Convert the formatted date string to a datetime object
    formatted_date_datetime = datetime.strptime(formatted_date, '%m/%d/%Y')
    dictionary={'sample_text':'I\'m a sample text.', 'additions':'8','formatted_date': formatted_date_datetime} #Album.objects.get(pk=1)=> in Album models have some data with date and primarykey=pk
    
    return render(request,'first_app/index.html',context=dictionary)

def form(request):
    new_form = forms.MusicianForm()
    dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

    if request.method == 'POST':
        new_form = forms.MusicianForm(request.POST)
       

        if new_form.is_valid():
            new_form.save(commit=True) # form field save to the DataBase.
            return index(request) #redirect to index(request) <-views.


    return render(request, 'first_app/form.html',context=dictionary)

----------------------------------------
template::first_app::index.html=>
----------------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}

{% block body_block%}
 <h3>{{sample_text|upper}}</h3> <!--this is the template filter (html attributes) -->
 <h3>{{sample_text|lower}}</h3> <!--this is the template filter (html attributes) -->
 <h3>{{additions|add:"7"}}</h3> <!--add numbers -->
 <h3>{{sample_text|cut:'t' |upper}}</h3> <!--cut:'t' from the smaple_text and upper  -->
 <h3>{{ formatted_date|date:"D d M Y" }}</h3> <!--use the date formate  -->
{% endblock %}
----------------------------------------
----------------------------------------------------------------------------------------------------------------------
-----------------------------------------template filter: Customs filter template.-----------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
firstly create a folder inside the app => templatetag => create 2 files => 1.__init__.py and my_filters.py =>
----------------------------------------------------
My_First_Project::urls.py=>
---------------------------
from django.contrib import admin
from django.urls import path, include
from first_app import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index, name='index'),
    path('first_app/', include(('first_app.urls', 'first_app'), namespace='first_app')), #user namespace for menu navigations(name of route.).
]
----------------------------------------
first_app::tempalatetags=>
-----------------------------
from django import template

register = template.Library()

def my_filter(value,args):
    return value + " This is the custom filter value" + " "+args

register.filter('custom_filter',my_filter) 
---------------------------------------------
first_app::vies.py=>
-------------------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms
from django.utils.formats import date_format
from datetime import datetime

def index(request):
    album = Album.objects.get(pk=2)
    formatted_date = date_format(album.release_date, 'SHORT_DATE_FORMAT')
     # Convert the formatted date string to a datetime object
    formatted_date_datetime = datetime.strptime(formatted_date, '%m/%d/%Y')
    dictionary={'sample_text':'I\'m a sample text.', 'additions':'8','formatted_date': formatted_date_datetime,'custom_filter':"call the custom_filter!"} #Album.objects.get(pk=1)=> in Album models have some data with date and primarykey=pk
    
    return render(request,'first_app/index.html',context=dictionary)

def form(request):
    new_form = forms.MusicianForm()
    dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

    if request.method == 'POST':
        new_form = forms.MusicianForm(request.POST)
       

        if new_form.is_valid():
            new_form.save(commit=True) # form field save to the DataBase.
            return index(request) #redirect to index(request) <-views.


    return render(request, 'first_app/form.html',context=dictionary)
-------------------------------------------
tempalate::first_app::index.html=>
----------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}

{% load my_filters %} <!--load custom filter file_name  -->

{% block body_block%}
 <h3>{{sample_text|upper}}</h3> <!--this is the template filter (html attributes) -->
 <h3>{{sample_text|lower}}</h3> <!--this is the template filter (html attributes) -->
 <h3>{{additions|add:"7"}}</h3> <!--add numbers -->
 <h3>{{sample_text|cut:'t' |upper}}</h3> <!--cut:'t' from the smaple_text and upper  -->
 <h3>{{ formatted_date|date:"D d M Y" }}</h3> <!--use the date formate  -->
 <h3>{{custom_filter|custom_filter:". =>custom filter value as params send "}}</h3>
{% endblock %}
-----------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
-----------------------------------------End Dynamic: Header,Footer,Body,title: template inheritence------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
-----------------------------------------Crud:with MySQL-----------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
-----------------------------------------Connecting MySql Database-----------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
install mysqlclient package: >>> pip install mysqlclient
                             >>> pip list 
----------------------------------------------------------
My_First_Project::setting.py=>
-------------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "django_crud",
        "USER": "root",
        "PASSWORD": "",
        "HOST": "localhost",
        "PORT": "3306",
    }
}
----------------------------------------------------------
migrate DB => >>>python manage.py migrate
              >>>python manage.py makemigrations first_app

add admin  => >>>python createsuperuser
----------------------------------------------------------
first_app::models.py=>
----------------------------------------------------------
from django.db import models

# Create your models here.

class Musician(models.Model):
    # id=models.AutoField(primary_key=True) #this line django take autometically
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=50)

    #show the variable :
    def __str__(self):
        return self.first_name+" "+self.last_name

class Album(models.Model):
    # id=models.AutoField(primary_key=True) #this line django take autometically
    artist = models.ForeignKey('Musician',on_delete=models.CASCADE) #ForeignKey add
    name = models.CharField(max_length=50)
    release_date = models.DateField()

    #rating opetions:
    rating=(
        (1,"Bad"),
        (2,"Not Bad"),
        (3,"Good"),
        (4,"Very Good"),
        (5,"Awesome"),
    )
    num_star = models.IntegerField(choices=rating) #add rating option here


    # #change the database table name: better for no changing the table name ... cz when migrate then auto django create the table name.
    # class Meta:
    #     db_table = 'album'

     #show the variable :
    def __str__(self):
        return self.name+" ,Rating:  "+str(self.num_star)+"date"+str(self.release_date)



----------------------------------------------------------
check urls list in Django apps=>
------------------------------------
>>>python manage.py shell

from django.urls import get_resolver
resolver = get_resolver()
for url in resolver.url_patterns:
    print(url)
----------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
-----------------------------------------Creating Templates and Views-----------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
Add this in main_root project urls.py=> either menu link not working .

My_First_Project::urls.py=> path('first_app/', include(('first_app.urls', 'first_app'), namespace='first_app')),
                            path('app_name/', include(('app_name.urls','app_name'), namespace='app_name'))
----------------------------------------------------------------------------------------------------------------------
first_app::views.py=>
--------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms
from django.utils.formats import date_format
from datetime import datetime


#Read => Crud:------------------------------
def index(request):
    
    dictionary={'title':"Home Page"}
    return render(request,'first_app/index.html',context=dictionary)

def album_list(request):
    dictionary={"title":'Show Album Page'}
    return render(request,'first_app/album_list.html',context=dictionary)

#create => Crud:---------------------------------------

def musician_form(request):
    dictionary={'title':'Add Musician'}
    return render(request,'first_app/musician_form.html',context=dictionary)

def album_form(request):
    dictionary={'title':'Add Album'}
    return render(request,'first_app/album_form.html',context=dictionary)






# def form(request):
#     new_form = forms.MusicianForm()
#     dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

#     if request.method == 'POST':
#         new_form = forms.MusicianForm(request.POST)
       

#         if new_form.is_valid():
#             new_form.save(commit=True) # form field save to the DataBase.
#             return index(request) #redirect to index(request) <-views.


#     return render(request, 'first_app/form.html',context=dictionary)
--------------------------------
first_app::urls.py=>
--------------------------------
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),  # Keep your existing index URL
    path('add_album/',views.album_form, name='album_form'),
    path('add_musician/',views.musician_form, name='musician_form'),
]
--------------------------------
tempalate::first_app::header.html=>
--------------------------------
<nav
  class="navbar navbar-expand-sm navbar-secondary mt-1 shadow p-3 mb-5 bg-body rounded"
>
  <div class="container">
    <!-- <a class="navbar-brand" href="{% url 'first_app:index' %}">Navbar</a> -->
    <button
      class="navbar-toggler d-lg-none"
      type="button"
      data-bs-toggle="collapse"
      data-bs-target="#collapsibleNavId"
      aria-controls="collapsibleNavId"
      aria-expanded="false"
      aria-label="Toggle navigation"
    >
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="collapsibleNavId">
      <ul class="navbar-nav me-auto mt-2 mt-lg-0">
        <li class="nav-item">
          <a class="nav-link active" href="{% url 'first_app:index' %}"
            >Home
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="{% url 'first_app:musician_form' %}">Add Musician</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="{% url 'first_app:album_form' %}">Add Album</a>
          </li>
        
      </ul>
    </div>
  </div>
</nav>
--------------------------------
tempalate::first_app::base.html=>
--------------------------------
<!doctype html>
<html lang="en">

<head>
  <title>
    {%block titile %} 
    {{title}}
    {%endblock  %} 

  </title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
    <div class="container">
        <div class="row">
            <div class="col-12">
                <section> 
                    {% include 'first_app/header.html' %}
                    
                </section>
                <section>
                   <div class="row">
                    <div class="col-md-12 px-5">
                        {% block body_block %}

                        {% endblock  %}
                    </div>
                   </div>
                
                </section>
                <section> 

                </section>
            </div>
        </div>
    </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
--------------------------------
tempalate::first_app::index.html=>
--------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}



{% block body_block%}

<p>I'm from index Page</p>

{% endblock %}
--------------------------------
tempalate::first_app::musician_form.html=>
--------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}

{% block body_block%}

<p>I'm from Fusician Form</p>

{% endblock %}
--------------------------------
tempalate::first_app::album_form.html=>
--------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}

{% block body_block%}

<p>Album Form  Page</p>

{% endblock %}
--------------------------------
tempalate::first_app::album_list.html=>
--------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}

{% block body_block%}

<p>Album list</p>

{% endblock %}
--------------------------------
----------------------------------------------------------------------------------------------------------------------
-------------------------------------------Entry Forms---------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
first_app::form.py=>
-----------------------------
from django import forms
from first_app import models

class MusicianForm(forms.ModelForm):
    class Meta:
        model = models.Musician
        fields = "__all__"  
        
        
        
class AlbumForm(forms.ModelForm):
    release_date = forms.DateField(widget=forms.TextInput(attrs={'type':'date'}))
    class Meta:
        model = models.Album
        fields = "__all__"
        
        
      # Corrected attribute name
      #   fields = ('first_name','last_name') # if we need some field then use this line.
      #   exclude = ['first_name','last_name'] # if we need without this two fields then use this line.



-----------------------------
first_app::views.py=>
-----------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms



#Read => Crud:------------------------------
def index(request):
    musician = Musician.objects.order_by('first_name')
    album = Album.objects.order_by('name')
    
    dictionary={'title':"Home Page","musician_list":musician,'album_list':album}
    return render(request,'first_app/index.html',context=dictionary)

def album_list(request):
    dictionary={"title":'Show Album Page'}
    return render(request,'first_app/album_list.html',context=dictionary)

#create => Crud:---------------------------------------

def musician_form(request):
    form = forms.MusicianForm() #create an object from first_app/forms(MusicianForm class)

    if request.method=="POST":
        form = forms.MusicianForm(request.POST)
            
        if form.is_valid():
           form.save(commit=True)
           return index(request)


    dictionary={'title':'Add Musician','musician_form':form}
    return render(request,'first_app/musician_form.html',context=dictionary)

def album_form(request):
    form = forms.AlbumForm()

    if request.method=="POST":
        form = forms.AlbumForm(request.POST)
        if form.is_valid():
            form.save(commit=True)
            return index(request)
    dictionary={'title':'Add Album','album_form':form}
    return render(request,'first_app/album_form.html',context=dictionary)






# def form(request):
#     new_form = forms.MusicianForm()
#     dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

#     if request.method == 'POST':
#         new_form = forms.MusicianForm(request.POST)
       

#         if new_form.is_valid():
#             new_form.save(commit=True) # form field save to the DataBase.
#             return index(request) #redirect to index(request) <-views.


#     return render(request, 'first_app/form.html',context=dictionary)
--------------------------------------------------------------------------
tempalate::first_app::index.html=>
----------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}



{% block body_block%}

<h3>Musicin List</h3>
<hr>

<ul>
    {% if musician_list %}

    {% for musician in musician_list%}
        <li>
            {{musician.first_name}}
            {{musician.last_name}}
            ->{{musician.instrument}}
        </li>
    {% endfor %}
    {% else %}
    <p class="text-danger"> Musician not found!</p>
    {% endif %}

</ul>

<h3>Album List</h3>
<hr>

<ul>
    {% if album_list %}

    {% for album in album_list%}
        <li>
            {{album.name}}
            {{album.first_name}}
            {{album.num_rating}} 
            
        </li>
    {% endfor %}
    {% else %}
    <p class="text-danger"> Album not found!</p>
    {% endif %}

</ul>

{% endblock %}
----------------------------------
tempalate::first_app::musician_form.html=>
----------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}

{% block body_block%}

<p>Add Musician:Musician Form</p>
<hr>

<form action="" method="POST">
    {{musician_form.as_p}}

    {% csrf_token %}

    <input type="submit" name="submit" value="Add">

</form>



{% endblock %}
----------------------------------
tempalate::first_app::album_form.html=>
----------------------------------

<!doctype html>
{% extends 'first_app/base.html' %}

{% block body_block%}

<p>Album Form  Page</p>

<p>Add Musician:Musician Form</p>
<hr>

<form action="" method="POST">
    {{album_form.as_p}}

    {% csrf_token %}

    <input type="submit" name="submit" value="Add">

</form>


{% endblock %}

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
-------------------------------Dynamic Template Part 1(route bind(pass varibale)+ForeignKey)--------------------------------------------------------------------------
*** primary_key:is a unique key and ForeignKey is join more table . one table to another table data access by ForeignKey.
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
{% url 'first_app:album_list' %} . this line means-> {% url 'app_Name: route_name' %}
----------------------------------
first_app::views.py=>
----------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms



#Read => Crud:------------------------------
def index(request):
    musician = Musician.objects.order_by('first_name')
   
    
    dictionary={'title':"Home Page","musician_list":musician,}
    return render(request,'first_app/index.html',context=dictionary)

def album_list(request,artist_id):
    artist_info=Musician.objects.get(pk=artist_id) #*** this (get) ORM command reterun 1 Row in the table.
    
    dictionary={"title":'Show Album Page', 'artist_info':artist_info}
    return render(request,'first_app/album_list.html',context=dictionary)

#create => Crud:---------------------------------------

def musician_form(request):
    form = forms.MusicianForm() #create an object from first_app/forms(MusicianForm class)

    if request.method=="POST":
        form = forms.MusicianForm(request.POST)
            
        if form.is_valid():
           form.save(commit=True)
           return index(request)


    dictionary={'title':'Add Musician','musician_form':form}
    return render(request,'first_app/musician_form.html',context=dictionary)

def album_form(request):
    form = forms.AlbumForm()

    if request.method=="POST":
        form = forms.AlbumForm(request.POST)
        if form.is_valid():
            form.save(commit=True)
            return index(request)
    dictionary={'title':'Add Album','album_form':form}
    return render(request,'first_app/album_form.html',context=dictionary)






# def form(request):
#     new_form = forms.MusicianForm()
#     dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

#     if request.method == 'POST':
#         new_form = forms.MusicianForm(request.POST)
       

#         if new_form.is_valid():
#             new_form.save(commit=True) # form field save to the DataBase.
#             return index(request) #redirect to index(request) <-views.


#     return render(request, 'first_app/form.html',context=dictionary)
----------------------------------
----------------------------------
first_app::urls.py=>
----------------------------------
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),  # Keep your existing index URL
    path('add_album/',views.album_form, name='album_form'),
    path('add_musician/',views.musician_form, name='musician_form'),
    path('album_list/<int:artist_id>/',views.album_list,name='album_list'),
]

----------------------------------
tempalate::first_app::index.html=>
----------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}



{% block body_block%}

<h3>Musicin List</h3>
<hr>

<ul>
    {% if musician_list %}

    {% for musician in musician_list%}
    <!-- <a href="/first_app/album_list/{{ musician.id }}/">
        <li>
            {{ musician.first_name }}
        </li>
    </a> -->
    
       <!-- <a href="{% url 'first_app:album_list/' artist_id=musician.id % }" > *** use the correct route name()--> 
        <a href="{% url 'first_app:album_list' artist_id=musician.id %}">

        <li>
           
            {{musician.first_name}}
        </li>
       </a>
    {% endfor %}
    {% else %}
    <p class="text-danger"> Musician not found!</p>
    {% endif %}

</ul>


{% endblock %}
----------------------------------
----------------------------------
tempalate::first_app::album_list.html=>
----------------------------------
<!doctype html>
{% extends 'first_app/base.html' %}

{% block body_block%}

<p>Album list</p>
<h5>Artist info:</h5>

<p>{{artist_info}}</p>
<p>{{artist_info.first_name}}</p>
<p>{{artist_info.last_name}}</p>
<p>{{artist_info.instrument}}</p>

{% endblock %}
----------------------------------
----------------------------------

----------------------------------------------------------------------------------------------------------------------
-----------------------------------------Dynamic Template Part 2::(Aggregation , date showing )-----------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
artist_info=Musician.objects.filter(pk=artist_id) # this ORM command return more Row from the table.
----------------------------------------------------------------------------------------------------------------------
album_info = Album.objects.filter(artist=artist_info) # **** return more Row according to artist_id . Example=> album_info = Album.objects.filter(foreignKeyName=artist_info)
----------------------------------------------------------------------------------------------------------------------
first_app::urls.py->
-----------------------------------
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),  # Keep your existing index URL
    path('add_album/',views.album_form, name='album_form'),
    path('add_musician/',views.musician_form, name='musician_form'),
    path('album_list/<int:artist_id>/',views.album_list,name='album_list'),
]

-----------------------------------
first_app::views.py->
-----------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms
from django.db.models import Avg 



#Read => Crud:------------------------------
def index(request):
    musician = Musician.objects.order_by('first_name')
   
    
    dictionary={'title':"Home Page","musician_list":musician,}
    return render(request,'first_app/index.html',context=dictionary)


def album_list(request, artist_id):
    artist_info = Musician.objects.get(pk=artist_id) # return one Row according to artist_id
    
    album_info = Album.objects.filter(artist=artist_info).order_by('name','release_date') # **** return more Row according to artist_id . Example=> album_info = Album.objects.filter(foreignKeyName=artist_info)

    #average : the model among all data...
    album_rating_av = Album.objects.filter(artist=artist_id).aggregate(Avg('num_star')) # aggregation : is an operaton on DataBase_Table=> (Average, min, max etc)
    
    dictionary = {"title": 'Show Album Page', 'artist_info': artist_info, 'album_info': album_info, 'album_rating_av':album_rating_av}
    return render(request, 'first_app/album_list.html', context=dictionary)


# def album_list(request,artist_id):
    
#     artist_info=Musician.objects.get(pk=artist_id) # return one Row according to artist_id
    
#     album_info = Album.objects.filter(pk=artist_id) # return more Row according to artist_id
    
#     dictionary={"title":'Show Album Page', 'artist_info':artist_info, 'album_info':album_info}
#     return render(request,'first_app/album_list.html',context=dictionary)

#create => Crud:---------------------------------------

def musician_form(request):
    form = forms.MusicianForm() #create an object from first_app/forms(MusicianForm class)

    if request.method=="POST":
        form = forms.MusicianForm(request.POST)
            
        if form.is_valid():
           form.save(commit=True)
           return index(request)


    dictionary={'title':'Add Musician','musician_form':form}
    return render(request,'first_app/musician_form.html',context=dictionary)

def album_form(request):
    form = forms.AlbumForm()

    if request.method=="POST":
        form = forms.AlbumForm(request.POST)
        if form.is_valid():
            form.save(commit=True)
            return index(request)
    dictionary={'title':'Add Album','album_form':form}
    return render(request,'first_app/album_form.html',context=dictionary)






# def form(request):
#     new_form = forms.MusicianForm()
#     dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

#     if request.method == 'POST':
#         new_form = forms.MusicianForm(request.POST)
       

#         if new_form.is_valid():
#             new_form.save(commit=True) # form field save to the DataBase.
#             return index(request) #redirect to index(request) <-views.


#     return render(request, 'first_app/form.html',context=dictionary)
-----------------------------------
tempalate::first_app::album_list=>
-----------------------------------
<!DOCTYPE html>
{% extends 'first_app/base.html' %} {% block body_block%}

<h3>Artist info:</h3>

<p>Name: {{artist_info.first_name}} {{artist_info.last_name}}</p>
<p>instrument:{{artist_info.instrument}}</p>
<p>Average of Album rating: {{album_rating_av}}</p>

<h4>Album info</h4>

<div >
	<table class="table table-bordered">
		<thead>
			<tr>
				<th scope="col">Album Name</th>
				<th scope="col">Release Date</th>
				<th scope="col">Rating</th>
			</tr>
		</thead>
		<!-- ... -->
		<tbody>
			{% for album in album_info %}
			<tr>
				<td scope="row">{{ album.name }}</td>
				<td>{{ album.release_date|date:"M d, Y" }}</td>
				<td>{{ album.num_star }}</td>
			</tr>
			{% endfor %}
		</tbody>
		<!-- ... -->
	</table>
</div>

{% endblock %}

-----------------------------------
-----------------------------------------Django Update+Delete(flash sms+Edit)-----------------------------------------------------------------------------
-----------------------------------
-----------------------------------
first_app::views.py=>
-----------------------------------
from django.shortcuts import render
from django.http import HttpResponse
from first_app.models import Musician, Album
from first_app import forms
from django.db.models import Avg 



#Read => Crud:------------------------------
def index(request):
    musician = Musician.objects.order_by('first_name')
   
    
    dictionary={'title':"Home Page","musician_list":musician,}
    return render(request,'first_app/index.html',context=dictionary)


def album_list(request, artist_id):
    artist_info = Musician.objects.get(pk=artist_id) # return one Row according to artist_id
    
    album_info = Album.objects.filter(artist=artist_info).order_by('name','release_date') # **** return more Row according to artist_id . Example=> album_info = Album.objects.filter(foreignKeyName=artist_info)

    #average : the model among all data...
    album_rating_av = Album.objects.filter(artist=artist_id).aggregate(Avg('num_star')) # aggregation : is an operaton on DataBase_Table=> (Average, min, max etc)
    
    dictionary = {"title": 'Show Album Page', 'artist_info': artist_info, 'album_info': album_info, 'album_rating_av':album_rating_av}
    return render(request, 'first_app/album_list.html', context=dictionary)


# def album_list(request,artist_id):
    
#     artist_info=Musician.objects.get(pk=artist_id) # return one Row according to artist_id
    
#     album_info = Album.objects.filter(pk=artist_id) # return more Row according to artist_id
    
#     dictionary={"title":'Show Album Page', 'artist_info':artist_info, 'album_info':album_info}
#     return render(request,'first_app/album_list.html',context=dictionary)

#create => Crud:---------------------------------------

def musician_form(request):
    form = forms.MusicianForm() #create an object from first_app/forms(MusicianForm class)

    if request.method=="POST":
        form = forms.MusicianForm(request.POST)
            
        if form.is_valid():
           form.save(commit=True)
           return index(request)


    dictionary={'title':'Add Musician','musician_form':form}
    return render(request,'first_app/musician_form.html',context=dictionary)

def album_form(request):
    form = forms.AlbumForm()

    if request.method=="POST":
        form = forms.AlbumForm(request.POST)
        if form.is_valid():
            form.save(commit=True)
            return index(request)
    dictionary={'title':'Add Album','album_form':form}
    return render(request,'first_app/album_form.html',context=dictionary)

#Update: -------------------------------------------------------------

def edit_artist(request,artist_id):
    artist_info= Musician.objects.get(pk=artist_id)
    form = forms.MusicianForm(instance=artist_info) # Musician, forms.MusicianForm both are comes form same models => use (instance -> load the form with model data, for editing)
    dictionary={'musician_form':form}
    
    if request.method=='POST':
        form=forms.MusicianForm(request.POST, instance=artist_info)
        
        if form.is_valid():
            form.save(commit=True)
            return album_list(request,artist_id)
    return render(request,'first_app/edit_artist.html',context=dictionary)

def edit_album(request,album_id):
    album_info = Album.objects.get(pk=album_id)
    form = forms.AlbumForm(instance=album_info)
    dictionary={}
    
    if request.method=="POST":
        form = forms.AlbumForm(request.POST, instance=album_info)
        
        if form.is_valid():
            form.save(commit=True)
            dictionary.update({'success_text':"Successfull Updated"})
            return album_list(request,album_info.artist_id)
    
    dictionary.update({'update_form':form})
    return render(request,'first_app/edit_album.html',context=dictionary)

#delete--------------------------------------

def delete(request,album_id):
    album = Album.objects.get(pk=album_id).delete()
    
    dictionary={'delete':"Successfully delete album"}
    return render(request,'first_app/delete.html',context=dictionary)

def delete_artist(request,artist_id):
    artist = Musician.objects.get(pk=artist_id).delete()
    dictionary={'delete':"Successfully delete artist"}
    return render(request,'first_app/delete.html',context=dictionary)



# def form(request):
#     new_form = forms.MusicianForm()
#     dictionary={'test_form':new_form,'heading1_form':"Django Default Forms!"}

#     if request.method == 'POST':
#         new_form = forms.MusicianForm(request.POST)
       

#         if new_form.is_valid():
#             new_form.save(commit=True) # form field save to the DataBase.
#             return index(request) #redirect to index(request) <-views.


#     return render(request, 'first_app/form.html',context=dictionary)
-----------------------------------
-----------------------------------
first_app:: urls.py=>
-----------------------------------
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),  # Keep your existing index URL
    path('add_album/',views.album_form, name='album_form'),
    path('add_musician/',views.musician_form, name='musician_form'),
    path('album_list/<int:artist_id>/',views.album_list,name='album_list'),
    path('edit_artist/<int:artist_id>/',views.edit_artist,name='edit_artist'),
    path('edit_album/<int:album_id>/',views.edit_album,name='edit_album'),
    path('delete/<int:album_id>/',views.delete,name='delete'),
    path('delete_artist/<int:artist_id>/',views.delete_artist,name='delete_artist')
]

-----------------------------------
-----------------------------------
tempalate::first_app::album_list.html=>
-----------------------------------
<!DOCTYPE html>
{% extends 'first_app/base.html' %} {% block body_block%}

<h3>Artist info:</h3>

<p>Name: {{artist_info.first_name}} {{artist_info.last_name}}</p>
<p>instrument:{{artist_info.instrument}}</p>
<p>Average of Album rating: {{album_rating_av}}</p>
<a href="{% url 'first_app:edit_artist' artist_id=artist_info.id %}" class="btn btn-secondary">Edit Artist Info</a>
<a href="{% url 'first_app:delete_artist' artist_id=artist_info.id %}" class="btn btn-danger" >Delete Artist Info</a>




<h4>Album info</h4>

<div >
	<table class="table table-bordered">
		<thead>
			<tr>
				<th scope="col">Album Name</th>
				<th scope="col">Release Date</th>
				<th scope="col">Rating</th>
				<th scope="col">Action</th>
			</tr>
		</thead>
		<!-- ... -->
		<tbody>
			{% for album in album_info %}
			<tr>
				<td scope="row">{{ album.name }}</td>
				<td>{{ album.release_date|date:"M d, Y" }}</td>
				<td>{{ album.num_star }}</td>
				<td>
					<a href="{% url 'first_app:edit_album' album_id=album.id %}">
						<button class="btn btn-secondary">Edit</button>
					</a>

					<a href="{% url 'first_app:delete' album_id=album.id %}">
						<button class="btn btn-danger" onclick="return confirm('Delete This Album')">Delete</button>
					</a>
					
					
				</td>
			</tr>
			{% endfor %}
		</tbody>
		<!-- ... -->
	</table>
</div>

{% endblock %}

-----------------------------------
-----------------------------------
template::first_app::edit_artist.html
-----------------------------------
{% extends 'first_app/base.html' %}

{% block body_block%}



<p>Edit Artist Profile</p>
<hr>
<form action="" method="POST">

    {% csrf_token %}
    {{musician_form.as_p}}

    <input type="submit" name="submit" value="Update" class="btn btn-success">

</form>



{% endblock %}
-----------------------------------
-----------------------------------
tempalate::first_app::edit_album.html=>
-----------------------------------
{% extends 'first_app/base.html' %}

{% block body_block%}


{% if success_text%}

<div class="alert alert-success alert-dismissible fade show" role="alert">
	{{success_text}}
	<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>

	
</div>
{% endif %}

<p>Edit Album </p>
<hr>
<form action="" method="POST">

    {% csrf_token %}
    {{update_form.as_p}}

    <input type="submit" name="submit" value="Update" class="btn btn-success">

</form>



{% endblock %}
-----------------------------------
-----------------------------------
template::first_app::delete.html=>
-----------------------------------

{% extends 'first_app/base.html' %}

{% block body_block%}


{% if delete%}

<div class="alert alert-success alert-dismissible fade show" role="alert">
	{{delete}}
	<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>

	
</div>
{% endif %}

<p>Delete Data Page</p>





{% endblock %}
-----------------------------------
-----------------------------------
-----------------------------------
-----------------------------------


-----------------------------------------End Crud:with MySQL-----------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
