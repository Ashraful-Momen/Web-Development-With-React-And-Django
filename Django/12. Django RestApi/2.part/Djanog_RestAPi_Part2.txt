>>> python -m venv myenv
>>> activate the env
>>> copy the requirments.txt from Django RestApi part1
>>> pip install -r requirments.text 
>>> pip freeze > requirments.text 

>>> django-admin startproject burgerbackend
>>> python manage.py startapp api 
>>> configure the api in setting installs file all packages...
----------------------------------------------------------------------------------------------------------
---------------------------------------Creating Custom User Model -------------------------------------------------------------------
api::models.py=>
-----------------------
from django.db import models
from django.contrib.auth.models import AbstractBaseUser,PermissionsMixin,BaseUserManager #import those class for custom model for USERS.

# Create custom models here for users.

class UserManger(BaseUserManager):
    
    def create_user(self,email,password):
        if not email:
            raise ValueError("Please insert your Email!")
        email = self.normalize_email(email) #fix upper/lower case.
        user = self.model(email=email) #UserManager current Model use
        user.set_password(password)
        user.save(using=self.db)
        return user
    
    def create_superuser(self,email,password):
        user = self.create_user(email,password)
        user.is_staff = True
        user.is_superuser = True 
        user.save(using=self.db)
        return user
        


class User(AbstractBaseUser,PermissionsMixin):
    
    email = models.EmailField(max_length=100, unique=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    is_superuser = models.BooleanField(default=False)
    objects = UserManger() #for ORM using 
    USERNAME_FIELD = "email"  #using email as username
    
    def __str__(self):
        return self.email  
-------------------------------------------------
-------------------------------------------------
burgerbackend::setting.py =>
-----------------------------
AUTH_USER_MODEL = 'api.User' #using api app's models User class!
-------------------------------------------------
-------------------------------------------------
api::admin.py=> 
------------------
from django.contrib import admin
from api.models import User

# Register your models here.

admin.site.register(User)
-------------------------------------------------
-------------------------------------------------
>>> python manage.py makemigrations 

>>> python manage.py migrate

>>> python manage.py createsuperuser 

>>> python manage.py runserver
-------------------------------------------------
-------------------------------------------------

----------------------------------------------------------------------------------------------------------
----------------------------------User Profile Serializer and ViewSet------------------------------------------------------------------------
-------------------------------------------------
-------------------------------------------------
api::models.py=>
--------------------
from django.db import models
from django.contrib.auth.models import AbstractBaseUser,PermissionsMixin,BaseUserManager #import those class for custom model for USERS.

# Create custom models here for users.

class UserManger(BaseUserManager):
    
    def create_user(self,email,password):
        if not email:
            raise ValueError("Please insert your Email!")
        email = self.normalize_email(email) #fix upper/lower case.
        user = self.model(email=email) #UserManager current Model use
        user.set_password(password)
        user.save(using=self.db)
        return user
    
    def create_superuser(self,email,password):
        user = self.create_user(email,password)
        user.is_staff = True
        user.is_superuser = True 
        user.save(using=self.db)
        return user
        


class User(AbstractBaseUser,PermissionsMixin):
    
    email = models.EmailField(max_length=100, unique=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    is_superuser = models.BooleanField(default=False)
    objects = UserManger() #for ORM using 
    USERNAME_FIELD = "email" #using email as username
    
    def __str__(self):
        return self.email  
    
-------------------------------------------------
-------------------------------------------------
api::serializers.py=>
------------------------
from rest_framework import serializers 
from .models import User

#serializer is used for JSON Data

class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField( write_only=True, required=True, style={
        'input-type':'password'
    })
    class Meta:
        model = User 
        fields = ['id', 'email', 'password']
        
        
    #create a new user:
    
    def create_user(self, validated_data):
        email = validated_data ['email']
        password = validated_data ['password']
        
        user = User.objects.cretae_user(email,password)
        return user 
-------------------------------------------------
-------------------------------------------------
burgerbackend::urls.py=>
-----------------------
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/',include('api.urls',namespace='api'))
]

-------------------------------------------------
-------------------------------------------------
api::urls.py=>
------------------
from django.urls import path
from rest_framework import routers
from api.views import UserViewset

app_name = 'api'


from rest_framework import routers

router = routers.SimpleRouter()
router.register(r'users', UserViewset)

urlpatterns = router.urls

urlpatterns=[] + router.urls
-------------------------------------------------
-------------------------------------------------
api::views.py=>
--------------------
from django.shortcuts import render
from rest_framework import viewsets 
from .models import User
from .serializers import UserSerializer

# Create your views here.

class UserViewset(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer
-------------------------------------------------
-------------------------------------------------
---------------------------------------Adding JWT(Json Web Token) Authentication-------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
install the django simple json web token and adding setting in root setting.py ...
-------------------------------------------------
-------------------------------------------------
burgerbackend::setting.py=>
----------------------------
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qxt&9+*xa%29_1-^@w%uo9vvbikn+o=0ld5yf4s91o_sa-vzo&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#adding jsonweb token settings:--------------------------

REST_FRAMEWORK = {
    
    'DEFAULT_AUTHENTICATION_CLASSES': (
        
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
    
}
#-----------------adding custom user settings------------------------------------------

AUTH_USER_MODEL = 'api.User' #using api app's models User class!

#-----------------------------------------------------------

ROOT_URLCONF = 'burgerbackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'burgerbackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

-------------------------------------------------
-------------------------------------------------
api::urls.py=>
------------------
from django.urls import path
from rest_framework import routers
from api.views import UserViewset

app_name = 'api'


from rest_framework import routers

router = routers.SimpleRouter()
router.register(r'users', UserViewset)  #=>(r'url_path', views.function/class)


from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)

urlpatterns = router.urls

urlpatterns=[
    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    ] + router.urls
-------------------------------------------------
-------------------------------------------------
api::views.py=>
-------------------
from django.shortcuts import render
from rest_framework import viewsets 
from .models import User
from .serializers import UserSerializer

# Create your views here.

class UserViewset(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer
-------------------------------------------------
-------------------------------------------------
>>> http://127.0.0.1:8000/api/token/ [login with user name and password then get token ...]
----------------------------------------------------------------------------------------------------------
------------------------------------Creating Order Model----------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
api::models.py=>
-------------------
from django.db import models
from django.contrib.auth.models import AbstractBaseUser,PermissionsMixin,BaseUserManager #import those class for custom model for USERS.

# Create custom models here for users.

class UserManger(BaseUserManager):
    
    def create_user(self,email,password):
        if not email:
            raise ValueError("Please insert your Email!")
        email = self.normalize_email(email) #fix upper/lower case.
        user = self.model(email=email) #UserManager current Model use
        user.set_password(password)
        user.save(using=self.db)
        return user
    
    def create_superuser(self,email,password):
        user = self.create_user(email,password)
        user.is_staff = True
        user.is_superuser = True 
        user.save(using=self.db)
        return user
        


class User(AbstractBaseUser,PermissionsMixin):
    
    email = models.EmailField(max_length=100, unique=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    is_superuser = models.BooleanField(default=False)
    objects = UserManger() #for ORM using 
    USERNAME_FIELD = "email" #using email as username
    
    def __str__(self):
        return self.email  

#in BurgerBuilders React Project use => ingredient, order, user..... that's why we need models for.

class Ingredient(models.Model):
    salad = models.IntegerField(default=0)
    cheese = models.IntegerField(default=0)
    meet = models.IntegerField(default=0)

    def __str__(self):
        return f"salad : {self.salad}, cheese : {self.cheese}, meet : {self.meet}"

class CustomerDetails(models.Model):
    deliveryAddress = models.CharField(blank=True)
    phone = models.CharField(max_length=20)
    paymentType = models.CharField(max_length=50, blank=True)

    def __str__(self):
        return f"Delivery Address : {self.deliveryAddress}, Phone: {self.phone} and Payment : {self.paymentType}"

class Order(models.Model):
    user = models.ForeignKey(User,on_delete=models.CASCADE)
    ingredient = models.OneToOneField(Ingredient,on_delete=models.CASCADE)
    customer = models.OneToOneField(CustomerDetails,on_delete=models.CASCADE)
    price = models.CharField(max_length=20, default=0)
    orderTime = models.CharField(max_length=40, blank=True)

    def __str__(self):
        return f"Order : {self.user.email}"
----------------------------------------------------------------------------------------------------------
-------------------------------------Creating Order Serializer (Part 1)---------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
api::models.py=>
-------------------------
-------------------------
from django.db import models
from django.contrib.auth.models import AbstractBaseUser,PermissionsMixin,BaseUserManager #import those class for custom model for USERS.

# Create custom models here for users.

class UserManger(BaseUserManager):
    
    def create_user(self,email,password):
        if not email:
            raise ValueError("Please insert your Email!")
        email = self.normalize_email(email) #fix upper/lower case.
        user = self.model(email=email) #UserManager current Model use
        user.set_password(password)
        user.save(using=self.db)
        return user
    
    def create_superuser(self,email,password):
        user = self.create_user(email,password)
        user.is_staff = True
        user.is_superuser = True 
        user.save(using=self.db)
        return user
        


class User(AbstractBaseUser,PermissionsMixin):
    
    email = models.EmailField(max_length=100, unique=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    is_superuser = models.BooleanField(default=False)
    objects = UserManger() #for ORM using 
    USERNAME_FIELD = "email" #using email as username
    
    def __str__(self):
        return self.email  

#in BurgerBuilders React Project use => ingredient, order, user..... that's why we need models for.

class Ingredient(models.Model):
    salad = models.IntegerField(default=0)
    cheese = models.IntegerField(default=0)
    meet = models.IntegerField(default=0)

    def __str__(self):
        return f"salad : {self.salad}, cheese : {self.cheese}, meet : {self.meet}"

class CustomerDetails(models.Model):
    deliveryAddress = models.CharField(max_length=100,blank=True)
    phone = models.CharField(max_length=20)
    paymentType = models.CharField(max_length=50, blank=True)

    def __str__(self):
        return f"Delivery Address : {self.deliveryAddress}, Phone: {self.phone} and Payment : {self.paymentType}"

class Order(models.Model):
    user = models.ForeignKey(User,on_delete=models.CASCADE)
    ingredient = models.OneToOneField(Ingredient,on_delete=models.CASCADE)
    customer = models.OneToOneField(CustomerDetails,on_delete=models.CASCADE)
    price = models.CharField(max_length=20, default=0)
    orderTime = models.CharField(max_length=40, blank=True)

    def __str__(self):
        return f"Order : {self.user.email}"
    
    


-------------------------
-------------------------
api::serializers.py=>
-------------------------
-------------------------
from rest_framework import serializers 
from .models import User , Order , Ingredient , CustomerDetails 

#serializer is used for converting data to JSON Data

class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField( write_only=True, required=True, style={
        'input-type':'password'
    })
    class Meta:
        model = User 
        fields = ['id', 'email', 'password']
        
        
    #create a new user:
    
    def create_user(self, validated_data):
        email = validated_data ['email']
        password = validated_data ['password']
        
        user = User.objects.cretae_user(email,password)
        return user 

#Serializer for React Project BurgerBuilders:------------------------------------------------

class IngredientSerializer(serializers.ModelSerializer):
    class Meta:
        model = Ingredient
        fields = '__all__'

class CutomerSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomerDetails
        fields = '__all__'

class OrderSerializer(serializers.ModelSerializer):

    ingredient = IngredientSerializer()
    customer = CutomerSerializer()

    class Meta:
        model = Order
        fields = '__all__'
    
    #create a new order: all fields get from => Meta class(order models) fileds....
    def create(self,validated_data):
        ingredient = validated_data['ingredient']
        customer = validated_data['customer']
        price = validated_data['price']
        orderTime = validated_data['orderTime']
        user = validated_data['user']

        #create order and return to json data: 
        order = Order.objects.create(
            ingredient = IngredientSerializer.create(IngredientSerializer(), ingredient),
            customer = CutomerSerializer.create(CutomerSerializer(),customer),
            orderTime = orderTime,
            price = price,
            user = user

        )

        return order

# class OrderSerializer(serializers.ModelSerializer):
#     ingredient = IngredientSerializer()
#     customer = CutomerSerializer()

#     class Meta:
#         model = Order
#         fields = '__all__'

#     def create(self, validated_data):
#         # Extract nested serializer data
#         ingredient_data = validated_data.pop('ingredient')
#         customer_data = validated_data.pop('customer')

#         # Create Ingredient and Customer instances
#         ingredient = Ingredient.objects.create(**ingredient_data)
#         customer = CustomerDetails.objects.create(**customer_data)

#         # Create the Order instance
#         order = Order.objects.create(
#             ingredient=ingredient,
#             customer=customer,
#             **validated_data  # Include other fields like 'price', 'orderTime', and 'user'
#         )

#         return order

-------------------------
-------------------------
api::views.py=>
---------------------
from django.shortcuts import render
from rest_framework import viewsets 

from .models import User, Order
from .serializers import UserSerializer, OrderSerializer

# Create your views here.

class UserViewset(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer

# create views for order

class OrderViewSet(viewsets.ModelViewSet):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer
------------------------------------
------------------------------------
api::urls.py=>
-----------------
from django.urls import path
from rest_framework import routers

from api.views import UserViewset, OrderViewSet

app_name = 'api'


router = routers.SimpleRouter()
router.register(r'users', UserViewset)  #=>(r'url_path', views.function/class)
router.register(r'orders', OrderViewSet)  #=>(r'url_path', views.function/class)


from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)

urlpatterns = router.urls

urlpatterns=[
    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    ] + router.urls
------------------------------------
----------------------------------------------------------------------------------------------------------
---------------------------------------Filtering Orders-------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
install corsHeader packages for api support for react project...api data transfer....
----------------------------------------------------------------------------------------------------------
burgerbackend:: setting.py=> 
------------------------------------
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qxt&9+*xa%29_1-^@w%uo9vvbikn+o=0ld5yf4s91o_sa-vzo&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'rest_framework',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#adding corsheaders settings:--------------------------
CORS_ALLOWED_ORIGINS = ["http://localhost:3000"] # or any domain for allowing the Json data for Api...
#adding jsonweb token settings:--------------------------

REST_FRAMEWORK = {
    
    'DEFAULT_AUTHENTICATION_CLASSES': (
        
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
    
}
#-----------------adding custom user settings------------------------------------------

AUTH_USER_MODEL = 'api.User' #using api app's models User class!

#-----------------------------------------------------------

ROOT_URLCONF = 'burgerbackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'burgerbackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

------------------------------------
------------------------------------
api::views.py=>
------------------------------------
------------------------------------
from django.shortcuts import render
from rest_framework import viewsets 
from rest_framework.permissions import IsAuthenticated #only authenticated user can show the views...

from .models import User, Order
from .serializers import UserSerializer, OrderSerializer

# Create your views here.

class UserViewset(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer

# create views for order

class OrderViewSet(viewsets.ModelViewSet):
    # queryset = Order.objects.all() #for filtering order just comment out it and customizing the queryset.
    serializer_class = OrderSerializer

    #for filtering according user_id
    permission_classes = [IsAuthenticated] #only login user can show the views
    def get_queryset(self):
        queryset = Order.objects.all()

        id = self.request.query_params.get("id",None)
        
        if id is not None:
            queryset = queryset.filter(user__id = id)

        return queryset
------------------------------------
------------------------------------
api::urls.py->
===================================
from django.urls import path
from rest_framework import routers


from api.views import UserViewset, OrderViewSet


app_name = 'api'


router = routers.SimpleRouter()
router.register(r'users', UserViewset)  #=>(r'url_path', views.function/class)
router.register(r'orders', OrderViewSet, basename='orders')  #=>(r'url_path', views.function/class) , here user basename= for filtering orders...


from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)

urlpatterns = router.urls

urlpatterns=[
    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    ] + router.urls
----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
