-------------------------------------Connect reactApp with Django RestApi---------------------------------


********** if user password save not as hashes .... then Json web token not given to normal users...**********

>>> download the burgerbuilder project
>>> open with cmd 
>>> npm init // initializations
>>> npm install // for install packages...
>>> npm run server 
-------------------------------------
>>> goto the django restAPi part2 
>>> python manage.py runserver
--------------------------------------------------------------------------------------------------
------------------------------Signing Up Users--------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
src::reducer::authActionCreators.js=> 
--------------------------------------
import * as actionType from "./actionType";
import axios from "axios";
import jwt_decode from 'jwt-decode'

//firebase : https://firebase.google.com/docs/reference/rest/auth#section-create-email-password

export const authSuccess = (token, userId) => {
	return {
		type: actionType.AUTH_SUCCESS,
		payload: {
			token: token,
			userId: userId,
		},
	};
};

//authLoading:
export const authLaoding=(isLoading)=>{
	return{
		type:actionType.AUTH_LOADING,
		payload:isLoading,
	}
}

//authFailed: 
export const authFailed=(errorMsg)=>{
	return{
		type:actionType.AUTH_FAILED,
		payload:errorMsg,
	}

}

export const auth = (email, password, mode) => {
	// console.log(email, password, mode);

	

	return (dispatch) => {
		dispatch(authLaoding(true)); // call authLoading () , show the spinner //if error fix here...
		const authData = {
			email: email,
			password: password,
			// returnSecureToken: true, // according to firebase.
		};
		let authUrl = null;

		if (mode === "Sing Up") {
			// authUrl ="https://identitytoolkit.googleapis.com/v1/accounts:signUp?key="; #firebase link
			authUrl = "http://127.0.0.1:8000/api/users/" //django singup link
		} else {
			// authUrl ="https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key="; //firebase login 
			authUrl = "http://127.0.0.1:8000/api/token/" //django login link
		}

		// const API_KEY = "AIzaSyDVbB5Z2Lbzj4LsY_ag2b4S0YVzoVa-MEc";
		axios
			.post(authUrl, authData)
			.then((response) => {

				dispatch(authLaoding(false)); // when Login/singIn then spinner false.
				console.log(response)
				// const token = jwt_decode(response.data.access)
				// console.log(token)
				// localStorage.setItem("token", response.data.access);
				// localStorage.setItem("userId", token.user_id);
                // const expirationTime = new Date(token.exp * 1000)
				// localStorage.setItem("expirationTime", expirationTime);
				// dispatch(authSuccess(response.data.access, token.user_id));
			})
			.catch((error) => {
				
				dispatch(authLaoding(false)); // when Login/singIn then spinner false. 
				//django api :------------------
				const key = Object.keys(error.response.data)[0]

				// console.log('value of key=>',key) // check the key value => email

				const errorValue = error.response.data[key] // value of email=> error msg'user already exits'

				console.log('print the error value=> ',errorValue)
				// console.log(error.response)
				
				dispatch(authFailed(`${errorValue}`)); // send the value to the reducer to show the error msg.
				// dispatch(authFailed(error.response.data.error.message));
				// console.log(error.response.data.error.message);
				
			});
	};
};

//LogOut:

export const logout= ()=>{
    localStorage.removeItem("token");
    localStorage.removeItem("userId");
    localStorage.removeItem("expirationTime");
    return{
        type:actionType.AUTH_LOGOUT
    }
}


// stay logIn with localStorage:
export const authCheck = () => {
    return (dispatch) => {
      const token = localStorage.getItem("token");
      if (!token) {
        // LogOut:
        dispatch(logout());
      } else {
        const expirationTime = new Date(localStorage.getItem("expirationTime"));
        if (expirationTime <= new Date()) {
          // LogOut
          dispatch(logout());
        } else {
          const userId = localStorage.getItem("userId"); // Fixed typo here
          dispatch(authSuccess(token, userId));
        }
      }
    };
  };


  
----------------------------------------------
>>> try to singup with reactApp [and check the django restapi users add or not...]
--------------------------------------------------------------------------------------------------
------------------------------------Logging In Users--------------------------------------------------------------
--------------------------------------------------------------------------------------------------
>>> npm install jwt-decode --save [decode the Json web token]. decode the token from response.data.access and save all token data to local storage
----------------------------------------------
src::reducer::authActionCreators.js=> 
----------------------------------------------
import * as actionType from "./actionType";
import axios from "axios";
import jwt_decode from 'jwt-decode'


export const authSuccess = (token, userId) => {
	return {
		type: actionType.AUTH_SUCCESS,
		payload: {
			token: token,
			userId: userId,
		},
	};
};

//authLoading:
export const authLaoding=(isLoading)=>{
	return{
		type:actionType.AUTH_LOADING,
		payload:isLoading,
	}
}

//authFailed: 
export const authFailed=(errorMsg)=>{
	return{
		type:actionType.AUTH_FAILED,
		payload:errorMsg,
	}

}

export const auth = (email, password, mode) => {
	// console.log(email, password, mode);

	

	return (dispatch) => {
		dispatch(authLaoding(true)); // call authLoading () , show the spinner //if error fix here...
		const authData = {
			email: email,
			password: password,
			// returnSecureToken: true, // according to firebase.
		};
		let authUrl = null;

		if (mode === "Sing Up") {
			
			authUrl = "http://127.0.0.1:8000/api/users/" //django singup link
		} else {
			
			authUrl = "http://127.0.0.1:8000/api/token/" //django login link
		}

		// const API_KEY = "AIzaSyDVbB5Z2Lbzj4LsY_ag2b4S0YVzoVa-MEc";
		axios
			.post(authUrl, authData)
			.then((response) => {

				dispatch(authLaoding(false)); // when Login/singIn then spinner false.
				console.log(response)
				const token = jwt_decode(response.data.access)
				console.log(token)
				localStorage.setItem("token", response.data.access);
				localStorage.setItem("userId", token.user_id);
                const expirationTime = new Date(token.exp * 1000)
				localStorage.setItem("expirationTime", expirationTime);
				dispatch(authSuccess(response.data.access, token.user_id));
			})
			.catch((error) => {
				
				dispatch(authLaoding(false)); // when Login/singIn then spinner false. 
				
				const key = Object.keys(error.response.data)[0]
				const errorValue = error.response.data[key] // value of email=> error msg'user already exits'
				dispatch(authFailed(`${errorValue}`)); // send the value to the reducer to show the error msg.
				
			});

		
	};
};

//LogOut:

export const logout= ()=>{
    localStorage.removeItem("token");
    localStorage.removeItem("userId");
    localStorage.removeItem("expirationTime");
    return{
        type:actionType.AUTH_LOGOUT
    }
}


// stay logIn with localStorage:
export const authCheck = () => {
    return (dispatch) => {
      const token = localStorage.getItem("token");
      if (!token) {
        // LogOut:
        dispatch(logout());
      } else {
        const expirationTime = new Date(localStorage.getItem("expirationTime"));
        if (expirationTime <= new Date()) {
          // LogOut
          dispatch(logout());
        } else {
          const userId = localStorage.getItem("userId"); // Fixed typo here
          dispatch(authSuccess(token, userId));
        }
      }
    };
  };


  

--------------------------------------------------------------------------------------------------
-----------------------------------Logging In Users while Signing Up---------------------------------------------------------------
--------------------------------------------------------------------------------------------------
src::reducer::authActionCreators.js=> 
-------------------------------------
import * as actionType from "./actionType";
import axios from "axios";
import jwt_decode from "jwt-decode";

export const authSuccess = (token, userId) => {
  return {
    type: actionType.AUTH_SUCCESS,
    payload: {
      token: token,
      userId: userId,
    },
  };
};

//authLoading:
export const authLaoding = (isLoading) => {
  return {
    type: actionType.AUTH_LOADING,
    payload: isLoading,
  };
};

//authFailed:
export const authFailed = (errorMsg) => {
  return {
    type: actionType.AUTH_FAILED,
    payload: errorMsg,
  };
};



//Start Django code ==================================================


const saveTokenDataAndGetUserId = (access) => {
  const token = jwt_decode(access);
  localStorage.setItem("token", access);
  localStorage.setItem("userId", token.user_id);
  const expirationTime = new Date(token.exp * 1000);
  localStorage.setItem("expirationTime", expirationTime);
  return token.user_id;
};

export const auth = (email, password, mode) => {
  // console.log(email, password, mode);

  return (dispatch) => {
    dispatch(authLaoding(true)); // call authLoading () , show the spinner //if error fix here...
    const authData = {
      email: email,
      password: password,
      // returnSecureToken: true, // according to firebase.
    };
    let authUrl = null;

    if (mode === "Sing Up") {
      authUrl = "http://127.0.0.1:8000/api/users/"; //django singup link
    } else {
      authUrl = "http://127.0.0.1:8000/api/token/"; //django login link
    }

    // const API_KEY = "AIzaSyDVbB5Z2Lbzj4LsY_ag2b4S0YVzoVa-MEc";
    axios
      .post(authUrl, authData)
      .then((response) => {
        dispatch(authLaoding(false)); // when Login/singIn then spinner false.

        if (mode !== "Sing Up") {
          const access = response.data.access;
          const user_id = saveTokenDataAndGetUserId(access);
          dispatch(authSuccess(response.data.access, user_id));
        } else {
          return axios
            .post("http://127.0.0.1:8000/api/token/",authData)
            .then((response) => {
              const access = response.data.access;
              const user_id = saveTokenDataAndGetUserId(access);
              dispatch(authSuccess(response.data.access, user_id));
            });
        }
      })
      .catch((error) => {
        dispatch(authLaoding(false)); // when Login/singIn then spinner false.

        const key = Object.keys(error.response.data)[0];
        const errorValue = error.response.data[key]; // value of email=> error msg'user already exits'
        dispatch(authFailed(`${errorValue}`)); // send the value to the reducer to show the error msg.
      });
  };
};


//End Django code ==================================================

//LogOut:

export const logout = () => {
  localStorage.removeItem("token");
  localStorage.removeItem("userId");
  localStorage.removeItem("expirationTime");
  return {
    type: actionType.AUTH_LOGOUT,
  };
};

// stay logIn with localStorage:
export const authCheck = () => {
  return (dispatch) => {
    const token = localStorage.getItem("token");
    if (!token) {
      // LogOut:
      dispatch(logout());
    } else {
      const expirationTime = new Date(localStorage.getItem("expirationTime"));
      if (expirationTime <= new Date()) {
        // LogOut
        dispatch(logout());
      } else {
        const userId = localStorage.getItem("userId"); // Fixed typo here
        dispatch(authSuccess(token, userId));
      }
    }
  };
};

-----------------------------
--------------------------------------------------------------------------------------------------
------------------------------------Placing Orders--------------------------------------------------------------
src::component::order::checkout::CheckOut.js->
----------------------------------------------------
import React, { useState } from "react";
import { Button, Modal, ModalBody } from "reactstrap";
import { connect } from "react-redux";
import axios from "axios";
import Spinner from "../../Spinner/Spinner";
import { resetIngredients } from "../../../redux/actionCreators";
import { useNavigate } from "react-router-dom";

const mapStateToProps = (state) => {
  return {
    ingredients: state.ingredients,
    totalPrice: state.totalPrice,
    purchasable: state.purchasable,
    token: state.token, // last add token
    userId:state.userId, // last add to show order according to user ID.
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    resetIngredients: () => dispatch(resetIngredients()),
  };
};

const CheckOut = (props) => {
  const [values, setValues] = useState({
    deliveryAddress: "",
    phone: "",
    paymentType: "Cash On Delivery",
  });
  const [isLoading, setIsLoading] = useState(false);
  const [isModal, setIsModal] = useState(false);
  const [modalMsg, setModalMsg] = useState("");

  const navigate = useNavigate();

  const goBack = () => {
    navigate("/", { state: props.ingredients });
  };

  const inputChangeHandler = (e) => {
    setValues({
      ...values,
      [e.target.name]: e.target.value,
    });
  };

 //Djnago Code add here.... ----------------------------------------
 const submitHandler = () => {
  setIsLoading(true);
  const url = "http://127.0.0.1:8000/api/orders/";
  const ingredients = props.ingredients; // Remove the extra brackets
  console.log(ingredients);
  const ingredientConversion = {};

  for (const ingredient of ingredients) {
    ingredientConversion[ingredient.type.toLowerCase()] = ingredient.amount;
  }

  console.log("ingredientConversion", ingredientConversion);

  const order = {
    ingredient: ingredientConversion,
    price: props.totalPrice,
    customer: values,
    orderTime: new Date(),
    user: props.userId,
  };

  console.log(order);

  axios
    .post(url, order)
    .then((response) => {
      if (response.status === 201) {
        setIsLoading(false);
        setIsModal(true);
        setModalMsg("Order Placed Successfully!");
        props.resetIngredients();
      } else {
        setIsLoading(false);
        setIsModal(true);
        setModalMsg("Something went Wrong!");
      }
    })
    .catch((err) => {
      setIsLoading(false);
      setIsModal(true);
      setModalMsg("Something went Wrong!");
    });
};

  // end the Django code .....------------------------------------



  let form = (
    <div>
      <h4
        style={{
          border: "1px solid grey",
          boxShadow: "1px 1px #888888",
          borderRadius: "5px",
          padding: "20px",
        }}
      >
        {" "}
        Price:{props.totalPrice} BDT
      </h4>
      <form
        style={{
          border: "1px solid grey",
          boxShadow: "1px 1px #888888",
          borderRadius: "5px",
          padding: "20px",
        }}
      >
        <textarea
          name="deliveryAddress"
          value={values.deliveryAddress}
          className="form-control"
          placeholder="Your Address"
          onChange={inputChangeHandler}
        ></textarea>
        <br />
        <input
          name="phone"
          className="form-control"
          value={values.phone}
          placeholder="Phone Number"
          onChange={inputChangeHandler}
        />
        <br />
        <select
          name="paymentType"
          value={values.paymentType}
          className="form-control"
          onChange={inputChangeHandler}
        >
          <option value="Cash On Delivery">Cash On Delivery</option>
          <option value="Bkash">Bkash</option>
        </select>
        <br />
        <Button
          style={{ backgroundColor: "#D70F65" }}
          onClick={submitHandler}
          disabled={!props.purchasable}
        >
          Place Order
        </Button>
        <Button className="secondary ms-3" onClick={goBack}>
          Cancel
        </Button>
      </form>
    </div>
  );

  return (
    <div>
      {isLoading ? <Spinner /> : form}
      <Modal isOpen={isModal} onClick={goBack}>
        <ModalBody>{modalMsg}</ModalBody>
      </Modal>
    </div>
  );
};

export default connect(mapStateToProps, mapDispatchToProps)(CheckOut);




-----------------------------
--------------------------------------------------------------------------------------------------
------------------------------------Getting Order List--------------------------------------------------------------
src::redux::actionCreators=>
-----------------------------
import * as actionType from './actionType';
import axios from 'axios';

export const addIngredient = (igtype)=>{
    return{
        type:actionType.ADD_INGREDIENT,
        payload:igtype
    }
}

export const removedIngredient = (igtype)=>{
    return{
        type:actionType.REMOVED_INGREDIENT,
        payload:igtype,
    }
}

export const updatePurchable = ()=>{
    return {
        type:actionType.UPDATE_PURSHABLE,
    }
}

export const resetIngredients = () => {
    return {
        type:actionType.RESET_INGREDIENTS,
    }
}

export const loadOrder = (orders)=>{
    return {
        type:actionType.LOAD_ORDERS,
        payload:orders
    }
}

export const orderLoadedFailed = () =>{
    return{
        type:actionType.ORDER_LOAD_FAILED,
    }
}

//Djnago code add here for fetching order: _______________________

export const fetchOrder = (token,userId) => dispatch=>{
    
    
     axios.get(`http://127.0.0.1:8000/api/orders/?id=${userId}` ) // for filtering use=> ?id=${userId} ... user can show his own order...
    .then(response=>{
        dispatch(loadOrder(response.data))// without dispatch this function can't pass to the reducer.js
    })
    .catch(error=>{
        dispatch(orderLoadedFailed(error))
    })
}
-----------------------------
-----------------------------
src::component::order::SingleOrder.js=>
----------------------------------------
import React from 'react'

const SingleOrder = (props) => {
    //Django code add here for converting object to array , for showing the order: 
    const ingredient = []
    for (let [key,value] of Object.entries(props.order.ingredient)){
          ingredient.push({type:key,amount:value});
    }
    const ingredientSummary = ingredient.map(item=>{
        return(
                <span style={{
                    border: "1px solid grey",
                    boxShadow: "1px 1px #888888",
                    borderRadius: "5px",
                    padding: "5px",
                    marginRight:"5px"
                  }} key={item.type}>{item.amount}X<span style={{textTransform:"capitalize"}}>{item.type}</span></span>
            
        )
    })
    //End django code ....
  return (
    <div style={{
        border: "1px solid grey",
        boxShadow: "1px 1px #888888",
        borderRadius: "5px",
        padding: "20px",
        margin:"10px"
      }}>
        <p>Order Number: {props.order.id}</p>
        <p>Order Address: {props.order.customer.deliveryAddress}</p>
        <hr/>
        {ingredientSummary}
        <hr/>

        <p>Price: {props.order.price} BDT</p>

    </div>
  )
}

export default SingleOrder
-----------------------------
src::redux::reducer.js=>
---------------------------
import * as actionType from "./actionType";

const INGREDIENT_PRICES = {
	Salad: 20,
	Cheese: 30,
	Meat: 50,
};

const INITIAL_STATE = {
	ingredients: [
		{ type: "Salad", amount: 0 },
		{ type: "Cheese", amount: 0 },
		{ type: "Meat", amount: 0 },
	],

	orders:[],
	orderLoading:true,
	orderError:false,

	totalPrice: 80,
	purchasable: false,

	//FireBase Auth variable: 
	token :null, 
	userId:null,

	//AuthLoading:
	authLoading:false,
	authFailedMsg:null,

};

export const reducer = (state = INITIAL_STATE, action) => {
	const ingredients = [...state.ingredients];
	switch (action.type) {
		case actionType.ADD_INGREDIENT:
			for (let item of ingredients) {
				if (item.type === action.payload) {
					item.amount++;
				}
			}
			return {
				...state,
				ingredients: ingredients,
				totalPrice: state.totalPrice + INGREDIENT_PRICES[action.payload]
			};

		case actionType.REMOVED_INGREDIENT:
			const updatedIngredients = [...state.ingredients];
			const newPrice = state.totalPrice - INGREDIENT_PRICES[action.payload];
			for (let item of updatedIngredients) {
				if (item.type === action.payload) {
					if (item.amount <= 0) return state;
					item.amount--;
				}
			}
			return {
				...state,
				ingredients: updatedIngredients,
				totalPrice: newPrice,
			};

		case actionType.UPDATE_PURSHABLE:
			const sum = state.ingredients.reduce((sum, element) => {
				return sum + element.amount;
			}, 0);
			return {
				...state,
				purchasable: sum > 0,
			};
		case actionType.RESET_INGREDIENTS:
			return{
				...state,
				ingredients: [
					{ type: "Salad", amount: 0 },
					{ type: "Cheese", amount: 0 },
					{ type: "Meat", amount: 0 },
				],
			
				totalPrice: 80,
				purchasable: false,

			}
		case actionType.LOAD_ORDERS:
			// console.log(action.payload)
			let orders=[...action.payload];  // django just edit this line , cz order comes from actionCreator.js=>loadOrders()
			// for(let key in action.payload)
			// {
			// 	// console.log(action.payload[key]);
			// 	orders.push({
			// 		...action.payload[key],
			// 		id:key,
			// 	})
			// }
			// console.log(orders)
			return{
				...state,
				orders:orders,
				orderLoading:false,
			}
		case actionType.ORDER_LOAD_FAILED:
			console.log(action);
			return{
				...state,
				orderError:true,
				orderLoading:false,
			}
		//FireBase Auth:
		case actionType.AUTH_SUCCESS:
			return{
				...state,
				token:action.payload.token,
				userId:action.payload.userId
			}
		case actionType.AUTH_LOGOUT:
			return{
				...state,
				token:null,
				userId:null,
				authFailedMsg:null, //last Add

			}
		case actionType.AUTH_LOADING:
			return{
				...state,
				authLoading:action.payload,
			}
		case actionType.AUTH_FAILED:
			return{
				...state,
				authFailedMsg:action.payload,
			}

		default:
			return { ...state };
	}
};
-------------------------------------------
-------------------------------------------

--------------------------------------------------------------------------------------------------
-------------------------------------Adding Authorizations-------------------------------------------------------------

-------------------------------------------
-------------------------------------------
src::redux::actionCreators.js=>
-------------------------------------------
import * as actionType from './actionType';
import axios from 'axios';

export const addIngredient = (igtype)=>{
    return{
        type:actionType.ADD_INGREDIENT,
        payload:igtype
    }
}

export const removedIngredient = (igtype)=>{
    return{
        type:actionType.REMOVED_INGREDIENT,
        payload:igtype,
    }
}

export const updatePurchable = ()=>{
    return {
        type:actionType.UPDATE_PURSHABLE,
    }
}

export const resetIngredients = () => {
    return {
        type:actionType.RESET_INGREDIENTS,
    }
}

export const loadOrder = (orders)=>{
    return {
        type:actionType.LOAD_ORDERS,
        payload:orders
    }
}

export const orderLoadedFailed = () =>{
    return{
        type:actionType.ORDER_LOAD_FAILED,
    }
}

//Djnago code add here for fetching order: _______________________

export const fetchOrder = (token,userId) => dispatch=>{
    
    const header= {  //fix the authoraization problem  
        'headers':{
            'Authorization':`Bearer ${token}`
        }
    }

    axios.get(`http://127.0.0.1:8000/api/orders/`, header ) // for filtering use=> ?id=${userId} ... user can show his own order...
    .then(response=>{
        dispatch(loadOrder(response.data))// without dispatch this function can't pass to the reducer.js
    })
    .catch(error=>{
        dispatch(orderLoadedFailed(error))
    })
}
-------------------------------------------
-------------------------------------------
api::views.py=> 
-------------------------------------------
from django.shortcuts import render
from rest_framework import viewsets 
from rest_framework.permissions import IsAuthenticated #only authenticated user can show the views...

from .models import User, Order
from .serializers import UserSerializer, OrderSerializer

# Create your views here.

class UserViewset(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer


# create views for order

class OrderViewSet(viewsets.ModelViewSet):
    # queryset = Order.objects.all() #for filtering order just comment out it and customizing the queryset.
    serializer_class = OrderSerializer

    #for filtering according user_id
    permission_classes = [IsAuthenticated] #only login user can show the views

    def get_queryset(self):
        user = self.request.user
        queryset = Order.objects.filter(user__id=user.id) #filter the order according to user...

        # queryset = Order.objects.all()

        # id = self.request.query_params.get("id",None)
        
        # if id is not None:
        #     queryset = queryset.filter(user__id = id)

        return queryset


-------------------------------------------end-----------------------------------------------------