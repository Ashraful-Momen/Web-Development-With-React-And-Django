>>> python -m venv myenv
>>> pip install -r requirments.txt
>>> pip freeze > requirments.txt
>>> python manage.py runserver



--------------------------------------Start - My_Blog_Project--------------------------------------------------------------------

>>> django-admin startproject My_Blog_Project

>>> django-admin startapp App_Blog
>>> django_admin startapp App_Login

>>> python -m venv myenv

>>> cd myenv/Script

>>> activate


>>> pip install django
>>> pip install pillow 
>>> pip list

>>> cd My_Blog_Project

--------------------------------------My_Blog_Project--------------------------------------------------------------------
----------------------------
My_Blog_Project::setting.py=>
------------------------------
"""
Django settings for My_Blog_Project project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES_DIR = BASE_DIR / 'templates'

STATICS_DIR = BASE_DIR / 'static'

MEDIA_DIR = BASE_DIR / 'media'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-t$o(=s+xy(_$bw@clbh_u+o%nd3x7nb5+f0m%^99i*g8f)(rxc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'App_Login',
    'App_Blog',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'My_Blog_Project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'My_Blog_Project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIR = STATICS_DIR

#MEDIA:

MEDIA_URL = 'media/'
MEDIA_ROOT = MEDIA_DIR



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

-------------------------------------------------------------------------------------------------------------------------
-------------------------------------App_Login------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
----------------------------------
App_Login::models.py=>
----------------------------------
from django.db import models
from django.contrib.auth.models import User


class UserProfile(models.Model):
    user = models.OneToOneField(User, related_name='user_profile',on_delete=models.CASCADE)
    profile_pic = models.ImageField(upload_to='profile_pic')

----------------------------------
----------------------------------
App_Blog::models.py=>
----------------------------------
----------------------------------
from django.db import models
from django.contrib.auth.models import User


class Blog(models.Model):
    author = models.ForeignKey(User,related_name='post_author', on_delete=models.CASCADE) #relation with user table
    blog_title = models.CharField(max_length=259 , verbose_name='Put a Title')
    slug = models.SlugField(max_length=269, unique=True)
    blog_content = models.TextField(verbose_name='What is on Your Mind')
    blog_image = models.ImageField(upload_to='blog_image', verbose_name='Image')
    publish_date = models.DateTimeField(auto_now_add=True)
    update_date = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.blog_title 

class Comment(models.Model):
    blog = models.ForeignKey(Blog,related_name='blog_comment',on_delete=models.CASCADE) #relation with blog table
    user = models.ForeignKey(User,related_name='user_comment',on_delete=models.CASCADE) #relation with user table
    comment = models.TextField()
    comment_date = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.comment
    
class Like(models.Model):
    blog = models.ForeignKey(Blog,related_name='like_blog',on_delete=models.CASCADE)
    user = models.ForeignKey(User,related_name='liker_user',on_delete=models.CASCADE)
    
----------------------------------
>>> python manage.py makemigrations App_Blog, App_Login 
>>> python manage.py migrate 
----------------------------------
App_Login::admin=>
----------------------------------
----------------------------------
from django.contrib import admin
from App_Login.models import UserProfile

# Register your models here.

admin.site.register(UserProfile)
----------------------------------
----------------------------------
App_Blog::admin=>
----------------------------------
----------------------------------
from django.contrib import admin
from App_Blog.models import Blog,Comment,Like



admin.site.register(Blog)
admin.site.register(Comment)
admin.site.register(Like)

----------------------------------
----------------------------------





-------------------------------------------------------------------------------------------------------------------------
-----------------------------------------SingUp--------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
-------------------------------
$ pip install crispy-bootstrap5 -> for Bootstrap input field add in sinup.html 
---------------------------------
My_Blog_Project::setting=> 
----------------------------------
INSTALLED_APPS = (
    ...
    "crispy_forms",
    "crispy_bootstrap5",
    ...
)

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"
----------------------------------
----------------------------------
App_Login::forms.py=>
----------------------------------
----------------------------------
from django import forms 
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class SignUpForm(UserCreationForm):
    email = forms.EmailField(label="Email Address", required=True)
    
    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')

----------------------------------
----------------------------------
App_Login::views.py=>
----------------------------------
----------------------------------
from django.shortcuts import render
from django.contrib.auth.forms import  AuthenticationForm
from django.contrib.auth import login,authenticate,logout
from django.shortcuts import HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from App_Login.forms import SignUpForm




def sing_up(request):
    form = SignUpForm()
    registered = False
    
    if request.method=='POST':
        form = SignUpForm(data=request.POST)
        if form.is_valid():
            form.save()
            registered = True
            
    dictionary = {'form':form, 'registered':registered}
    
    return render(request,'App_Login/sing_up.html',context=dictionary)


----------------------------------
----------------------------------
App_Login::urls.py=>
----------------------------------
----------------------------------
from django.urls import path
from App_Login import views


app_name='App_Login'

urlpatterns = [
    path('singup/',views.sing_up,name='sing_up'),
    
]

----------------------------------
----------------------------------
header.html=>
----------------------------------
----------------------------------
<nav class="navbar navbar-expand-sm navbar-light bg-light shadow-lg p-3 mb-5 bg-body rounded">
    <div class="container">
      <a class="navbar-brand" href="{% url 'App_Blog:blog_list'%}">Blog Logo</a>
      <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId"
          aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="collapsibleNavId">
          <ul class="navbar-nav me-auto mt-2 mt-lg-0">
              <li class="nav-item">
                  <a class="nav-link active" href="{% url 'App_Blog:blog_list'%}" aria-current="page">Home <span class="visually-hidden">(current)</span></a>
              </li>
              <li class="nav-item">
                  <a class="nav-link" href="{% url 'App_Login:sing_up' %}">Sing Up</a>
              </li>
              
          </ul>
          <form class="d-flex my-2 my-lg-0">
              <input class="form-control me-sm-2" type="text" placeholder="Search">
              <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
          </form>
      </div>
</div>
</nav>
----------------------------------
----------------------------------
App_Login::sing_up.html=>
----------------------------------
----------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title%}
 SinUp
{% endblock%}
{% block body%}
{% if registered%}
<p class="alert alert-success"> Successfully created Account</p>
{% else%}
<h4>Create New Account:</h4>
<form action="" method="POST">

    {{form|crispy}}
    {% csrf_token%}

    <input type="submit" name="submit" value="Create Account" class="btn btn-info" >

</form>
<p>Already Account ? <a href="#">Login Here</a></p>
{% endif%}
{% endblock%}
----------------------------------
----------------------------------
-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------Logout-----------------------------------------------------------------------------
----------------------------------
----------------------------------
My_Blog_Project::settings.py=>
----------------------------------
LOGIN_URL = '/account/login/'
----------------------------------
----------------------------------
App_Login::views.py=>
----------------------------------
----------------------------------
from django.shortcuts import render
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth import login,authenticate,logout
from django.shortcuts import HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth.decorators import login_required




def sing_up(request):
    form = UserCreationForm()
    registered = False
    
    if request.method=='POST':
        form = UserCreationForm(data=request.POST)
        if form.is_valid():
            form.save()
            registered = True
            
    dictionary = {'form':form, 'registered':registered}
    
    return render(request,'App_Login/sing_up.html',context=dictionary)


def log_in(request):
    form = AuthenticationForm()
    
    if request.method=="POST":
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            username= form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            
            user = authenticate(username=username,password=password)
            
            if user is not None: #if user exit in DataBase
                login(request,user)
                
                return HttpResponseRedirect(reverse('index'))
    
    return render(request,'App_Login/login.html',context={'form':form})

@login_required
def log_out(request):
    logout(request)
    
    return HttpResponseRedirect(reverse('index'))
    
----------------------------------
----------------------------------
App_Login::urls.py=>
----------------------------------
----------------------------------
from django.urls import path
from App_Login import views


app_name='App_Login'

urlpatterns = [
    path('singup/',views.sing_up,name='sing_up'),
    path('login/',views.log_in,name='login'),
    path('logout/',views.log_out,name='logout')
    
]

----------------------------------
----------------------------------
App_Login::login.html=>
----------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title %}
LogIN
{% endblock %}

{% block body %}
<form action="" method="POST">

    {{ form|crispy }}
    {% csrf_token %}

    <input type="submit" name="submit" value="LogIn" class="btn btn-info">

</form>
{% endblock %}

----------------------------------
----------------------------------
header.html=>
----------------------------------
----------------------------------
<nav class="navbar navbar-expand-sm navbar-light bg-light shadow-lg p-3 mb-5 bg-body rounded">
    <div class="container">
      <a class="navbar-brand" href="{% url 'App_Blog:blog_list'%}">Blog Logo</a>
      <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId"
          aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="collapsibleNavId">
          <ul class="navbar-nav me-auto mt-2 mt-lg-0">
              <li class="nav-item">
                  <a class="nav-link active" href="{% url 'App_Blog:blog_list'%}" aria-current="page">Home <span class="visually-hidden">(current)</span></a>
              </li>
              <li class="nav-item">
                {% if user.is_authenticated%}
                <a class="nav-link" href="{% url 'App_Login:logout' %}">Logout</a>
            </li>
            {% else %}
              <li class="nav-item">
                  <a class="nav-link" href="{% url 'App_Login:sing_up' %}">Sing Up</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="{% url 'App_Login:login' %}">LogIn</a>
            </li>
            {% endif%}
           
              
          </ul>
          <form class="d-flex my-2 my-lg-0">
              <input class="form-control me-sm-2" type="text" placeholder="Search">
              <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
          </form>
      </div>
</div>
</nav>
----------------------------------
-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------User Profile-----------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
>>> pip install django-cleanup . when user upload / change picture then previous image delete auto ....
--------------------
>>> My_Blog_Project::setting.py=>
-------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'App_Login',
    'App_Blog',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_cleanup.apps.CleanupConfig',
]
---------------------------------------
---------------------------------------
settting.py=> 
---------------------------------------
---------------------------------------
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES_DIR = BASE_DIR / 'templates'

STATICS_DIR = BASE_DIR / 'static'

MEDIA_DIR = BASE_DIR / 'media'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-t$o(=s+xy(_$bw@clbh_u+o%nd3x7nb5+f0m%^99i*g8f)(rxc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'App_Login',
    'App_Blog',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_cleanup.apps.CleanupConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"



ROOT_URLCONF = 'My_Blog_Project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'My_Blog_Project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIR = [STATICS_DIR,]

#MEDIA:

MEDIA_URL = '/media/'
MEDIA_ROOT = MEDIA_DIR

LOGIN_URL = '/account/login/'



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

---------------------------------------
---------------------------------------
App_Login::models.py=>
---------------------------------------
---------------------------------------
from django.db import models
from django.contrib.auth.models import User


class UserProfile(models.Model):
    user = models.OneToOneField(User, related_name='user_profile',on_delete=models.CASCADE)
    profile_pic = models.ImageField(upload_to='profile_pic')

---------------------------------------
---------------------------------------
App_Login::forms.py=>
---------------------------------------
---------------------------------------
from django import forms 
from django.contrib.auth.forms import UserCreationForm, UserChangeForm 
from django.contrib.auth.models import User
from App_Login.models import UserProfile
class SignUpForm(UserCreationForm):
    email = forms.EmailField(label="Email Address", required=True)
    
    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')


#edit user profile
class UserProfileChange(UserChangeForm):
   
    
    class Meta:
        model = User 
        fields = ('username','email','first_name','last_name','password')

#change user profile:
class ProfilePic(forms.ModelForm):
    class Meta:
        model = UserProfile
        fields = ['profile_pic']
        
    
---------------------------------------
---------------------------------------
App_Login::views.py=>
---------------------------------------
---------------------------------------
from django.shortcuts import render
from django.contrib.auth.forms import  AuthenticationForm, PasswordChangeForm
from django.contrib.auth import login,authenticate,logout
from django.shortcuts import HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from App_Login.forms import SignUpForm, UserProfileChange, ProfilePic




def sing_up(request):
    form = SignUpForm()
    registered = False
    
    if request.method=='POST':
        form = SignUpForm(data=request.POST)
        if form.is_valid():
            form.save()
            registered = True
            
    dictionary = {'form':form, 'registered':registered}
    
    return render(request,'App_Login/sing_up.html',context=dictionary)


def log_in(request):
    form = AuthenticationForm()
    
    if request.method=="POST":
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            username= form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            
            user = authenticate(username=username,password=password)
            
            if user is not None: #if user exit in DataBase
                login(request,user)
                
                return HttpResponseRedirect(reverse('index'))
    
    return render(request,'App_Login/login.html',context={'form':form})

@login_required
def log_out(request):
    logout(request)
    
    return HttpResponseRedirect(reverse('index'))
    

@login_required 
def profile(request):
    dictionary = {}
    return render(request,'App_Login/profile.html',context=dictionary)

#edit user profile
@login_required
def user_change(request):
    current_user = request.user #this data comes from Model and  request.user <- this user is a global varibale , when user create profile then this varibale generated...
    form = UserProfileChange(instance=current_user)  #store runnig user valude from Model
    
    if request.method=='POST':
        form = UserProfileChange(request.POST, instance=current_user) #UserProfileChange(runnig data get from template, Model data )
        if form.is_valid():
            form.save()
            form = UserProfileChange(instance=current_user) #get the changing value form Model
        
    return render(request,'App_Login/change_profile.html',context={'form':form})

@login_required 
def passwd_change(request):
    changed= False
    current_user = request.user
    form = PasswordChangeForm(current_user)
    
    if request.method=='POST':
        form = PasswordChangeForm(current_user, data=request.POST)
        if form.is_valid():
            form.save()
            changed=True
    return render(request,'App_Login/password_change.html',context={'form':form,'changed':changed})


# @login_required
# def add_pro_pic(request): #add profile pic.
#     form = ProfilePic()
#     if request.method == 'POST':
#         form = ProfilePic(request.POST, request.FILES)
#         if form.is_valid():
#             user_obj= form.save(commit=False)
#             user_obj.user = request.user #select the user from model = current login user, cz in model 2 fields, 1 is user, 2 is profile_pic 
#             user_obj.save(commit=True)
#             return HttpResponseRedirect(reverse('App_Login:profile'))
            
#     return render(request,'App_Login/pro_pic_add.html',context={'form':form})



@login_required
def add_pro_pic(request):
    if request.method == 'POST':
        form = ProfilePic(request.POST, request.FILES)
        if form.is_valid():
            user_obj = form.save(commit=False)
            user_obj.user = request.user
            user_obj.save()
            return HttpResponseRedirect(reverse('App_Login:profile'))
    else:  # Handling the GET request case
        form = ProfilePic()

    return render(request, 'App_Login/pro_pic_add.html', context={'form': form})


@login_required
def change_pro_pic(request):
    if request.method == "POST":
        form = ProfilePic(request.POST, request.FILES, instance=request.user.user_profile)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(reverse('App_Login:profile'))
    else:  # Handling the GET request case
        form = ProfilePic(instance=request.user.user_profile)
    
    return render(request, 'App_Login/pro_pic_add.html', context={'form': form})

---------------------------------------
---------------------------------------
App_Login::urls.py=>
---------------------------------------
---------------------------------------
from django.urls import path
from App_Login import views




app_name='App_Login'

urlpatterns = [
    path('singup/',views.sing_up,name='sing_up'),
    path('login/',views.log_in,name='login'),
    path('logout/',views.log_out,name='logout'),
    path('profile/',views.profile,name='profile'),
    path('change_profile/', views.user_change, name='change_profile'),
    path('password/', views.passwd_change, name='pass_change'),
    path('add_picture/',views.add_pro_pic, name='add_pro_pic'),
    path('change_picture',views.change_pro_pic, name='change_pro_pic')

    
]

---------------------------------------
---------------------------------------
My_Blog_Project::urls.py=>
---------------------------------------
---------------------------------------
from django.contrib import admin
from django.urls import path, include
from App_Blog import urls
from . import views
from django.conf import settings
from django.contrib.staticfiles.urls import staticfiles_urlpatterns, static


urlpatterns = [
    path('admin/', admin.site.urls),
    path('account/', include('App_Login.urls')),
    path('blog/', include(('App_Blog.urls','App_Blog'),namespace='App_Blog')),
    path('', views.index, name='index'),
]


urlpatterns += staticfiles_urlpatterns()
urlpatterns += static( settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
---------------------------------------
---------------------------------------
App_Login::profile.html=>
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load static %}
{% block title %}
Profile
{% endblock %}
{% block body %}
<h3>Your Profile</h3>
{% if user.user_profile %}
 
    <!-- <img src="{{ user.user_profile.profile_pic.url }}" alt="No pic found" class="rounded-circle" width="100px"> -->
    <img src="/media/{{ user.user_profile.profile_pic}}" alt="No pic found" class="rounded-circle" width="100px" height="100px">
   <br> 
   <br>
   <a href="{% url 'App_Login:change_pro_pic' %}" class="btn btn-info btn-sm"> Change Profile Pic</a>
   
{% else %}

    <img src="/media/profile_pic/profile_pic_1.png" alt="No pic found avater" class="rounded-circle" width="100px">
    <!-- <img src="/media/profile_pic/profile_pic_2.png" alt="No pic found avater" class="rounded-circle" width="100px"> -->
    <br>
    <br>
<a href="{% url 'App_Login:add_pro_pic'%}" class="btn btn-info btn-sm"> Change Profile Pic</a>
{% endif %}

<p>UserName: {{ user.username }}</p>
<p>Email: {{ user.email }}</p>
<p>Name: {{ user.first_name }} {{ user.last_name }}</p>


<a href="{% url 'App_Login:change_profile' %}" class="btn btn-info"> Change Profile info</a>
{% endblock %}










---------------------------------------
---------------------------------------
App_Login::password_change.html=>
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title %}
Change Password
{% endblock %}

{% block body %}
{% if changed %}
<p class="alert alert-success">Successfully Password Changed !!!</p>
{% else %}
<h4>Change Password:</h4>
<form method="POST" action="{% url 'App_Login:pass_change' %}">
    {{ form|crispy }}
    {% csrf_token %}
    <button type="submit" class="btn btn-danger">Change Password</button>
</form>
{% endif %}
{% endblock %}

---------------------------------------
---------------------------------------
App_Login::change_profile.html=>
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags%}
{% block title%}
Change User Profile Data
{% endblock%}

{% block body%}

  <form method="POST">
    {{ form|crispy }}
    {% csrf_token %}
    
    <button type="submit" class="btn btn-danger" >Change Profile</button>
  </form>
  <a href="{% url 'App_Login:pass_change'%}">Change password : chat gpt custom link work!</a>

{% endblock %}
---------------------------------------
---------------------------------------
App_Login::pro_pic_add.html=>
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title %}
Change Profile Picture
{% endblock %}

{% block body %}

<h4>Change Profile Picture:</h4>
<form method="POST" enctype="multipart/form-data">
    {{ form|crispy }}
    {% csrf_token %}
    <button type="submit" class="btn btn-danger">Add Picture</button>
</form>
{% endblock %}

---------------------------------------
---------------------------------------
App_Login::login.html=> 
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title %}
LogIN
{% endblock %}

{% block body %}
<form action="" method="POST">

    {{ form|crispy }}
    {% csrf_token %}

    <input type="submit" name="submit" value="LogIn" class="btn btn-info">

</form>
{% endblock %}

---------------------------------------
---------------------------------------
App_Login::header.html=>
---------------------------------------
---------------------------------------
<nav class="navbar navbar-expand-sm navbar-light bg-light shadow-lg p-3 mb-5 bg-body rounded">
    <div class="container">
      <a class="navbar-brand" href="{% url 'App_Blog:blog_list'%}">Blog Logo</a>
      <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId"
          aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="collapsibleNavId">
          <ul class="navbar-nav me-auto mt-2 mt-lg-0">
              <li class="nav-item">
                  <a class="nav-link active" href="{% url 'App_Blog:blog_list'%}" aria-current="page">Home <span class="visually-hidden">(current)</span></a>
              </li>
            {% if user.is_authenticated%}
              <li class="nav-item">
                
                <a class="nav-link" href="{% url 'App_Login:logout' %}">Logout</a>
              </li>
              <li class="nav-item">
                
                <a class="nav-link" href="{% url 'App_Login:profile' %}">Profile</a>
              </li>
            {% else %}
              <li class="nav-item">
                  <a class="nav-link" href="{% url 'App_Login:sing_up' %}">Sing Up</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="{% url 'App_Login:login' %}">LogIn</a>
              </li>
            {% endif%}
           
              
          </ul>
          <form class="d-flex my-2 my-lg-0">
              <input class="form-control me-sm-2" type="text" placeholder="Search">
              <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
          </form>
      </div>
</div>
</nav>
---------------------------------------
---------------------------------------End User Profile----------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
----------------------------------------App Blog---------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
header.html=> 
--------------------
--------------------
<nav class="navbar navbar-expand-sm navbar-light bg-light shadow-lg p-1 mb-2 bg-body rounded">
    <div class="container">
      <a class="navbar-brand" href="{% url 'App_Blog:blog_list'%}">
        <img src="/media/blog_logo.png" alt="No Logo Found!" height="50px" width="80px">
      </a>
      <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId"
          aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="collapsibleNavId">
          <ul class="navbar-nav me-auto mt-2 mt-lg-0">
              <li class="nav-item">
                  <a class="nav-link active" href="{% url 'App_Blog:blog_list'%}" aria-current="page">Home <span class="visually-hidden">(current)</span></a>
              </li>
            <div class="collapse navbar-collapse" id="navbarNavDarkDropdown">
              <ul class="navbar-nav">
                <li class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    UserName=> {{user.username}}
                  </a>
                  <ul class="dropdown-menu dropdown-menu-info" aria-labelledby="navbarDarkDropdownMenuLink">
                    {% if user.is_authenticated%}
                    <li class="nav-item">
                      
                      <a class="nav-link" href="{% url 'App_Login:logout' %}">Logout</a>
                    </li>
                    <li class="nav-item">
                      
                      <a class="nav-link" href="{% url 'App_Login:profile' %}">Profile</a>
                    </li>
                  {% else %}
                  <li class="nav-item">
                    <a class="nav-link" href="{% url 'App_Login:sing_up' %}">Sing Up</a>
                  </li>
                  <li class="nav-item">
                     <a class="nav-link" href="{% url 'App_Login:login' %}">LogIn</a>
                  </li>
                  {%endif%}
                  </ul>
                </li>
              </ul>
            </div>
          </ul>
          <form class="d-flex my-2 my-lg-0">
              <input class="form-control me-sm-2" type="text" placeholder="Search">
              <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
          </form>
      </div>
</div>
</nav>
--------------------
--------------------
App_Blog:: models.py=>
--------------------
--------------------
from django.db import models
from django.contrib.auth.models import User


class Blog(models.Model):
    author = models.ForeignKey(User,related_name='post_author', on_delete=models.CASCADE) #relation with user table
    blog_title = models.CharField(max_length=259 , verbose_name='Put a Title')
    slug = models.SlugField(max_length=269, unique=True)
    blog_content = models.TextField(verbose_name='What is on Your Mind')
    blog_image = models.ImageField(upload_to='blog_image', verbose_name='Image')
    publish_date = models.DateTimeField(auto_now_add=True)
    update_date = models.DateTimeField(auto_now_add=True)
    
    class Meta: #show the blog as desecding order....
        ordering = ['-publish_date',]
    
    def __str__(self):
        return self.blog_title 

class Comment(models.Model):
    blog = models.ForeignKey(Blog,related_name='blog_comment',on_delete=models.CASCADE) #relation with blog table
    user = models.ForeignKey(User,related_name='user_comment',on_delete=models.CASCADE) #relation with user table
    comment = models.TextField()
    comment_date = models.DateTimeField(auto_now_add=True)
    
    class Meta: #show comment as desending order: 
        ordering = ('-comment_date',)
    
    def __str__(self):
        return self.comment
    
class Like(models.Model):
    blog = models.ForeignKey(Blog,related_name='like_blog',on_delete=models.CASCADE)
    user = models.ForeignKey(User,related_name='liker_user',on_delete=models.CASCADE)
    
    def __str__(self):
        return self.blog + " "+self.user
--------------------
--------------------
---------------------------------------
---------------------------------------
App_Blog::views.py=>
---------------------------------------
---------------------------------------
from django.shortcuts import render,HttpResponseRedirect
from django.urls import reverse,reverse_lazy 
from django.views.generic import ListView,View,TemplateView,CreateView,UpdateView,DetailView,DeleteView
from App_Blog.models import Blog,Comment,Like
from django.contrib.auth.decorators import login_required #for functional views only
from django.contrib.auth.mixins import LoginRequiredMixin #for Classbased views only
import uuid





# create Blogs:-------------------------------------------------

from django.utils.text import slugify
import uuid

class CreateBlog(LoginRequiredMixin, CreateView):
    model = Blog
    fields = ('blog_title', 'blog_content', 'blog_image')
    template_name = 'App_Blog/create_blog.html'
    
    def form_valid(self, form):
        blog_obj = form.save(commit=False)
        blog_obj.author = self.request.user
        
        # Generate a unique slug based on the title
        title = blog_obj.blog_title
        base_slug = slugify(title)
        unique_slug = base_slug + "-" + str(uuid.uuid4())[:8]
        blog_obj.slug = unique_slug
        
        
        
        blog_obj.save()
        return HttpResponseRedirect(reverse('index'))








#Read Blog---------------------------------------------------------

class BlogList(ListView):
    
    context_object_name = 'blogs'
    model =Blog 
    template_name = 'App_Blog/blog_list.html'
    # queryset = Blog.objects.order_by('-publish_date') # show the update blog


---------------------------------------
---------------------------------------
App_Blog::urls.py=>
---------------------------------------
---------------------------------------
from django.urls import path 
from App_Blog import views

#if use namespace than , not need to use => app_name = "App_Blog"

urlpatterns = [
    path('',views.BlogList.as_view(),name='blog_list'),
    path('write/',views.CreateBlog.as_view(),name='create_blog'),
]

---------------------------------------
---------------------------------------
My_Blog_Project::settings.py=>
---------------------------------------
---------------------------------------
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES_DIR = BASE_DIR / 'templates'

STATICS_DIR = BASE_DIR / 'static'

MEDIA_DIR = BASE_DIR / 'media'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-t$o(=s+xy(_$bw@clbh_u+o%nd3x7nb5+f0m%^99i*g8f)(rxc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'App_Login',
    'App_Blog',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_cleanup.apps.CleanupConfig',
    'autoslug', 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"







ROOT_URLCONF = 'My_Blog_Project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'My_Blog_Project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIR = [STATICS_DIR,]

#MEDIA:

MEDIA_URL = '/media/'
MEDIA_ROOT = MEDIA_DIR

LOGIN_URL = '/account/login/'



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

---------------------------------------
---------------------------------------
App_Blog::blog_create.html
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title %}
Blog Details
{% endblock %}

{% block body %}
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h4 class=" mt-4 text-center">Create Blog:</h4>
            <hr>
            <form  method="POST" enctype="multipart/form-data" class="p-4 m-2">
                {{form|crispy}}
                {% csrf_token %}
                <input type="submit" name="submit" value="Publish" class="btn btn-info btn-sm">
            </form>
        </div>
    </div>
</div>
{% endblock %}
---------------------------------------
---------------------------------------
App_Blog::blog_list.html=>
---------------------------------------
---------------------------------------
{% extends 'base.html'%}
{% load custom_filter %}
{% block titile %}
::Blog::
{% endblock %}

{% block body%}
    {% for blog in blogs%}
    <h3>{{blog.blog_title}}</h3>
    <h6><i>{{blog.publish_date}}</i></h6>
    <div class="row">
        <div class="col-sm-4">
            <img src="/media/{{blog.blog_image}}" alt="{{blog.title}}" width="100%">
        </div>
        <div class="col-sm-8">
            <p>{{blog.blog_content|range_filter|linebreaks}}</p>
            <h6>Posted By : <a href="#">{{blog.author}}</a></h6>
        </div>
    </div>
    <hr>
    {% endfor%}
{% endblock%}
---------------------------------------
---------------------------------------
App_Blog::templatetags::custom_filter.py=>
---------------------------------------
---------------------------------------
from django import template

register=template.Library()

def range_fillter(value):
    return value[:500] + '.....'

register.filter('range_filter',range_fillter)
---------------------------------------
---------------------------------------
header.html=>
---------------------------------------
---------------------------------------
<nav class="navbar navbar-expand-md navbar-light bg-light shadow-lg p-1 mb-2 bg-body rounded">
    <div class="container">
      <a class="navbar-brand" href="{% url 'App_Blog:blog_list'%}">
        <img src="/media/blog_logo.png" alt="No Logo Found!" height="50px" width="80px">
      </a>
      <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId"
          aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="collapsibleNavId">
          <ul class="navbar-nav me-auto mt-2 mt-lg-0">
              <li class="nav-item">
                  <a class="nav-link active" href="{% url 'App_Blog:blog_list'%}" aria-current="page">Home <span class="visually-hidden">(current)</span></a>
              </li>
            <div class="collapse navbar-collapse" id="navbarNavDarkDropdown">
              <ul class="navbar-nav">
                <li class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    UserName=> {{user.username}}
                  </a>
                  <ul class="dropdown-menu dropdown-menu-info" aria-labelledby="navbarDarkDropdownMenuLink">
                    {% if user.is_authenticated%}
                    <li class="nav-item">
                      
                      <a class="nav-link" href="{% url 'App_Blog:create_blog' %}">Create Blog</a>
                    </li>
                    <li class="nav-item">
                      
                      <a class="nav-link" href="{% url 'App_Login:profile' %}">Profile</a>
                    </li>
                    <hr>
                    <li class="nav-item">
                      
                      <a class="nav-link" href="{% url 'App_Login:logout' %}">Logout</a>
                    </li>
                    
                  {% else %}
                  <li class="nav-item">
                    <a class="nav-link" href="{% url 'App_Login:sing_up' %}">Sing Up</a>
                  </li>
                  <li class="nav-item">
                     <a class="nav-link" href="{% url 'App_Login:login' %}">LogIn</a>
                  </li>
                  {%endif%}
                  </ul>
                </li>
              </ul>
            </div>
          </ul>
          <form class="d-flex my-2 my-lg-0">
              <input class="form-control me-sm-2" type="text" placeholder="Search">
              <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
          </form>
      </div>
</div>
</nav>


---------------------------------------
---------------------------------------
---------------------------------------


-------------------------------------------------------------------------------------------------------------------------
------------------------------------------------App_Blog::Comment------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
App_Blog::models.py->
---------------------------------------
---------------------------------------
from django.db import models
from django.contrib.auth.models import User


class Blog(models.Model):
    author = models.ForeignKey(User,related_name='post_author', on_delete=models.CASCADE) #relation with user table
    blog_title = models.CharField(max_length=259 , verbose_name='Put a Title')
    slug = models.SlugField(max_length=269, unique=True)
    blog_content = models.TextField(verbose_name='What is on Your Mind')
    blog_image = models.ImageField(upload_to='blog_image', verbose_name='Image')
    publish_date = models.DateTimeField(auto_now_add=True)
    update_date = models.DateTimeField(auto_now_add=True)
    
    class Meta: #show the blog as desecding order....
        ordering = ['-publish_date',]
    
    def __str__(self):
        return self.blog_title 

class Comment(models.Model):
    blog = models.ForeignKey(Blog,related_name='blog_comment',on_delete=models.CASCADE) #relation with blog table
    user = models.ForeignKey(User,related_name='user_comment',on_delete=models.CASCADE) #relation with user table
    comment = models.TextField()
    comment_date = models.DateTimeField(auto_now_add=True)
    
    class Meta: #show comment as desending order: 
        ordering = ('-comment_date',)
    
    def __str__(self):
        return self.comment
    
class Like(models.Model):
    blog = models.ForeignKey(Blog,related_name='like_blog',on_delete=models.CASCADE)
    user = models.ForeignKey(User,related_name='liker_user',on_delete=models.CASCADE)
    
    def __str__(self):
        return self.blog + " "+self.user
---------------------------------------
---------------------------------------
App_Blog::forms.py=>
---------------------------------------
---------------------------------------
from django import forms
from App_Blog.models import Comment

class CommentForm(forms.ModelForm):
    class Meta:
        model=Comment
        fields= ('comment',)

---------------------------------------
---------------------------------------
---------------------------------------
App_Blog::views.py=>
---------------------------------------
---------------------------------------
from django.shortcuts import render,HttpResponseRedirect
from django.urls import reverse,reverse_lazy 
from django.views.generic import ListView,View,TemplateView,CreateView,UpdateView,DetailView,DeleteView
from App_Blog.models import Blog,Comment,Like
from django.contrib.auth.decorators import login_required #for functional views only
from django.contrib.auth.mixins import LoginRequiredMixin #for Classbased views only
import uuid

from App_Blog.forms import CommentForm





# create Blogs:-------------------------------------------------

from django.utils.text import slugify
import uuid

class CreateBlog(LoginRequiredMixin, CreateView):
    model = Blog
    fields = ('blog_title', 'blog_content', 'blog_image')
    template_name = 'App_Blog/create_blog.html'
    
    def form_valid(self, form):
        blog_obj = form.save(commit=False)
        blog_obj.author = self.request.user
        
        # Generate a unique slug based on the title
        title = blog_obj.blog_title
        base_slug = slugify(title)
        unique_slug = base_slug + "-" + str(uuid.uuid4())[:8]
        blog_obj.slug = unique_slug
        
        
        
        blog_obj.save()
        return HttpResponseRedirect(reverse('index'))








#Read Blog---------------------------------------------------------

class BlogList(ListView):
    
    context_object_name = 'blogs'
    model =Blog 
    template_name = 'App_Blog/blog_list.html'
    # queryset = Blog.objects.order_by('-publish_date') # show the update blog


@login_required
def BlogDetails(request, slug):
    blog = Blog.objects.get(slug=slug)

    if request.method == 'POST':
        comment_form = CommentForm(request.POST)  # Create an instance of CommentForm
        if comment_form.is_valid():
            comment = comment_form.save(commit=False)
            comment.user = request.user
            comment.blog = blog
            comment.save()
            return HttpResponseRedirect(reverse('App_Blog:details_blog', kwargs={'slug':slug}))
    else:
        comment_form = CommentForm()  # Create a new instance of CommentForm for GET requests

    return render(request, 'App_Blog/blog_details.html', context={'blog':blog, 'comment_form':comment_form})




---------------------------------------
---------------------------------------
App_Blog:: urls.py=>
---------------------------------------
---------------------------------------
from django.urls import path 
from App_Blog import views


#if use namespace than , not need to use => app_name = "App_Blog"

urlpatterns = [
    path('',views.BlogList.as_view(),name='blog_list'),
    path('write/',views.CreateBlog.as_view(),name='create_blog'),
    path('details/<slug:slug>/',views.BlogDetails, name='details_blog'),
    
]

---------------------------------------
---------------------------------------
App_Blog::blog_list.html=>
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load custom_filter %}

{% block title %}
::Blog::
{% endblock %}

{% block body %}
    {% for blog in blogs %}
    <h3>{{ blog.blog_title }}</h3>
    <h6><i>{{ blog.publish_date }}</i></h6>
    <div class="row">
        <div class="col-sm-4">
            <img src="/media/{{ blog.blog_image }}" alt="{{ blog.title }}" width="100%">
        </div>
        <div class="col-sm-8">
            <p>{{ blog.blog_content|range_filter|linebreaks }} 
                {% if blog.slug %} 
                    <a href="{% url 'App_Blog:details_blog' slug=blog.slug  %}">Read More...</a>
                {% endif %}
            </p>
           
            
            <h6>Posted By: <a href="#">{{ blog.author }}</a></h6>
        </div>
    </div>
    <hr>
    {% endfor %}
{% endblock %}

---------------------------------------
---------------------------------------
App_Blog::blog_details.html=>
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}
{% block title %}
 {{blog.blog_title}}
{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-sm-6">
            <h2>{{blog.blog_title}}</h2>
            <h4>Posted By: {{blog.author}}</h4>
            <h6>Published on : {{blog.publish_date}}</h6>
            <h6>Updated on : {{blog.updtae_date}}</h6>
        </div>
        <div class="col-sm-6">
            <img src="/media/{{blog.blog_image}}" alt="{{blog.blog_title}}" class="img-thumbnail">
        </div>
        <p>
            {{blog.blog_content|linebreaks}}
        </p>
    </div>
    <div class="row">
        <div class="col-sm-6 border-end">
            <hr>
            <h5 class="text-center">Comments</h5>
            <hr>
            {% for comment in blog.blog_comment.all%}
                <a href="#"> @{{comment.user}}</a>
                <p>{{comment.comment}} <br>
                 <h6>{{comment.comment_date}}</h6> 
                </p>
                <br>
            {% endfor %}
        </div>
        <div class="col-sm-6">
            <form action="" method="POST">
                {% csrf_token %}
                {{comment_form|crispy}}
                <input type="submit" name="submit" value="Comment" class="btn btn-secondary">
            </form>
        </div>
    </div>
{% endblock %}
---------------------------------------
---------------------------------------



-----------------------------------------------End Comment--------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
------------------------------------------App_Blog : Like/UnLike-------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
---------------------------------------
App_Blog::views.py=> 
---------------------------------------
---------------------------------------
from django.shortcuts import render,HttpResponseRedirect
from django.urls import reverse,reverse_lazy 
from django.views.generic import ListView,View,TemplateView,CreateView,UpdateView,DetailView,DeleteView
from App_Blog.models import Blog,Comment,Like
from django.contrib.auth.decorators import login_required #for functional views only
from django.contrib.auth.mixins import LoginRequiredMixin #for Classbased views only
import uuid

from App_Blog.forms import CommentForm





# create Blogs:-------------------------------------------------

from django.utils.text import slugify
import uuid

class CreateBlog(LoginRequiredMixin, CreateView):
    model = Blog
    fields = ('blog_title', 'blog_content', 'blog_image')
    template_name = 'App_Blog/create_blog.html'
    
    def form_valid(self, form):
        blog_obj = form.save(commit=False)
        blog_obj.author = self.request.user
        
        # Generate a unique slug based on the title
        title = blog_obj.blog_title
        base_slug = slugify(title)
        unique_slug = base_slug + "-" + str(uuid.uuid4())[:8]
        blog_obj.slug = unique_slug
        
        
        
        blog_obj.save()
        return HttpResponseRedirect(reverse('index'))








#Read Blog---------------------------------------------------------

class BlogList(ListView):
    
    context_object_name = 'blogs'
    model =Blog 
    template_name = 'App_Blog/blog_list.html'
    # queryset = Blog.objects.order_by('-publish_date') # show the update blog


@login_required
def BlogDetails(request, slug):
    blog = Blog.objects.get(slug=slug)

    already_like = Like.objects.filter(user=request.user, blog=blog)
    if already_like:
        liked = True
    else:
        liked = False

    if request.method == 'POST':
        comment_form = CommentForm(request.POST)  # Create an instance of CommentForm
        if comment_form.is_valid():
            comment = comment_form.save(commit=False)
            comment.user = request.user
            comment.blog = blog
            comment.save()
            return HttpResponseRedirect(reverse('App_Blog:details_blog', kwargs={'slug':slug}))
    else:
        comment_form = CommentForm()  # Create a new instance of CommentForm for GET requests

    return render(request, 'App_Blog/blog_details.html', context={'blog':blog, 'comment_form':comment_form, 'liked':liked})



@login_required
def like(request,pk):
    blog = Blog.objects.get(pk=pk)
    user = request.user
    already_like = Like.objects.filter(user=user,blog=blog)
    if not already_like:
        like_post = Like(user=user,blog=blog)
        like_post.save()
    return HttpResponseRedirect(reverse('App_Blog:details_blog', kwargs={'slug':blog.slug}))

@login_required
def unlike(request,pk):
    blog = Blog.objects.get(pk=pk)
    user = request.user
    already_like = Like.objects.filter(user=user,blog=blog)
    already_like.delete()
    return HttpResponseRedirect(reverse('App_Blog:details_blog', kwargs={'slug':blog.slug}))


---------------------------------------
---------------------------------------
App_Blog::urls.py=>
---------------------------------------
---------------------------------------
from django.urls import path 
from App_Blog import views


#if use namespace than , not need to use => app_name = "App_Blog"

urlpatterns = [
    path('',views.BlogList.as_view(),name='blog_list'),
    path('write/',views.CreateBlog.as_view(),name='create_blog'),
    path('details/<slug:slug>/',views.BlogDetails, name='details_blog'),
    path('like/<pk>',views.like,name='like_post'),
    path('unlike/<pk>',views.unlike,name='unlike_post'),
    
]

---------------------------------------
---------------------------------------
App_Blog::blog_details.html=>
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}
{% block title %}
 {{blog.blog_title}}
{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-sm-6">
            <h2>{{blog.blog_title}}</h2>
            <h4>Posted By: {{blog.author}}</h4>
            <h6>Published on : {{blog.publish_date}}</h6>
            <h6>Updated on : {{blog.updtae_date}}</h6>
            <h6>{{blog.like_blog.count}} Like | {{blog.blog_comment.count}} Comment </h6>
        </div>
        <div class="col-sm-6">
            <img src="/media/{{blog.blog_image}}" alt="{{blog.blog_title}}" class="img-thumbnail">
        </div>
        <p>
            {{blog.blog_content|linebreaks}}
        </p>
    </div>
    {% if not liked%}
    <a href="{% url 'App_Blog:like_post' pk=blog.pk %}" class="text-decoration-none text-dark">
        Like Now <i class="fa-regular fa-thumbs-up fa-fade fa-2xl"></i>
    </a>
    {% else %}
    &nbsp;
     <a href="{% url 'App_Blog:unlike_post' pk=blog.pk %}" class="text-decoration-none text-dark">
        Disike Now <i class="fa-regular fa-thumbs-down fa-fade fa-2xl"></i>
    </a>
    {% endif %}
    <div class="row">
        <div class="col-sm-6 border-end">
            <hr>
            <h5 class="text-center">Comments</h5>
            <hr>
            {% for comment in blog.blog_comment.all%}
                <a href="#"> @{{comment.user}}</a>
                <p>{{comment.comment}} <br>
                 <h6>{{comment.comment_date}}</h6> 
                </p>
                <br>
            {% endfor %}
        </div>
        <div class="col-sm-6">
            <form action="" method="POST">
                {% csrf_token %}
                {{comment_form|crispy}}
                <input type="submit" name="submit" value="Comment" class="btn btn-secondary">
            </form>
        </div>
    </div>
{% endblock %}
---------------------------------------
---------------------------------------
App_Blog::blog_list.html->
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load custom_filter %}

{% block title %}
::Blog::
{% endblock %}

{% block body %}
    {% for blog in blogs %}
    <h3>{{ blog.blog_title }}</h3>
    <h6><i>{{ blog.publish_date }}</i></h6>
    <div class="row">
        <div class="col-sm-4">
            <img src="/media/{{ blog.blog_image }}" alt="{{ blog.title }}" width="100%">
        </div>
        <div class="col-sm-8">
            <p>{{ blog.blog_content|range_filter|linebreaks }} 
                {% if blog.slug %} 
                    <a href="{% url 'App_Blog:details_blog' slug=blog.slug  %}">Read More...</a>
                {% endif %}
            </p>
           
            
            <h6>Posted By: <a href="#">{{ blog.author }}</a></h6>
            <h6>{{blog.like_blog.count}} Like | {{blog.blog_comment.count}} Comment </h6>
        </div>
    </div>
    <hr>
    {% endfor %}
{% endblock %}




---------------------------------------
---------------------------------------
-------------------------------------------End Like/UnLike------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------Edit Blog------------------------------------------------------------------------------
---------------------------------------
---------------------------------------
App_Blog::views.py=>
---------------------------------------
---------------------------------------
from django.shortcuts import render,HttpResponseRedirect
from django.urls import reverse,reverse_lazy 
from django.views.generic import ListView,View,TemplateView,CreateView,UpdateView,DetailView,DeleteView
from App_Blog.models import Blog,Comment,Like
from django.contrib.auth.decorators import login_required #for functional views only
from django.contrib.auth.mixins import LoginRequiredMixin #for Classbased views only
import uuid

from App_Blog.forms import CommentForm



#show user's own blogs : ---------------------------------------

class MyBlog(LoginRequiredMixin, TemplateView):

    template_name = 'App_Blog/my_blog.html'


# create Blogs:-------------------------------------------------

from django.utils.text import slugify
import uuid

class CreateBlog(LoginRequiredMixin, CreateView):
    model = Blog
    fields = ('blog_title', 'blog_content', 'blog_image')
    template_name = 'App_Blog/create_blog.html'
    
    def form_valid(self, form):
        blog_obj = form.save(commit=False)
        blog_obj.author = self.request.user
        
        # Generate a unique slug based on the title
        title = blog_obj.blog_title
        base_slug = slugify(title)
        unique_slug = base_slug + "-" + str(uuid.uuid4())[:8]
        blog_obj.slug = unique_slug
        
        
        
        blog_obj.save()
        return HttpResponseRedirect(reverse('index'))








#Read Blog---------------------------------------------------------

class BlogList(ListView):
    
    context_object_name = 'blogs'
    model =Blog 
    template_name = 'App_Blog/blog_list.html'
    # queryset = Blog.objects.order_by('-publish_date') # show the update blog


@login_required
def BlogDetails(request, slug):
    blog = Blog.objects.get(slug=slug)

    already_like = Like.objects.filter(user=request.user, blog=blog)
    if already_like:
        liked = True
    else:
        liked = False

    if request.method == 'POST':
        comment_form = CommentForm(request.POST)  # Create an instance of CommentForm
        if comment_form.is_valid():
            comment = comment_form.save(commit=False)
            comment.user = request.user
            comment.blog = blog
            comment.save()
            return HttpResponseRedirect(reverse('App_Blog:details_blog', kwargs={'slug':slug}))
    else:
        comment_form = CommentForm()  # Create a new instance of CommentForm for GET requests

    return render(request, 'App_Blog/blog_details.html', context={'blog':blog, 'comment_form':comment_form, 'liked':liked})





class UpdateBlog(LoginRequiredMixin, UpdateView):
    model = Blog
    fields = ('blog_title','blog_content','blog_image')
    template_name = 'App_Blog/edit_blog.html'

    def get_success_url(self):
        return reverse_lazy('App_Blog:details_blog', kwargs={'slug': self.object.slug})




@login_required
def like(request,pk):
    blog = Blog.objects.get(pk=pk)
    user = request.user
    already_like = Like.objects.filter(user=user,blog=blog)
    if not already_like:
        like_post = Like(user=user,blog=blog)
        like_post.save()
    return HttpResponseRedirect(reverse('App_Blog:details_blog', kwargs={'slug':blog.slug}))

@login_required
def unlike(request,pk):
    blog = Blog.objects.get(pk=pk)
    user = request.user
    already_like = Like.objects.filter(user=user,blog=blog)
    already_like.delete()
    return HttpResponseRedirect(reverse('App_Blog:details_blog', kwargs={'slug':blog.slug}))


---------------------------------------
---------------------------------------
App_Blog::urls.py=> 
---------------------------------------
from django.urls import path 
from App_Blog import views


#if use namespace than , not need to use => app_name = "App_Blog"

urlpatterns = [
    path('',views.BlogList.as_view(),name='blog_list'),
    path('write/',views.CreateBlog.as_view(),name='create_blog'),
    path('details/<slug:slug>/',views.BlogDetails, name='details_blog'),
    path('like/<pk>',views.like,name='like_post'),
    path('unlike/<pk>',views.unlike,name='unlike_post'),
    path('my_blogs/',views.MyBlog.as_view(),name='my_blog'),
    path('edit_blog/<int:pk>/', views.UpdateBlog.as_view(), name='edit_blog'),
    # path('edit_blog/<pk>',views.UpdateBlog.as_view(),name='edit_blog'),
    
]

---------------------------------------
---------------------------------------
App_Blog::models.py=> 
---------------------------------------
---------------------------------------
from django.db import models
from django.contrib.auth.models import User


class Blog(models.Model):
    author = models.ForeignKey(User,related_name='post_author', on_delete=models.CASCADE) #relation with user table
    blog_title = models.CharField(max_length=259 , verbose_name='Put a Title')
    slug = models.SlugField(max_length=269, unique=True)
    blog_content = models.TextField(verbose_name='What is on Your Mind')
    blog_image = models.ImageField(upload_to='blog_image', verbose_name='Image')
    publish_date = models.DateTimeField(auto_now_add=True)
    update_date = models.DateTimeField(auto_now_add=True)
    
    class Meta: #show the blog as desecding order....
        ordering = ['-publish_date',]
    
    def __str__(self):
        return self.blog_title 

class Comment(models.Model):
    blog = models.ForeignKey(Blog,related_name='blog_comment',on_delete=models.CASCADE) #relation with blog table
    user = models.ForeignKey(User,related_name='user_comment',on_delete=models.CASCADE) #relation with user table
    comment = models.TextField()
    comment_date = models.DateTimeField(auto_now_add=True)
    
    class Meta: #show comment as desending order: 
        ordering = ('-comment_date',)
    
    def __str__(self):
        return self.comment
    
class Like(models.Model):
    blog = models.ForeignKey(Blog,related_name='like_blog',on_delete=models.CASCADE)
    user = models.ForeignKey(User,related_name='liker_user',on_delete=models.CASCADE)
    
    def __str__(self):
        return self.blog + " "+self.user
---------------------------------------
---------------------------------------
App_Blog::edit_blog.html=> 
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title %}
    Edit {{ blog.blog_title }}
{% endblock %}

{% block body %}
{% if blog.author == user %}
<form method="POST" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form|crispy }}
    <input type="submit" name="submit" value="Update" class="btn btn-sm btn-success">
</form>
{% else %}
<p>You are not allowed to view this page. Error 404.</p>
{% endif %}
{% endblock %}

---------------------------------------
---------------------------------------
App_Blog::my_blog.html=> 
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load custom_filter %}

{% block title %}
::My Blog | {{user}} ::
{% endblock %}

{% block body %}
    {% for blog in user.post_author.all %}
    <h3>{{ blog.blog_title }}</h3>
    <h6><i>{{ blog.publish_date }}</i></h6>
    <div class="row">
        <div class="col-sm-4">
            <img src="/media/{{ blog.blog_image }}" alt="{{ blog.title }}" width="100%">
        </div>
        <div class="col-sm-8">
            <p>{{ blog.blog_content|range_filter|linebreaks }} 
                {% if blog.slug %} 
                    <a href="{% url 'App_Blog:details_blog' slug=blog.slug  %}">Read More...</a>
                    <a href="{% url 'App_Blog:edit_blog' pk=blog.pk%}">Edit </a>
                {% endif %}
            </p>
           
            
            <h6>Posted By: <a href="#">{{ blog.author }}</a></h6>
            <h6>{{blog.like_blog.count}} Like | {{blog.blog_comment.count}} Comment </h6>
        </div>
    </div>
    
    <hr>
    {% endfor %}
{% endblock %}
---------------------------------------
---------------------------------------
App_Blog::blog_list.html=> 
---------------------------------------
---------------------------------------
{% extends 'base.html' %}
{% load custom_filter %}

{% block title %}
::Blog::
{% endblock %}

{% block body %}
    {% for blog in blogs %}
    <h3>{{ blog.blog_title }}</h3>
    <h6><i>{{ blog.publish_date }}</i></h6>
    <div class="row">
        <div class="col-sm-4">
            <img src="/media/{{ blog.blog_image }}" alt="{{ blog.title }}" width="100%">
        </div>
        <div class="col-sm-8">
            <p>{{ blog.blog_content|range_filter|linebreaks }} 
                {% if blog.slug %} 
                    <a href="{% url 'App_Blog:details_blog' slug=blog.slug  %}">Read More...</a>
                {% endif %}
            </p>
           
            
            <h6>Posted By: <a href="#">{{ blog.author }}</a></h6>
            <h6>{{blog.like_blog.count}} Like | {{blog.blog_comment.count}} Comment </h6>
        </div>
    </div>
    <hr>
    {% endfor %}
{% endblock %}

---------------------------------------
---------------------------------------
header.html=> 
---------------------------------------
---------------------------------------
<nav class="navbar navbar-expand-md navbar-light bg-light shadow-lg p-1 mb-2 bg-body rounded">
    <div class="container">
      <a class="navbar-brand" href="{% url 'App_Blog:blog_list'%}">
        <img src="/media/blog_logo.png" alt="No Logo Found!" height="50px" width="80px">
      </a>
      <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId"
          aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="collapsibleNavId">
          <ul class="navbar-nav me-auto mt-2 mt-lg-0">
              <li class="nav-item my-auto">
                  <a class="nav-link active" href="{% url 'App_Blog:blog_list'%}" aria-current="page">Home <span class="visually-hidden">(current)</span></a>
              </li>
              
            <div class="collapse navbar-collapse" id="navbarNavDarkDropdown">
              <ul class="navbar-nav">
                <li class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    
                    @{{user.username}}
                    {% if user.user_profile %}
 
                            <!-- <img src="{{ user.user_profile.profile_pic.url }}" alt="No pic found" class="rounded-circle" width="100px"> -->
                          <img src="/media/{{ user.user_profile.profile_pic}}" alt="No pic found" class="rounded-circle" width="50px" height="50px">
      
                          
                        {% else %}

                            <!-- <img src="/media/profile_pic/profile_pic_1.png" alt="No pic found avater" class="rounded-circle" width="50px" height="50px"> -->
                            <!-- <img src="/media/profile_pic/profile_pic_2.png" alt="No pic found avater" class="rounded-circle" width="100px"> -->
                           
                        
                        {% endif %}
                  </a>
                  <ul class="dropdown-menu dropdown-menu-info" aria-labelledby="navbarDarkDropdownMenuLink">
                    {% if user.is_authenticated%}
                    <li class="nav-item">
                      
                      <a class="nav-link" href="{% url 'App_Blog:create_blog' %}">Create Blog</a>
                    </li>
                    <li class="nav-item">
                      
                      <a class="nav-link" href="{% url 'App_Blog:my_blog' %}">My Blog</a>
                    </li>
                    <li class="nav-item">
                      
                      <a class="nav-link" href="{% url 'App_Login:profile' %}">Profile</a>
                    </li>
                    <hr>
                    <li class="nav-item">
                      
                      <a class="nav-link" href="{% url 'App_Login:logout' %}">Logout</a>
                    </li>
                    
                  {% else %}
                  <li class="nav-item">
                    <a class="nav-link" href="{% url 'App_Login:sing_up' %}">Sing Up</a>
                  </li>
                  <li class="nav-item">
                     <a class="nav-link" href="{% url 'App_Login:login' %}">LogIn</a>
                  </li>
                  {%endif%}
                  </ul>
                </li>
              </ul>
            </div>
          </ul>
          <form class="d-flex my-2 my-lg-0">
              <input class="form-control me-sm-2" type="text" placeholder="Search">
              <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
          </form>
      </div>
</div>
</nav>


---------------------------------------
---------------------------------------

-------------------------------------------End Edit Blog------------------------------------------------------------------------------
--------------------------------------End My_Blog_Project-----------------------------------------------------------------------------------