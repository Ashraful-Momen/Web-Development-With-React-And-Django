>>> python -m venv env
>>> django-admin startproject ecommerce_project
>>> python manage.py startapp App_Login
>>> python manage.py startapp App_Shop
>>> create forder > templates > App_Login
>>> create forder > templates > App_Shop
---------------------------------------------------------------------------------------------
settings.py=> 
--------------
"""
Django settings for ecommerce_project project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES_DIR = BASE_DIR / 'templates'
MEDIA_DIR = BASE_DIR / 'media'
STATIC_DIR = BASE_DIR / 'static'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gsxb02i@i^^7fmyjw8)kvn#npn6na^vt(#i3vh72+x4ra3b3cg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "crispy_forms",
    "crispy_bootstrap5",
    "App_Login",
    "App_Shop",
]
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIR = [STATIC_DIR]

MEDIA_URL = '/media/'
MEDIA_ROOT = MEDIA_DIR

LOGIN_URL = '/accounts/login/' #if login not required then redirect to Login page.

AUTH_USER_MODEL = 'App_Login.User' 

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

-------------------------------------
-------------------------------------
ecommerce_project::urls.py=> 
-------------------------------------
from django.contrib import admin
from django.urls import path,include

from django.conf import settings
from django.contrib.staticfiles.urls import staticfiles_urlpatterns, static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('App_Shop.urls')),
    path('accounts/', include('App_Login.urls')),
    
]


urlpatterns += staticfiles_urlpatterns()
urlpatterns += static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)
-------------------------------------
-------------------------------------
App_Login::urls.py=> 
-------------------------------------
from django.urls import path 

app_name = 'App_Login'

urlpatterns = [
    
]

-------------------------------------
App_Shop::urls.py=> 
-------------------------------------
from django.urls import path 

app_name = 'App_Shop'

urlpatterns = [
    
]

-------------------------------------
-------------------------------------
App_Login::models.py-> 
-------------------------------------
from django.db import models
from django.contrib.auth.models import BaseUserManager, AbstractBaseUser, PermissionsMixin
from django.db.models.signals import post_save
from django.dispatch import receiver

class MyUserManager(BaseUserManager):
    def _create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_user(self, email, password=None, **extra_fields):
        return self._create_user(email, password, **extra_fields)

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True')

        return self._create_user(email, password, **extra_fields)

class User(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = MyUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    def __str__(self):
        return self.email

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    user_name = models.CharField(max_length=200, blank=True)
    full_name = models.CharField(max_length=200, blank=True)
    address_1 = models.TextField(max_length=300, blank=True)
    city = models.CharField(max_length=264, blank=True)
    zip_code = models.CharField(max_length=10, blank=True)
    country = models.CharField(max_length=50, blank=True)
    date_joined = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.email}'s profile"

    def is_full_filled(self):
        field_names = [f.name for f in self._meta.get_fields()]

        for field_name in field_names:
            value = getattr(self, field_name)
            if value is None or value == "":
                return False
        return True

@receiver(post_save, sender=User)
def create_or_update_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)
    else:
        instance.profile.save()

-------------------------------------
-------------------------------------
App_Login::admin.py=> 
-------------------------------------
from django.contrib import admin
from App_Login.models import Profile,User
# Register your models here.


admin.register(User)
admin.register(Profile)
-------------------------------------
-------------------------------------
>>> python manage.py makemigrations App_Login
>>> python manage.py migrate 
>>> python manage.py createsuperuser 
-------------------------------------

---------------------------------------------------------------------------------------------
----------------------------form.py-----------------------------------------------------------------
App_Login::form.py=> 
---------------------

from django.forms import ModelForm
from .models import User,Profile

from django.contrib.auth.forms import UserCreationForm


class ProfileFrom(ModelForm): 
    class Meta: 
        model = Profile 
        exclude = ('user',)


class SignupForm(UserCreationForm): 
    class Meta: 
        model = User 
        fields = ('email', 'password1', 'password2')
        
---------------------------------------------------------------------------------------------
App_Login::urls.py=> 
-----------------------
from django.urls import path 
from App_Login import  views 

app_name = 'App_Login'

urlpatterns = [
    path('singup/', views.sign_up, name='singup' ),
    path('login/',views.login_user, name='login'),
    path('logout/',views.logout, name='logout'),
]

-----------------------
App_Login::views.py=> 
-----------------------
from django.shortcuts import render,HttpResponseRedirect,HttpResponse
from django.urls import reverse

from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login,logout, authenticate

from App_Login.models import Profile
from App_Login.forms import ProfileFrom,SignupForm

# Create your views here.


def sign_up(request): 
    form = SignupForm()

    if request.method == 'POST': 
        form = SignupForm(request.POST)
        if form.is_valid(): 
            form.save()
            return HttpResponseRedirect(reverse('App_Login:login'))
    return render(request,'App_Login/sing_up.html', context={'form':form})
   
 
def login_user(request):
   form = AuthenticationForm() 
   if request.method == 'POST': 
       form = AuthenticationForm(data=request.POST)
       if form.is_valid(): 
           username = form.cleaned_data.get('username')
           password = form.cleaned_data.get('password')
           user = authenticate(username=username, password=password)
           if user is not None:
               login(request, user)
               return HttpResponse('Logged in')
   return render(request, 'App_Login/login.html', context={'form': form})

 

@login_required
def logout_user(request): 
    logout(request)
    return HttpResponse('Logout')

def hello(requst): 
    return HttpResponse("Welcome")
---------------------------------------------------------------------------------------------
-----------------------------------base.html----------------------------------------------------------
{% load static %}
<!doctype html>
<html lang="en">

<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
    {% comment %} Custom Css  {% endcomment %}
    <link rel='stylesheet' src="{% static 'css/main.css' %}">
    <title>
        {
        {% block title %}
            Ecommerce
        {% endblock  %}
            }
    </title>
    
</head>

<body>
  <div class="container">
    {% block body_block%}
    
    {% endblock %}
    
  </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>

---------------------------------------------------------------------------------------------
------------------------------------sing_up.html---------------------------------------------------------
{% extends 'base.html' %}

{% load crispy_forms_tags %}


{% block title %}
    <p>SignUp Form</p>
{% endblock  %}


{% block body_block %}
<h2>Create New Account</h2>
<form method="POST">
    {{form|crispy}}
    {% csrf_token %}

    <button type="submit" class="btn btn-success btn-sm" >Create Account</button>


</form>  
<br>
<p>Already Have an Account <a href="{% url 'App_Login:login' %}">Login Here</a></p>

{% endblock  %}
    
------------------------------------login_user.html---------------------------------------------------------
{% extends 'base.html' %}

{% load crispy_forms_tags %}


{% block title %}
    <p>Login Form</p>
{% endblock  %}


{% block body_block %}
<!-- <h2>Create New Account</h2> -->
<form method="POST">
    {{form|crispy}}
    {% csrf_token %}

    <button type="submit" class="btn btn-success btn-sm" >Login</button>


</form>  
<br>
<p>Doesn't Have an Account <a href="{% url 'App_Login:singup' %}">Create Account Here</a></p>

{% endblock  %}
    
------------------------------------------------------------------------------------------------------------
---------------------------------------User Profile & Message---------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App_Login::urls.py=> 
========================

from django.urls import path 
from App_Login import  views 

app_name = 'App_Login'

urlpatterns = [
    path('singup/', views.sign_up, name='singup' ),
    path('login/',views.login_user, name='login'),
    path('logout/',views.logout_user, name='logout'),
    path('profile/', views.profile_user, name='profile'),
]
========================
App_Login::views.py=> 
========================
from django.shortcuts import render,HttpResponseRedirect,HttpResponse
from django.urls import reverse

from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login,logout, authenticate

from App_Login.models import Profile
from App_Login.forms import ProfileFrom,SignupForm

from django.contrib import messages

# Create your views here.


def sign_up(request): 
    form = SignupForm()

    if request.method == 'POST': 
        form = SignupForm(request.POST)
        if form.is_valid(): 
            form.save()
            messages.success(request, "Account Created SuccessFully!")
            return HttpResponseRedirect(reverse('App_Login:login'))
    return render(request,'App_Login/sing_up.html', context={'form':form})
   
 
def login_user(request):
   form = AuthenticationForm() 
   if request.method == 'POST': 
       form = AuthenticationForm(data=request.POST)
       if form.is_valid(): 
           username = form.cleaned_data.get('username')
           password = form.cleaned_data.get('password')
           user = authenticate(username=username, password=password)
           if user is not None:
               login(request, user)
               return HttpResponse('Logged in')
   return render(request, 'App_Login/login.html', context={'form': form})

 

@login_required
def logout_user(request): 
    logout(request)
    messages.warning(request,"Logout Successfully!")
    return HttpResponseRedirect(reverse('App_Login:login'))


@login_required
def profile_user(request): 
    profile = Profile.objects.get(user=request.user) 

    form = ProfileFrom(instance=profile)
    if request.method == "POST": 
        form = ProfileFrom(request.POST, instance=profile)
        if form.is_valid(): 
            form.save()
            messages.success(request,"Profile Changed Successfully!")
            form = ProfileFrom(instance=profile)
    return render(request,'App_Login/change_profile.html',context={'form': form})

========================
templates/base.html=> 
========================
{% load static %}
<!doctype html>
<html lang="en">

<head>
  <title>{% block title %}Ecommerce{% endblock %}</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
  <!-- Custom Css -->
  <link rel='stylesheet' href="{% static 'css/main.css' %}">
</head>

<body>
  <div class="container" style="padding-top: 15px;">
    <div class="message container mt-2">
      {% if messages %}
        {% for message in messages %}
          <div {% if message.tags %} class="alert alert-{{message.tags}} alert-dismissible fade show{% endif %}" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        {% endfor %}
      {% endif %}
    </div>
    {% block body_block%}{% endblock %}
  </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>


========================
App_Login::change_profile.html=> 
========================
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title %}
    Change Profile
{% endblock  %}


{% block body_block %}
<!-- <h2>Create New Account</h2> -->
<form method="POST">
    {{form|crispy}}
    {% csrf_token %}
    <button type="submit" class="btn btn-warning btn-sm" >Submit</button>
</form>  
{% endblock  %}
    
------------------------------------------------------------------------------------------------------------
------------------------------------App_Shop::Product------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
base.html=> 
---------------
{% load static %}
<!doctype html>
<html lang="en">

<head>
  <title>{% block title %}Ecommerce{% endblock %}</title>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <!-- Custom Css -->
  <link rel='stylesheet' href="{% static 'css/main.css' %}">
  <!-- css for product  -->
  <style>
    .card{
      height: 350px;
    }
    .card-product:after{
      content:"";
      display: table;
      clear:both;
      visibility: hidden;
    }
    .card-product .price-new .card-product .price{
      margin-right: 5px;
    }
    .card-product .price-old{
      color:#999;

    }
    .card-product .img-wrap{
      border-radius: 3px 3px 0 0;
      overflow: hidden;
      position:relative;
      height: 220px; 
      text-align: center;
    }
    .card-product .img-wrap img{
      max-width: 100%;
      max-height: 100%;
      object-fit: cover;
    }

    .card-product .info-wrap{
      overflow: hidden;
      padding: 15px;
      border-top:1px solid #eee;
    }
    .card-product .action-warp{
      padding-top:4px;
      margin-top: 4px;
    }
    .card-product .bottom-warp{
      padding: 15px;
      border-top:1px solid #eee;
    }
    .card-product .title{
      margin-top: 0px;
    }
  </style>
  <!-- css for product  -->
</head>

<body>
  <div class="container">
    {% include 'navbar.html' %}
  </div>
  <div class="container" style="padding-top: 15px;">
    <div class="message container mt-2">
      {% if messages %}
        {% for message in messages %}
          <div {% if message.tags %} class="alert alert-{{message.tags}} alert-dismissible fade show{% endif %}" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        {% endfor %}
      {% endif %}
    </div>
    {% block body_block%}{% endblock %}
  </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>

---------------
navbar.html=> 
---------------
  <nav class="navbar navbar-expand-lg navbar-light bg-light shadow-lg rounded mt-2">
    <div class="container-fluid">
      <a class="navbar-brand p-2" href="{% url 'App_Shop:home' %}">Django Ecommerce Project</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavDropdown">
        <ul class="navbar-nav ms-auto">
          {% if request.user.is_authenticated %}  
          <li class="nav-item">
            <a class="nav-link" href="#"><i class="fa-solid fa-cart-shopping"></i>Cart</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
             <i class="fas fa-user-tie"></i> {{request.user.profile.user_name}} 
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
              <li><a class="dropdown-item" href="{% url 'App_Login:profile' %}">Profile</a></li>
              <li><a class="dropdown-item" href="#">Order</a></li>
              <div class="dropdown-divider"></div>
              <li><a class="dropdown-item" href="{% url 'App_Login:logout' %}">LogOut </a></li>
            </ul>
          </li>
          {% else %}
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="{% url 'App_Login:login' %}">LogIn</a>
          </li>
          {% endif %}
        </ul>
      </div>
    </div>
  </nav>
  -------------------------------------
  -------------------------------------
    home.html=> 
  -------------------------------------
  {% extends 'base.html' %}

{% load crispy_forms_tags %}


{% block title %}
    Home Page
{% endblock  %}

{% block body_block %}
<!-- object_list comes from views of App_Shop as default. -->
<div class="container my-5">
    <h2 class="my-5">Feature Products</h2>
    <div class="row">
        {% for product in object_list %}
        <div class="col-md-6 col-sm-12 col-lg-3">
            <figure class="card card-product">
                <div class="img-wrap">
                    <img src="/media/{{product.mainImage}}" alt="Product Image" style="width: 100%; height: 300px;" class="">
                </div>
                <figcaption class="info-warp">
                    <h6>{{product.name}}</h6>
                    <div class="action-wrap">
                        <div class="price-wrap h5">
                            <span class="price-new">
                                &#2547; {{product.price|floatformat:2}}
                            </span>
                            <span class="price-old">
                               <strike> &#2547; {{product.old_price|floatformat:2}}</strike>
                            </span>
                        </div>
                    </div>
                </figcaption>

            </figure>

        </div>
        {% endfor %}
    </div>
</div>
{% endblock  %}
    
  -------------------------------------
  -------------------------------------
------------------------------------------------------------------------------------------------------------
-------------------------------------------Product Details Page-----------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App_Shop::urls.py=> 
---------------------
from django.urls import path 
from .views import Home,ProductDetails

app_name = 'App_Shop'

urlpatterns = [
    path("",Home.as_view(), name='home'),
    path("product/<pk>/",ProductDetails.as_view(), name='product_details')
]

---------------------
---------------------
App_Shop::views.py=> 
---------------------
---------------------
from django.shortcuts import render

# Create your views here.

from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView, DetailView

from App_Shop.models import Product 



class Home(ListView): 
    model = Product 
    template_name = 'App_Shop/home.html'


class ProductDetails(DetailView):
    model = Product 
    template_name = 'App_Shop/product_details.html' 

---------------------
---------------------
main.css-> 
---------------------
.gallery-wrap .image-wrap img{
    height: 450px;
    width: auto;
    display: inline-block;
    cursor: zoom-in;
}

.gallery-wrap .img-samll-wrap .item-gallery{
    height: 60px;
    width: 60px;
    border: 1px solid #ddd;
    margin: 7px 2px;
    display: inline-block;
    overflow: hidden;
}

.gallery-wrap .img-samll-wrap{
    text-align: center;
}

.gallery-wrap .img-samll-wrap .item-gallery{
    max-width: 100%;
    max-height: 100%;
    object-fit: cover;
    border-radius: 4px;
    cursor: zoom-in;
}
---------------------
---------------------
home.html=> 
---------------------
{% extends 'base.html' %}

{% load crispy_forms_tags %}


{% block title %}
    Home Page
{% endblock  %}

{% block body_block %}
<!-- object_list comes from views of App_Shop as default. -->
<div class="container my-5">
    <h2 class="my-5">Feature Products</h2>
    <div class="row">
        {% for product in object_list %}
        <div class="col-md-6 col-sm-12 col-lg-3">
            <figure class="card card-product">
                <div class="img-wrap">
                    <img src="/media/{{product.mainImage}}" alt="Product Image" style="width: 100%; height: 300px;" class="">
                </div>
                <figcaption class="info-warp">
                    <a href="{% url 'App_Shop:product_details' pk=product.pk %}">
                        <h6 class="card-title">{{product.name}}</h6>
                    </a>
                    <div class="action-wrap">
                        <div class="price-wrap h5">
                            <span class="price-new">
                                &#2547; {{product.price|floatformat:2}}
                            </span>
                            <span class="price-old">
                               <strike> &#2547; {{product.old_price|floatformat:2}}</strike>
                            </span>
                        </div>
                    </div>
                </figcaption>

            </figure>

        </div>
        {% endfor %}
    </div>
</div>
{% endblock  %}
    
---------------------
---------------------
products_details.html=> 
---------------------------
{% extends 'base.html' %}

<!-- this (object) -> object.name, object.price.... comes form App_Shop::views as default  -->
{% block body_block %}
    <div class="container my-5">
        <div class="card">
            <div class="row">
                <aside class="col-sm-5 border-right">
                    <article class="gallery-wrap">
                        <div class="img-big-wrap">
                            <div>
                                <img src="/media/{{product.mainImage}}" alt="Product Image"  class="" style="width: 450px;">
                            </div>
                        </div>
                    </article>
                </aside>
                <aside class="col-sm-7">
                    <article class="card-body p-5">
                        <h3 class="title mp-3">{{object.name}}</h3>
                        <p class="price-details-wrap">
                            <span class="price h3 text-warning">
                                <span class="currency">
                                    BDT &#2547 <span class="num">{{object.price}}</span>
                                </span>
                            </span>
                        </p>
                        <dl class="item-property">
                            <dt>
                                Description
                            </dt>
                            <dd>
                                <p>object.description</p>
                            </dd>
                        </dl >
                        <a href="" class="btn btn-lg btn-outline-primary"><i class="fas fa-shopping-cart"></i>Add to Cart</a>
                    </article>
                </aside>
            </div>
        </div>
    </div>
{% endblock  %}
    
---------------------------
---------------------------

------------------------------------------------------------------------------------------------------------
------------------------------------------App Order------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
>>> python manage.py startapp App_Order
------------------------------------------------------------------------------------------------------------
App_order::models=> 
---------------------------
from django.db import models
from django.conf import settings
from App_Shop.models import Product 
# Create your models here.


class Cart(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='cart')
    item = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField(default=1)
    purchased = models.BooleanField(default=False)
    created = models.DateTimeField(auto_now_add=True)
    update = models.DateTimeField(auto_now_add=True)

    def __str__(self) -> str:
        return f"{self.quantity}X{self.item}"
    
    def get_total(self): 
        total = self.item.price *self.quantity
        float_total = format(total, '0.2f')
        return float_total
    

class Order(models.Model): 
    orderItem = models.ManyToManyField(Cart)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    ordered = models.BooleanField(default=False)
    created = models.DateTimeField(auto_now_add=True)
    paymentId = models.CharField(max_length=265, blank=True, null=True)
    orderId = models.CharField(max_length=200, blank=True,null=True)

    def get_totals(self): 
        total = 0 
        for order_item in self.orderItem.all():
            total = float(order_item.get_total())
        
        return total 
    

>>> python manage.py makemigrations App_Order
>>> python manage.py migrate
---------------------------
App_order::admin.py=> 
---------------------------
from django.contrib import admin
from .models import Cart,Order

# Register your models here.
admin.site.register(Cart)
admin.site.register(Order)
---------------------------
App_order::urls=> 
---------------------------
from django.urls import path 
from App_Order import views

app_name = 'App_Order'

urlpatterns = [
    path('add/<pk>',views.add_to_cart,name='add'),
    path('cart/', views.cart_view, name='cart'),
    
]
---------------------------
App_order::views.py=> 
---------------------------
from django.shortcuts import render,get_object_or_404, redirect


from django.contrib.auth.decorators import login_required
from django.contrib import messages

from App_Order.models import Cart,Order
from App_Shop.models import Product
# Create your views here.


@login_required
def add_to_cart(request,pk): 
    item = get_object_or_404(Product, pk=pk) #get product 
    print("Item")
    print(item)
    order_item= Cart.objects.get_or_create(item=item, user=request.user, purchased=False) #get_or_create return tuple-> for convert tuple to Object/Dictionary ; use -> , order_items[0];
    print("order_item")
    print(order_item) #print tuple
    # print(order_item[0]) #if supscriptable error then comment this line. #print convert to normal object/Dictionary. Now we can -> order_item[0].quantity / order_item[0].purchased etc.
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    print("order Qs")
    print(order_qs)#when first add to cart product , then order_qs is null.
    if order_qs.exists(): #for 2nd time add to cart product , execute this line.
        order = order_qs[0] #return order as dictionary.
        if order.orderitems.filter(item=item).exists(): #this orderitems comes form Order-> orderitems | if same order item exit then , execute this block.
            order_item[0].quantity +=1
            order_item[0].save()
            messages.info(request, "This item quantity was Updated")
            return redirect('App_Shop:home')
        else: #if product different then execute this line.
            order.orderitems.add(order_item[0]) 
            messages.info(request,"This item is added to your cart.")
            return redirect("App_Shop:home")
    else: #when first item add to cart, then execute this line.
        order = Order(user=request.user)
        order.save()
        order.orderitems.add(order_item[0])
        messages.info(request,"This item is added to your cart.")
        return redirect("App_Shop:home")
    


@login_required
def cart_view(request): 
    carts = Cart.objects.filter(user=request.user, purchased=False)
    orders = Order.objects.filter(user=request.user, ordered=False)
    if carts.exists() and orders.exists(): 
        orders = orders[0]
        return render(request, 'App_Order/cart.html', context={'carts':carts, 'orders':orders})
    else: 
        messages(request, "You don't have any order !")
        return redirect('App_Shop:home')



---------------------------
App_order::product_details.html=> 
---------------------------
 <a href="{% url 'App_Order:add' pk=object.pk %}" class="btn btn-lg btn-outline-primary"><i class="fas fa-shopping-cart"></i>Add to Cart</a>
---------------------------
---------------------------
---------------------------
App_order::cart.html=> 
---------------------------
{% extends 'base.html' %}

{% block body_block %}

<div class="container my-5">
    <div class="my-5">
        <h2>Your Cart</h2>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Product Name</th>
                <th scope="col">Quantity</th>
                <th scope="col">Price per Item</th>
                <th scope="col" align="right">Total Price</th>
                <th scope="col">Remove</th>
            </tr>
        </thead>
        <tbody>
            {% for cart in carts %}
                <tr>
                    <th scope="row">{{ forloop.counter }}</th>
                    <td>
                        
                        {{ cart.item.name }}
                        
                    </td>
                    <td>
                        <a href="#" class="mr-2"><i class="fa-solid fa-minus-square"></i></a>
                        {{ cart.quantity }}
                        <a href="#" class="mr-2"><i class="fa-solid fa-plus-square"></i></a>
                    </td>
                        

                    <td>&#2547; {{ cart.item.price }}</td>
                    <td align="right">&#2547; {{ cart.get_total }}</td>
                    <td><a href="" class="btn btn-danger btn-sm">Remove From Cart</a></td>
                </tr>
            {% endfor %}
            <tr>
                <th scope="row"></th>
                <td colspan="3">Total</td>
                <td align="right">&#2547; {{ orders.get_totals | floatformat:2 }}</td>
                <td></td>
            </tr>
            <tr>
                <th scope="row"></th>
                <td colspan="5" class="text-end">
                    <a href="{% url 'App_Shop:home' %}" class="btn btn-warning btn-sm ms-4">Continue to Shopping</a>
                    <a href="{% url 'App_Shop:home' %}" class="btn btn-success btn-sm ms-4">Process to Checkout</a>
                </td>

            </tr>
        </tbody>
    </table>
</div>

{% endblock body_block %}

---------------------------
---------------------------
navbar.html=>
---------------------------
---------------------------
 <li class="nav-item">
            <a class="nav-link" href="{% url 'App_Order:cart' %}"><i class="fa-solid fa-cart-shopping"></i>Cart</a>
 </li>

------------------------------------------------------------------------------------------------------------
------------------------------------Filter: Show total product in Cart icon ----------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App_Order::templatetags::__init__.py
App_Order::templatetags::cart_tags.py=> 
--------------------------------------
from django import template
from App_Order.models import Order

register = template.Library()

@register.filter 
def cart_total(user): 
    order = Order.objects.filter(user=user, ordered=False) 

    if order.exists(): 
        return order[0].orderitems.count() #order[0] will take the first order then count according to cart.
    else:
        return 0

-------------------------------------
navbar.html=> 
-------------------------------------

 {% load cart_tag %}
 
 <nav class="navbar navbar-expand-lg navbar-light bg-light shadow-lg rounded mt-2">
    <div class="container-fluid">
      <a class="navbar-brand p-2" href="{% url 'App_Shop:home' %}">Django Ecommerce Project</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavDropdown">
        <ul class="navbar-nav ms-auto">
          {% if request.user.is_authenticated %}  
          <li class="nav-item">
            <a class="nav-link" href="{% url 'App_Order:cart' %}"><i class="fa-solid fa-cart-shopping"></i>Cart<span>{{request.user | cart_total}}</span></a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
             <i class="fas fa-user-tie"></i> {{request.user.profile.user_name}} 
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
              <li><a class="dropdown-item" href="{% url 'App_Login:profile' %}">Profile</a></li>
              <li><a class="dropdown-item" href="#">Order</a></li>
              <div class="dropdown-divider"></div>
              <li><a class="dropdown-item" href="{% url 'App_Login:logout' %}">LogOut </a></li>
            </ul>
          </li>
          {% else %}
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="{% url 'App_Login:login' %}">LogIn</a>
          </li>
          {% endif %}
        </ul>
      </div>
    </div>
  </nav>

------------------------------------------------------------------------------------------------------------
-------------------------------------Cart button +/-, order/cart remove-----------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App_Order::urls.py=> 
---------------------
---------------------
from django.urls import path 
from App_Order import views

app_name = 'App_Order'

urlpatterns = [
    path('add/<pk>',views.add_to_cart,name='add'),
    path('cart/', views.cart_view, name='cart'),
    path('remove/<pk>', views.remove_from_cart, name='remove'),
    path('increase/<pk>', views.increase_cart, name='increase'),
    path('decrease/<pk>', views.decrease_cart, name='decrease'),
    
]
---------------------
---------------------
App_Order::views.py=> 
---------------------
---------------------
from django.shortcuts import render,get_object_or_404, redirect


from django.contrib.auth.decorators import login_required
from django.contrib import messages

from App_Order.models import Cart,Order
from App_Shop.models import Product
# Create your views here.


@login_required
def add_to_cart(request,pk): 
    item = get_object_or_404(Product, pk=pk) #get product 
    # print("Item")
    # print(item)
    order_item= Cart.objects.get_or_create(item=item, user=request.user, purchased=False) #get_or_create return tuple-> for convert tuple to Object/Dictionary ; use -> , order_items[0];
    # print("order_item")
    # print(order_item) #print tuple
    # print(order_item[0]) #if supscriptable error then comment this line. #print convert to normal object/Dictionary. Now we can -> order_item[0].quantity / order_item[0].purchased etc.
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    # print("order Qs")
    # print(order_qs)#when first add to cart product , then order_qs is null.
    if order_qs.exists(): #for 2nd time add to cart product , execute this line.
        order = order_qs[0] #return order as dictionary.
        if order.orderitems.filter(item=item).exists(): #this orderitems comes form Order-> orderitems | if same order item exit then , execute this block.
            order_item[0].quantity +=1
            order_item[0].save()
            messages.info(request, "This item quantity was Updated")
            return redirect('App_Shop:home')
        else: #if product different then execute this line.
            order.orderitems.add(order_item[0]) 
            messages.info(request,"This item is added to your cart.")
            return redirect("App_Shop:home")
    else: #when first item add to cart, then execute this line.
        order = Order(user=request.user)
        order.save()
        order.orderitems.add(order_item[0])
        messages.info(request,"This item is added to your cart.")
        return redirect("App_Shop:home")
    

# cart page show the total cart item and total price: 
@login_required
def cart_view(request): 
    carts = Cart.objects.filter(user=request.user, purchased=False)
    orders = Order.objects.filter(user=request.user, ordered=False)
    if carts.exists() and orders.exists(): 
        orders = orders[0]
        return render(request, 'App_Order/cart.html', context={'carts':carts, 'orders':orders})
    else: 
        messages.info(request, "You don't have any order !")
        return redirect('App_Shop:home')



#increase/Decrease cart item & remove order: 
# many to many relationship when access data 1 table to other table , those data return tuple value , we need to convert in object. ex: Order model -> manyToMany->Cart
@login_required
def remove_from_cart(request,pk): 
    item = get_object_or_404(Product, pk=pk)
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    if order_qs.exists():
        #now check the item is exist in order_qs: 
        order = order_qs[0]
        if order.orderitems.filter(item=item).exists(): #if order item exit: then remove from cart.
            order_item = Cart.objects.filter(item=item, user=request.user, purchased=False)
            order_item = order_item[0] #for many many Fk cart return data as tuple.
            order.orderitems.remove(order_item) # remove order form order
            order_item.delete()# delete from cart
            messages.info(request, "This item is removed form Your cart")
            return redirect('App_Order:cart')
        else: 
            messages.info(request, "This Item is not in Your Cart!")
            return redirect('App_Shop:home')
    else: 
        messages.info(request, "You don't have any order!")
        return redirect("App_Shop:home")
    

#cart plus button : 

@login_required 
def increase_cart(request,pk): 
    item = get_object_or_404(Product,pk=pk)
    order_qs = Order.objects.filter(user=request.user, ordered=False)

    if order_qs.exists(): 
        order = order_qs[0]
        if order.orderitems.filter(item=item).exists(): #check the item in cart or not:
            order_item = Cart.objects.filter(item=item, user=request.user, purchased=False)[0] #filter the item form cart
            if order_item.quantity >=1: 
                order_item.quantity+=1
                order_item.save()
                messages.info(request, f"{item.name} quantity has been updated ")
                return redirect('App_Order:cart')
        else: 
             messages.info(request, f'{item.name} is not in your cart')
             return redirect('App_Shop:home')
    else: 
         messages.info(request, 'You don\'t have any active order!')
         return redirect("App_Shop:home")

#cart minus button : 

@login_required 
def decrease_cart(request,pk): 
    item = get_object_or_404(Product,pk=pk)
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    
    if order_qs.exists(): 
        order = order_qs[0]
        if order.orderitems.filter(item=item).exists(): #check the item in cart or not:
            order_item = Cart.objects.filter(item=item, user=request.user, purchased=False)[0] #filter the item form cart
            if order_item.quantity > 1: 
                order_item.quantity-=1
                order_item.save()
                messages.info(request, f"{item.name} quantity has been updated ")
                return redirect('App_Order:cart')
            else: #if product quantity less then 1 or 0. then need to remove the product form order_item/cart also
                order.orderitems.remove(order_item)
                order_item.delete()
                messages.info(request, f'{item.name} has been removed from Your cart.')
                return redirect('App_Order:cart')
        else: 
             messages.info(request, f'{item.name} is not in your cart')
             return redirect('App_Shop:home')
    else: 
         messages.info(request, 'You don\'t have any active order!')
         return redirect("App_Shop:home")
---------------------
---------------------
cart.html=> 
---------------------
---------------------
{% extends 'base.html' %}

{% block body_block %}

<div class="container my-5">
    <div class="my-5">
        <h2>Your Cart</h2>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Product Name</th>
                <th scope="col">Quantity</th>
                <th scope="col">Price per Item</th>
                <th scope="col" align="right">Total Price</th>
                <th scope="col">Remove</th>
            </tr>
        </thead>
        <tbody>
            {% for cart in carts %}
                <tr>
                    <th scope="row">{{ forloop.counter }}</th>
                    <td>
                        
                        {{ cart.item.name }}
                        
                    </td>
                    <td>
                        <a href="{% url 'App_Order:decrease' pk=cart.item.pk %}" class="btn btn-sm mr-2"><i class="fa-solid fa-minus-square"></i></a>
                        {{ cart.quantity }}
                        <a href="{% url 'App_Order:increase' pk=cart.item.pk %}" class="btn btn-sm mr-2"><i class="fa-solid fa-plus-square"></i></a>
                    </td>
                        

                    <td>&#2547; {{ cart.item.price }}</td>
                    <td align="right">&#2547; {{ cart.get_total }}</td>
                    <td><a href="{% url 'App_Order:remove' pk=cart.item.pk %}" class="btn btn-danger btn-sm">Remove From Cart</a></td>
                </tr>
            {% endfor %}
            <tr>
                <th scope="row"></th>
                <td colspan="3">Total</td>
                <td align="right">&#2547; {{ orders.get_totals | floatformat:2 }}</td>
                <td></td>
            </tr>
            <tr>
                <th scope="row"></th>
                <td colspan="5" class="text-end">
                    <a href="{% url 'App_Shop:home' %}" class="btn btn-warning btn-sm ms-4">Continue to Shopping</a>
                    <a href="{% url 'App_Shop:home' %}" class="btn btn-success btn-sm ms-4">Process to Checkout</a>
                </td>

            </tr>
        </tbody>
    </table>
</div>

{% endblock body_block %}




------------------------------------------------------------------------------------------------------------
-------------------------------------Checkout:page-----------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App_Payment::model.py=> 
----------------------
----------------------
from django.db import models
from django.conf import settings
# Create your models here.

class BillingAddress(models.Model): 
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    address = models.CharField(max_length=265, blank=True)
    zipcode = models.CharField(max_length=10, blank=True)
    city = models.CharField(max_length=30, blank=True)
    country = models.CharField(max_length=30, blank=True)

    def __str__(self) -> str:
        return f'{self.user.profile.name} billing Address'
    

    def is_fully_filled(self): 
        fields_names = [f.name for f in self._meta.get_fields()]

        for field_name in fields_names: 
            value = getattr(self,field_name)
            if value is None or value == '':
                return False 
        return True 
    
    class Meta: 
        verbose_name_plural='Billing Address'

        
----------------------
----------------------
App_Payment::forms.py=> 
----------------------
from django import forms
from App_Payment.models import BillingAddress

class BillingForm(forms.ModelForm): 
    class Meta: 
        model = BillingAddress
        fields = ['address', 'zipcode', 'city', 'country']
----------------------
App_Payment::urls.py=> 
----------------------
from django.urls import path 
from App_Payment import views

app_name = "App_Payment"

urlpatterns = [
    path('checkout/', views.checkout, name='checkout'), 
    
]

------------------------
------------------------
cart.html=>  <a href="{% url 'App_Payment:checkout' %}" class="btn btn-success btn-sm ms-4">Process to Checkout</a>
------------------------
------------------------
App_Payment::views.py=> 
------------------------
------------------------
from django.shortcuts import render


from App_Order.models import Order
from App_Payment.models import BillingAddress
from App_Payment.forms import BillingForm

from django.contrib.auth.decorators import login_required
from django.contrib import messages


# Create your views here.


@login_required
def checkout(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    save_address = save_address[0] #fix error :'tuple' object has no attribute '_meta' ; use save_address[0]
    form = BillingForm(instance=save_address)
    if request.method == "POST":
        form = BillingForm(request.POST, instance=save_address)
        if form.is_valid():
            form.save()
            form = BillingForm(instance=save_address)
            messages.success(request,f'Shipping Address Saved!')
    
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    print(order_qs)
    order_item = order_qs[0].orderitems.all()
    print(order_item)
    order_total = order_qs[0].get_totals()
            

    return render(request,'App_Payment/checkout.html', context={'form':form, 'order_item':order_item, 'order_total':order_total})
------------------------
------------------------
App_Payment::checkout.html=> 
------------------------
------------------------
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block body_block %}

<div class="container mt-5">
 <h2 class="mb-3">
    Shipping Address <span class="text-muted">Checkout</span>
 </h2>
    <div class="row d-flex justify-content-center">
        <div class="col-md-9 ">
            <div class="card mb-5" style="height: auto;">
                <div class="card-body">
                    <form method="POST">
                        {{form|crispy}}
                        {% csrf_token %}
                        <button type="submit" class="btn btn-primary float-end">Save Address</button>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card " style="height: auto;">
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        
                        {% for order_item in order_item %}
                            <li class="list-group-item"> {{order_item.item.name}} X {{order_item.quantity}}</li>
                        {% endfor %}
                            

                    </ul>
                </div>
                <div class="card-footer">
                    <span class="float-start">Order Total </span>
                    <span class="float-end">{{order_total|floatformat:2}} </span>
                </div>
            </div>

        </div>
    </div>
</div>
    
{% endblock body_block %}


    
------------------------
------------------------

------------------------
------------------------
------------------------------------------------------------------------------------------------------------
------------------------------------Payment::1------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App_Payment::views.py=> 
-----------------------
@login_required
def checkout(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    save_address = save_address[0] #fix error :'tuple' object has no attribute '_meta' ; use save_address[0]
    form = BillingForm(instance=save_address)
    if request.method == "POST":
        form = BillingForm(request.POST, instance=save_address)
        if form.is_valid():
            form.save()
            form = BillingForm(instance=save_address)
            messages.success(request,f'Shipping Address Saved!')
    
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    # print(order_qs)
    order_item = order_qs[0].orderitems.all()
    # print(order_item)
    order_total = order_qs[0].get_totals()
            

    return render(request,'App_Payment/checkout.html', context={'form':form, 'order_item':order_item, 'order_total':order_total, 'save_address':save_address})
---------------------------------
---------------------------------
checkout.html=> 
---------------------------------
---------------------------------
{% extends 'base.html' %} {% load crispy_forms_tags %} {% block body_block %}

<div class="container mt-5">
  <h2 class="mb-3">
    Shipping Address <span class="text-muted">Checkout</span>
  </h2>
  <div class="row d-flex justify-content-center">
    <div class="col-md-9">
      <div class="card mb-5" style="height: auto">
        <div class="card-body">
          <form method="POST">
            {{form|crispy}} {% csrf_token %}
            <button type="submit" class="btn btn-primary float-end">
              Save Address
            </button>
          </form>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card" style="height: auto">
        <div class="card-body">
          <ul class="list-group list-group-flush">
            {% for order_item in order_item %}
            <li class="list-group-item">
              {{order_item.item.name}} X {{order_item.quantity}}
            </li>
            {% endfor %}
          </ul>
        </div>
        <div class="card-footer">
          <span class="float-start">Order Total </span>
          <span class="float-end">{{order_total|floatformat:2}} </span>
        </div>
      </div>

      {% if save_address.is_fully_filled %}

      <a href="" class="btn btn-warning btn-md mt-5"> Make Payment</a>

      {% else %}

      <div class="alert alert-info">
        <p>Please Fillup All information to make payment.</p>
      </div>

      {% endif %}
    </div>
  </div>
</div>

{% endblock body_block %}

---------------------------------
---------------------------------
>>> pip install requests
>>> pip install sslcommerz-lib   | getting error for installing.

------------------------------------------------------------------------------------------------------------

--------------------------------------payment::2----------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App_Payment::urls.py=> 
-----------------------
from django.urls import path 
from App_Payment import views

app_name = "App_Payment"

urlpatterns = [
    path('checkout/', views.checkout, name='checkout'), 
    path('payment/', views.payment, name='payment')
    
]
-----------------------
App_Payment::models.py=> 
-----------------------
from django.db import models
from django.conf import settings
# Create your models here.

class BillingAddress(models.Model): 
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    address = models.CharField(max_length=265, blank=True)
    zipcode = models.CharField(max_length=10, blank=True)
    city = models.CharField(max_length=30, blank=True)
    country = models.CharField(max_length=30, blank=True)

    def __str__(self) -> str:
        return f'{self.user.profile.name} billing Address'
    

    def is_fully_filled(self): 
        fields_names = [f.name for f in self._meta.get_fields()]

        for field_name in fields_names: 
            value = getattr(self,field_name)
            if value is None or value == '':
                return False 
        return True 
    
    class Meta: 
        verbose_name_plural='Billing Address'

-----------------------
App_Payment::views.py=> 
-----------------------
from django.shortcuts import render,HttpResponseRedirect,redirect


from App_Order.models import Order
from App_Payment.models import BillingAddress
from App_Payment.forms import BillingForm

from django.contrib.auth.decorators import login_required
from django.contrib import messages

#Payment Laibrary => 
import requests
import socket
# from sslcommerz_lib.payment import SSLCSession
from sslcommerz_lib   import SSLCOMMERZ
from decimal import Decimal



# Create your views here.


@login_required
def checkout(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    save_address = save_address[0] #fix error :'tuple' object has no attribute '_meta' ; use save_address[0]
    form = BillingForm(instance=save_address)
    if request.method == "POST":
        form = BillingForm(request.POST, instance=save_address)
        if form.is_valid():
            form.save()
            form = BillingForm(instance=save_address)
            messages.success(request,f'Shipping Address Saved!')
    
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    # print(order_qs)
    order_item = order_qs[0].orderitems.all()
    # print(order_item)
    order_total = order_qs[0].get_totals()
            

    return render(request,'App_Payment/checkout.html', context={'form':form, 'order_item':order_item, 'order_total':order_total, 'save_address':save_address})


@login_required
def payment(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    if not save_address[0].is_fully_filled():
        messages.info(request,f'Plz complete the Shipping Address')
        return redirect('App_Payment:checkout')
    
    if not request.user.profile.is_full_filled():
        messages.info(request,f'Plz Complete the Profile details!')
        return redirect("App_Login:profile")
    return render(request,"App_Payment/payment.html",context={})


-----------------------
-----------------------
checkout.html=> 
-----------------------
    {% if save_address.is_fully_filled %}

      <a href="{% url 'App_Payment:payment' %}" class="btn btn-warning btn-md mt-5"> Make Payment</a>

      {% else %}
-----------------------
-----------------------
payment.html=> 
-----------------------
-----------------------
{% extends 'base.html' %}


{% block body_block %}

payment
    
{% endblock body_block %}
    
-----------------------
-----------------------





------------------------------------------------------------------------------------------------------------
----------------------------------------Payment::3( Payment options with SSl)--------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
# Store_ID= 'abc6522b3e894f3a'
# Store_Pass= 'abc6522b3e894f3a@ssl'
-----------------------
-----------------------
App_Payment::urls.py=> 
-----------------------
from django.urls import path 
from App_Payment import views

app_name = "App_Payment"

urlpatterns = [
    path('checkout/', views.checkout, name='checkout'), 
    path('pay/', views.payment, name='payment'),
    path('status/', views.complete, name='complete'),
    
]
-----------------------
App_Payment::views.py=> 
-----------------------
from django.shortcuts import render,HttpResponseRedirect,redirect
from django.urls import reverse


from App_Order.models import Order
from App_Payment.models import BillingAddress
from App_Payment.forms import BillingForm

from django.contrib.auth.decorators import login_required
from django.contrib import messages


# ================================================
#Payment Laibrary => 
import requests
import socket
# from sslcommerz_lib.payment import SSLCSession
from sslcommerz_lib   import SSLCOMMERZ
from decimal import Decimal

Store_ID= 'abc6522b3e894f3a'
Store_Pass= 'abc6522b3e894f3a@ssl'

from sslcommerz_lib import SSLCOMMERZ 
settings = { 'store_id': Store_ID, 'store_pass': Store_Pass, 'issandbox': True }
sslcommez = SSLCOMMERZ(settings)

# Store_ID= 'abc6522b3e894f3a'
# Store_Pass= 'abc6522b3e894f3a@ssl'

# ================================================

# Create your views here.


@login_required
def checkout(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    save_address = save_address[0] #fix error :'tuple' object has no attribute '_meta' ; use save_address[0]
    form = BillingForm(instance=save_address)
    if request.method == "POST":
        form = BillingForm(request.POST, instance=save_address)
        if form.is_valid():
            form.save()
            form = BillingForm(instance=save_address)
            messages.success(request,f'Shipping Address Saved!')
    
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    # print(order_qs)
    order_item = order_qs[0].orderitems.all()
    # print(order_item)
    order_total = order_qs[0].get_totals()
            

    return render(request,'App_Payment/checkout.html', context={'form':form, 'order_item':order_item, 'order_total':order_total, 'save_address':save_address})


@login_required
def payment(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    if not save_address[0].is_fully_filled():
        messages.info(request,f'Plz complete the Shipping Address')
        return redirect('App_Payment:checkout')
    
    if not request.user.profile.is_full_filled():
        messages.info(request,f'Plz Complete the Profile details!')
        return redirect("App_Login:profile")
    

    #ssl commerz settings= > ---------------------------->

    # status_url = request.build_absolute_uri() #print the current url: http://127.0.0.1:8000/payment/pay/
    status_url = request.build_absolute_uri(reverse("App_Payment:complete")) #print the current url: http://127.0.0.1:8000/payment/status/
    print(status_url)

    #order details=> ---------------------------------->
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    order_qs = order_qs[0]
    order_items = order_qs.orderitems.all()
    order_items_count = order_qs.orderitems.count()
    order_items_total = order_qs.get_totals()

    #user profile & address ----------------------------> 
    current_user = request.user


    print(current_user.profile.full_name)


    post_body = {}
    post_body['shipping_name'] = current_user.profile.full_name
    post_body['total_amount'] = order_items_total
    post_body['currency'] = "BDT"
    post_body['tran_id'] = "12345"
    post_body['success_url'] = status_url
    post_body['fail_url'] = status_url
    post_body['cancel_url'] =status_url
    post_body['emi_option'] = 0
    post_body['cus_name'] = current_user.profile.full_name
    post_body['cus_email'] = current_user.email
    post_body['cus_phone'] = current_user.profile.phone
    post_body['cus_add1'] = current_user.profile.address_1
    post_body['cus_city'] = current_user.profile.city
    post_body['cus_country'] =current_user.profile.country
    post_body['shipping_method'] = "No"
    post_body['multi_card_name'] = ""
    post_body['num_of_item'] = order_items_count
    post_body['product_name'] = order_items
    post_body['product_category'] = "Mixed"
    post_body['product_profile'] = "general"



    response = sslcommez.createSession(post_body)
    print(response)

    # return render(request,"App_Payment/payment.html",context={})
    return redirect(response['GatewayPageURL'])




#after complete payment views=> 

@login_required
def complete(request): 
    return render(request,"App_Payment/complete.html", context={})
-----------------------
complete.html=> 
-----------------------
{% extends 'base.html' %}


{% block body_block %}

payment Complete.
    
{% endblock body_block %}
    
-----------------------
------------------------------------------------------------------------------------------------------------
------------------------------------Payment::4------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App_Payment::views.py=> 
------------------------
from django.shortcuts import render,HttpResponseRedirect,redirect
from django.urls import reverse


from App_Order.models import Order
from App_Payment.models import BillingAddress
from App_Payment.forms import BillingForm

from django.contrib.auth.decorators import login_required
from django.contrib import messages

from django.views.decorators.csrf import csrf_exempt # remove csrf protection 


# ================================================
#Payment Laibrary => 
import requests
import socket
# from sslcommerz_lib.payment import SSLCSession
from sslcommerz_lib   import SSLCOMMERZ
from decimal import Decimal

Store_ID= 'abc6522b3e894f3a'
Store_Pass= 'abc6522b3e894f3a@ssl'

from sslcommerz_lib import SSLCOMMERZ 
settings = { 'store_id': Store_ID, 'store_pass': Store_Pass, 'issandbox': True }
sslcommez = SSLCOMMERZ(settings)

# Store_ID= 'abc6522b3e894f3a'
# Store_Pass= 'abc6522b3e894f3a@ssl'

# ================================================

# Create your views here.


@login_required
def checkout(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    save_address = save_address[0] #fix error :'tuple' object has no attribute '_meta' ; use save_address[0]
    form = BillingForm(instance=save_address)
    if request.method == "POST":
        form = BillingForm(request.POST, instance=save_address)
        if form.is_valid():
            form.save()
            form = BillingForm(instance=save_address)
            messages.success(request,f'Shipping Address Saved!')
    
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    # print(order_qs)
    order_item = order_qs[0].orderitems.all()
    # print(order_item)
    order_total = order_qs[0].get_totals()
            

    return render(request,'App_Payment/checkout.html', context={'form':form, 'order_item':order_item, 'order_total':order_total, 'save_address':save_address})


@login_required
def payment(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    if not save_address[0].is_fully_filled():
        messages.info(request,f'Plz complete the Shipping Address')
        return redirect('App_Payment:checkout')
    
    if not request.user.profile.is_full_filled():
        messages.info(request,f'Plz Complete the Profile details!')
        return redirect("App_Login:profile")
    

    #ssl commerz settings= > ---------------------------->

    # status_url = request.build_absolute_uri() #print the current url: http://127.0.0.1:8000/payment/pay/
    status_url = request.build_absolute_uri(reverse("App_Payment:complete")) #print the current url: http://127.0.0.1:8000/payment/status/
    print(status_url)

    #order details=> ---------------------------------->
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    order_qs = order_qs[0]
    order_items = order_qs.orderitems.all()
    order_items_count = order_qs.orderitems.count()
    order_items_total = order_qs.get_totals()

    #user profile & address ----------------------------> 
    current_user = request.user


    print(current_user.profile.full_name)


    post_body = {}
    post_body['shipping_name'] = current_user.profile.full_name
    post_body['total_amount'] = order_items_total
    post_body['currency'] = "BDT"
    post_body['tran_id'] = "12345"
    post_body['success_url'] = status_url
    post_body['fail_url'] = status_url
    post_body['cancel_url'] =status_url
    post_body['emi_option'] = 0
    post_body['cus_name'] = current_user.profile.full_name
    post_body['cus_email'] = current_user.email
    post_body['cus_phone'] = current_user.profile.phone
    post_body['cus_add1'] = current_user.profile.address_1
    post_body['cus_city'] = current_user.profile.city
    post_body['cus_country'] =current_user.profile.country
    post_body['shipping_method'] = "No"
    post_body['multi_card_name'] = ""
    post_body['num_of_item'] = order_items_count
    post_body['product_name'] = order_items
    post_body['product_category'] = "Mixed"
    post_body['product_profile'] = "general"



    response = sslcommez.createSession(post_body)
    # print(response)

    # return render(request,"App_Payment/payment.html",context={})
    return redirect(response['GatewayPageURL'])




#after complete payment views=> 

@csrf_exempt
def complete(request): 
    if request.method=="POST" or request.method=='post':
        payment_data= request.POST
        # print(payment_data)
        status = payment_data['status']
        val = payment_data['val_id']
        bank_id = payment_data['bank_tran_id']
    
    if status =='VALID':
        messages.success(request, f'Your Payment Successfully Paid!')
    else: 
        messages.warning(request,f'Your Payment Failded! Please Try Again.')
    return render(request,"App_Payment/complete.html", context={})
------------------------------------------------------------------------------------------------------------
----------------------------------------Payment::--------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
App_Payment::urls.py=> 
-----------------------
-----------------------
from django.urls import path 
from App_Payment import views

app_name = "App_Payment"

urlpatterns = [
    path('checkout/', views.checkout, name='checkout'), 
    path('pay/', views.payment, name='payment'),
    path('status/', views.complete, name='complete'),
    path('purchased/<val_id>/<tran_id>/', views.purchased, name='purchased'),
    
]
-----------------------
-----------------------
App_Payment::views.py=> 
-----------------------
-----------------------
from django.shortcuts import render,HttpResponseRedirect,redirect
from django.urls import reverse


from App_Order.models import Order
from App_Payment.models import BillingAddress
from App_Payment.forms import BillingForm

from django.contrib.auth.decorators import login_required
from django.contrib import messages

from django.views.decorators.csrf import csrf_exempt # remove csrf protection 


# ================================================
#Payment Laibrary => 
import requests
import socket
# from sslcommerz_lib.payment import SSLCSession
from sslcommerz_lib   import SSLCOMMERZ
from decimal import Decimal

Store_ID= 'abc6522b3e894f3a'
Store_Pass= 'abc6522b3e894f3a@ssl'

from sslcommerz_lib import SSLCOMMERZ 
settings = { 'store_id': Store_ID, 'store_pass': Store_Pass, 'issandbox': True }
sslcommez = SSLCOMMERZ(settings)

# Store_ID= 'abc6522b3e894f3a'
# Store_Pass= 'abc6522b3e894f3a@ssl'

# ================================================

# Create your views here.


@login_required
def checkout(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    save_address = save_address[0] #fix error :'tuple' object has no attribute '_meta' ; use save_address[0]
    form = BillingForm(instance=save_address)
    if request.method == "POST":
        form = BillingForm(request.POST, instance=save_address)
        if form.is_valid():
            form.save()
            form = BillingForm(instance=save_address)
            messages.success(request,f'Shipping Address Saved!')
    
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    # print(order_qs)
    order_item = order_qs[0].orderitems.all()
    # print(order_item)
    order_total = order_qs[0].get_totals()
            

    return render(request,'App_Payment/checkout.html', context={'form':form, 'order_item':order_item, 'order_total':order_total, 'save_address':save_address})


@login_required
def payment(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    if not save_address[0].is_fully_filled():
        messages.info(request,f'Plz complete the Shipping Address')
        return redirect('App_Payment:checkout')
    
    if not request.user.profile.is_full_filled():
        messages.info(request,f'Plz Complete the Profile details!')
        return redirect("App_Login:profile")
    

    #ssl commerz settings= > ---------------------------->

    # status_url = request.build_absolute_uri() #print the current url: http://127.0.0.1:8000/payment/pay/
    status_url = request.build_absolute_uri(reverse("App_Payment:complete")) #print the current url: http://127.0.0.1:8000/payment/status/
    print(status_url)

    #order details=> ---------------------------------->
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    order_qs = order_qs[0]
    order_items = order_qs.orderitems.all()
    order_items_count = order_qs.orderitems.count()
    order_items_total = order_qs.get_totals()

    #user profile & address ----------------------------> 
    current_user = request.user


    print(current_user.profile.full_name)


    post_body = {}
    post_body['shipping_name'] = current_user.profile.full_name
    post_body['total_amount'] = order_items_total
    post_body['currency'] = "BDT"
    post_body['tran_id'] = "12345"
    post_body['success_url'] = status_url
    post_body['fail_url'] = status_url
    post_body['cancel_url'] =status_url
    post_body['emi_option'] = 0
    post_body['cus_name'] = current_user.profile.full_name
    post_body['cus_email'] = current_user.email
    post_body['cus_phone'] = current_user.profile.phone
    post_body['cus_add1'] = current_user.profile.address_1
    post_body['cus_city'] = current_user.profile.city
    post_body['cus_country'] =current_user.profile.country
    post_body['shipping_method'] = "No"
    post_body['multi_card_name'] = ""
    post_body['num_of_item'] = order_items_count
    post_body['product_name'] = order_items
    post_body['product_category'] = "Mixed"
    post_body['product_profile'] = "general"



    response = sslcommez.createSession(post_body)
    # print(response)

    # return render(request,"App_Payment/payment.html",context={})
    return redirect(response['GatewayPageURL'])




#after complete payment views=> 

@csrf_exempt
def complete(request): 
    if request.method=="POST" or request.method=='post':
        payment_data= request.POST
        # print(payment_data)
        status = payment_data['status']
        
    
    if status =='VALID':
        val_id = payment_data['val_id']
        tran_id = payment_data['tran_id']
        bank_id = payment_data['bank_tran_id']
        messages.success(request, f'Your Payment Successfully Paid!')
        return HttpResponseRedirect(reverse("App_Payment:purchased", kwargs={'val_id':val_id,'tran_id':tran_id},))
    else: 
        messages.warning(request,f'Your Payment Failded! Please Try Again.')
    return render(request,"App_Payment/complete.html", context={})

from App_Order.models import Cart
#after payment ordered and purchased have to be False:
@login_required
def purchased(request,val_id,tran_id):
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    order = order_qs[0]
    order_id =tran_id
    order.ordered=True 
    order.paymentId=val_id
    order.save()
    cart_items = Cart.objects.filter(user=request.user,purchased=False)
    for item in cart_items:
        item.purchased = True 
        item.save()
    return HttpResponseRedirect(reverse("App_Shop:home")) 

-----------------------
-----------------------
complete.html-> 
-----------------------
-----------------------
<!doctype html>
<html lang="en">

<>
  <title>Title</title>
  <!-- Required meta tags -->
    <!-- custom meta tag for 5s waiting to redirect home page  -->
  <meta http-equiv="refresh" content="5; {% url 'App_Shop:home' %}" >
  <!-- custom meta tag for 5s waiting to redirect home page  -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS v5.2.1 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
    <div class="container" style="padding-top: 15px;">
        <strong>::After 5s you'll redirect to Home Page::</strong>
        <div class="message container mt-2">
          {% if messages %}
            {% for message in messages %}
              <div {% if message.tags %} class="alert alert-{{message.tags}} alert-dismissible fade show{% endif %}" role="alert">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
              </div>
            {% endfor %}
          {% endif %}
        </div>
        {% block body_block%}{% endblock %}
      </div>
  <!-- Bootstrap JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
    
------------------------------------------------------------------------------------------------------------
----------------------------------------show the successfull order!--------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
---------------------------------
App_Payment::urls.py=> 
---------------------------------
---------------------------------
from django.urls import path 
from App_Payment import views

app_name = "App_Payment"

urlpatterns = [
    path('checkout/', views.checkout, name='checkout'), 
    path('pay/', views.payment, name='payment'),
    path('status/', views.complete, name='complete'),
    path('purchased/<val_id>/<tran_id>/', views.purchased, name='purchased'),
    path('orders/', views.order_view, name="orders"), 
    
]
---------------------------------
---------------------------------
App_Payment::views.py=> 
---------------------------------
---------------------------------
from django.shortcuts import render,HttpResponseRedirect,redirect
from django.urls import reverse


from App_Order.models import Order
from App_Payment.models import BillingAddress
from App_Payment.forms import BillingForm

from django.contrib.auth.decorators import login_required
from django.contrib import messages

from django.views.decorators.csrf import csrf_exempt # remove csrf protection 


# ================================================
#Payment Laibrary => 
import uuid
import requests
import socket
# from sslcommerz_lib.payment import SSLCSession
from sslcommerz_lib   import SSLCOMMERZ
from decimal import Decimal

Store_ID= 'abc6522b3e894f3a'
Store_Pass= 'abc6522b3e894f3a@ssl'

from sslcommerz_lib import SSLCOMMERZ 
settings = { 'store_id': Store_ID, 'store_pass': Store_Pass, 'issandbox': True }
sslcommez = SSLCOMMERZ(settings)

# Store_ID= 'abc6522b3e894f3a'
# Store_Pass= 'abc6522b3e894f3a@ssl'

# ================================================

# Create your views here.


@login_required
def checkout(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    save_address = save_address[0] #fix error :'tuple' object has no attribute '_meta' ; use save_address[0]
    form = BillingForm(instance=save_address)
    if request.method == "POST":
        form = BillingForm(request.POST, instance=save_address)
        if form.is_valid():
            form.save()
            form = BillingForm(instance=save_address)
            messages.success(request,f'Shipping Address Saved!')
    
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    # print(order_qs)
    order_item = order_qs[0].orderitems.all()
    # print(order_item)
    order_total = order_qs[0].get_totals()
            

    return render(request,'App_Payment/checkout.html', context={'form':form, 'order_item':order_item, 'order_total':order_total, 'save_address':save_address})


@login_required
def payment(request): 
    save_address = BillingAddress.objects.get_or_create(user=request.user)
    if not save_address[0].is_fully_filled():
        messages.info(request,f'Plz complete the Shipping Address')
        return redirect('App_Payment:checkout')
    
    if not request.user.profile.is_full_filled():
        messages.info(request,f'Plz Complete the Profile details!')
        return redirect("App_Login:profile")
    

    #ssl commerz settings= > ---------------------------->

    # status_url = request.build_absolute_uri() #print the current url: http://127.0.0.1:8000/payment/pay/
    status_url = request.build_absolute_uri(reverse("App_Payment:complete")) #print the current url: http://127.0.0.1:8000/payment/status/
    print(status_url)

    #order details=> ---------------------------------->
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    order_qs = order_qs[0]
    order_items = order_qs.orderitems.all()
    order_items_count = order_qs.orderitems.count()
    order_items_total = order_qs.get_totals()

    #user profile & address ----------------------------> 
    current_user = request.user


    print(current_user.profile.full_name)


    post_body = {}
    post_body['shipping_name'] = current_user.profile.full_name
    post_body['total_amount'] = order_items_total
    post_body['currency'] = "BDT"
    post_body['tran_id'] = str(uuid.uuid4())
    post_body['success_url'] = status_url
    post_body['fail_url'] = status_url
    post_body['cancel_url'] =status_url
    post_body['emi_option'] = 0
    post_body['cus_name'] = current_user.profile.full_name
    post_body['cus_email'] = current_user.email
    post_body['cus_phone'] = current_user.profile.phone
    post_body['cus_add1'] = current_user.profile.address_1
    post_body['cus_city'] = current_user.profile.city
    post_body['cus_country'] =current_user.profile.country
    post_body['shipping_method'] = "No"
    post_body['multi_card_name'] = ""
    post_body['num_of_item'] = order_items_count
    post_body['product_name'] = order_items
    post_body['product_category'] = "Mixed"
    post_body['product_profile'] = "general"



    response = sslcommez.createSession(post_body)
    # print(response)

    # return render(request,"App_Payment/payment.html",context={})
    return redirect(response['GatewayPageURL'])




#after complete payment views=> 

@csrf_exempt
def complete(request): 
    if request.method=="POST" or request.method=='post':
        payment_data= request.POST
        # print(payment_data)
        status = payment_data['status']
        
    
    if status =='VALID':
        val_id = payment_data['val_id']
        tran_id = payment_data['tran_id']
        bank_id = payment_data['bank_tran_id']
        # print(f'tran_id: {tran_id}')
        messages.success(request, f'Your Payment Successfully Paid!')
        return HttpResponseRedirect(reverse("App_Payment:purchased", kwargs={'val_id':val_id,'tran_id':tran_id},))
    else: 
        messages.warning(request,f'Your Payment Failded! Please Try Again.')
    return render(request,"App_Payment/complete.html", context={})

from App_Order.models import Cart
#after payment ordered and purchased have to be False:
@login_required
def purchased(request, val_id, tran_id):
    print(f"val_id: {val_id}, tran_id: {tran_id}")  # Add this line for debugging
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    order = order_qs[0]
    order.orderId= tran_id
    order.ordered = True 
    order.paymentId = val_id
    order.save()
    cart_items = Cart.objects.filter(user=request.user, purchased=False)
    for item in cart_items:
        item.purchased = True 
        item.save()
    return HttpResponseRedirect(reverse("App_Shop:home"))




#after successfully comple payment , show the order items=> 

@login_required
def order_view(request): 
    try : 
        orders = Order.objects.filter(user=request.user, ordered=True)
        context = {'orders': orders}
    except:
        messages.warning(request,'You don\'t have any active order')
        return redirect("App_Shop:home")
    return render(request, "App_Payment/order.html", context=context)

---------------------------------
navbar.html=> 
---------------------------------
 <li><a class="dropdown-item" href="{% url 'App_Payment:orders' %}">Order</a></li>
---------------------------------
---------------------------------
order.html=> 
---------------------------------
---------------------------------
{% extends 'base.html' %}



{% block body_block %}

<div class="container m-5">
    <h2 class="text-center"><strong>Your Order</strong></h2>
    <div class="row">
        <div class="col-12">
            <div class="card mt-5 " style="height: auto;">
                <div class="table-response">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Order ID</th>
                                <th scope="col">Product</th>
                                <th scope="col">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            
                            {% for order in orders %}
                                <tr>
                                    <th scope="row">{{forloop.counter}}</th>
                                    <td >
                                        <a href="#">{{order.orderId}}</a>
                                    </td>
                                    <td>
                                        
                                        {% for item in order.orderitems.all %}
                                             {{item}}
                                        {% endfor %}
                                            
                                    </td>
                                    <td><span class="btn btn-warning btn-sm">Processing Your Order </span></td>
                                </tr>
                            {% endfor %}
                                
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 my-5 text-center">
        <a href="{% url 'App_Shop:home' %}">Back To Home</a>        
    </div>
</div>
    
{% endblock body_block %}


    -----------------------------------------Alhamdulillah------------------------------------------------